<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>smalljerry aka dsjerry</title>
  
  <subtitle>smalljerry</subtitle>
  <link href="https://smalljerry.cn/atom.xml" rel="self"/>
  
  <link href="https://smalljerry.cn/"/>
  <updated>2025-06-12T15:25:05.912Z</updated>
  <id>https://smalljerry.cn/</id>
  
  <author>
    <name>dsjerry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>API风格指南</title>
    <link href="https://smalljerry.cn/2025/06/12/API%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
    <id>https://smalljerry.cn/2025/06/12/API%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/</id>
    <published>2025-06-12T14:51:37.000Z</published>
    <updated>2025-06-12T15:25:05.912Z</updated>
    
    <content type="html"><![CDATA[<p>🪷 我是荷花，我想开了</p><span id="more"></span><hr><p>最近在学 NestJS，<br>有时候总会想到：这样不合理，那又不好看，从而在钻牛角尖。不如从规范入手，毕竟这是大家公认的（合理）</p><h1 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h1><h2 id="1-资源（Resources）"><a href="#1-资源（Resources）" class="headerlink" title="1. 资源（Resources）"></a>1. 资源（Resources）</h2><ul><li>使用名词（复数形式）表示资源</li><li>示例：<code>/users</code>, <code>/articles</code>, <code>/products</code></li></ul><h2 id="2-HTTP-方法"><a href="#2-HTTP-方法" class="headerlink" title="2. HTTP 方法"></a>2. HTTP 方法</h2><table><thead><tr><th>方法</th><th>描述</th><th>幂等性</th><th>示例</th></tr></thead><tbody><tr><td>GET</td><td>获取资源</td><td>是</td><td><code>GET /users</code></td></tr><tr><td>POST</td><td>创建新资源</td><td>否</td><td><code>POST /users</code></td></tr><tr><td>PUT</td><td>更新整个资源（全量替换）</td><td>是</td><td><code>PUT /users/1</code></td></tr><tr><td>PATCH</td><td>部分更新资源</td><td>否</td><td><code>PATCH /users/1</code></td></tr><tr><td>DELETE</td><td>删除资源</td><td>是</td><td><code>DELETE /users/1</code></td></tr></tbody></table><h2 id="3-状态码"><a href="#3-状态码" class="headerlink" title="3. 状态码"></a>3. 状态码</h2><ul><li><code>200 OK</code> - 成功</li><li><code>201 Created</code> - 创建成功</li><li><code>204 No Content</code> - 成功但无返回内容</li><li><code>400 Bad Request</code> - 请求错误</li><li><code>401 Unauthorized</code> - 未认证</li><li><code>403 Forbidden</code> - 无权限</li><li><code>404 Not Found</code> - 资源不存在</li><li><code>500 Internal Server Error</code> - 服务器错误</li></ul><h2 id="4-URL-设计"><a href="#4-URL-设计" class="headerlink" title="4. URL 设计"></a>4. URL 设计</h2><ul><li>使用小写字母和连字符 <code>-</code></li><li>使用 <code>/</code> 表示层级关系</li><li>示例：<code>/users/123/orders</code></li></ul><h2 id="5-查询参数"><a href="#5-查询参数" class="headerlink" title="5. 查询参数"></a>5. 查询参数</h2><ul><li>用于过滤、排序、分页等</li><li>示例：<ul><li>过滤：<code>/users?role=admin</code></li><li>分页：<code>/users?page=2&amp;limit=10</code></li><li>排序：<code>/users?sort=-created_at,name</code></li></ul></li></ul><h2 id="6-版本控制"><a href="#6-版本控制" class="headerlink" title="6. 版本控制"></a>6. 版本控制</h2><ul><li>URL 中包含版本号：<code>/api/v1/users</code></li><li>或使用请求头：<code>Accept: application/vnd.myapp.v1+json</code></li></ul><h2 id="7-响应格式"><a href="#7-响应格式" class="headerlink" title="7. 响应格式"></a>7. 响应格式</h2><ul><li>使用 JSON 格式</li><li>包含元数据（如分页信息）</li><li>示例：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pagination&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;limit&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="8-错误处理"><a href="#8-错误处理" class="headerlink" title="8. 错误处理"></a>8. 错误处理</h2><ul><li>包含错误码和描述信息</li><li>示例：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;invalid_input&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Name is required&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;details&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;issue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;required&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="9-安全"><a href="#9-安全" class="headerlink" title="9. 安全"></a>9. 安全</h2><ul><li>使用 HTTPS</li><li>使用适当的认证机制（如 JWT、OAuth2.0）</li><li>实现速率限制</li></ul><h2 id="10-最佳实践"><a href="#10-最佳实践" class="headerlink" title="10. 最佳实践"></a>10. 最佳实践</h2><ul><li>使用名词而非动词</li><li>保持 URL 简洁</li><li>使用适当的 HTTP 状态码</li><li>提供清晰的文档</li><li>实现 HATEOAS（可选）</li></ul><h2 id="11-常见端点示例"><a href="#11-常见端点示例" class="headerlink" title="11. 常见端点示例"></a>11. 常见端点示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET    /users           # 获取用户列表</span><br><span class="line">POST   /users           # 创建用户</span><br><span class="line">GET    /users/&#123;id&#125;      # 获取单个用户</span><br><span class="line">PUT    /users/&#123;id&#125;      # 更新用户（全量）</span><br><span class="line">PATCH  /users/&#123;id&#125;      # 更新用户（部分）</span><br><span class="line">DELETE /users/&#123;id&#125;      # 删除用户</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;🪷 我是荷花，我想开了&lt;/p&gt;</summary>
    
    
    
    <category term="后端学习" scheme="https://smalljerry.cn/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="API" scheme="https://smalljerry.cn/tags/API/"/>
    
    <category term="开发规范" scheme="https://smalljerry.cn/tags/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Vant组件示例</title>
    <link href="https://smalljerry.cn/2025/03/03/Vant%E7%BB%84%E4%BB%B6%E7%A4%BA%E4%BE%8B/"/>
    <id>https://smalljerry.cn/2025/03/03/Vant%E7%BB%84%E4%BB%B6%E7%A4%BA%E4%BE%8B/</id>
    <published>2025-03-03T14:51:34.000Z</published>
    <updated>2025-03-03T15:18:41.290Z</updated>
    
    <content type="html"><![CDATA[<p>📦 复制就能使用？</p><span id="more"></span><p>Vant4，<a href="https://vant-ui.github.io/vant/#/zh-CN">官方文档</a></p><h1 id="渲染组件"><a href="#渲染组件" class="headerlink" title="渲染组件"></a>渲染组件</h1><h2 id="嵌套的collapse"><a href="#嵌套的collapse" class="headerlink" title="嵌套的collapse"></a>嵌套的collapse</h2><p>嵌套的折叠面板，建议名字：<code>NestedCollapse.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;van-collapse class=&quot;nested-collapse&quot; v-model=&quot;activeNames&quot; accordion&gt;</span><br><span class="line">    &lt;van-collapse-item v-for=&quot;item in items&quot; :key=&quot;item.id&quot; :name=&quot;item.id&quot;&gt;</span><br><span class="line">      &lt;template #right-icon&gt;</span><br><span class="line">        &lt;van-icon</span><br><span class="line">          v-if=&quot;item.childList?.length&quot;</span><br><span class="line">          :name=&quot;activeNames == item.id ? &#x27;arrow-up&#x27; : &#x27;arrow-down&#x27;&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template #title&gt;</span><br><span class="line">        &lt;div class=&quot;title&quot; @click.stop=&quot;onItemClick(item)&quot;&gt;</span><br><span class="line">          &#123;&#123; item.name &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;nested-collapse</span><br><span class="line">        v-if=&quot;item.childList?.length&quot;</span><br><span class="line">        :items=&quot;item.childList&quot;</span><br><span class="line">        @click=&quot;(item) =&gt; onItemClick(item)&quot;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/van-collapse-item&gt;</span><br><span class="line">  &lt;/van-collapse&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">/**</span><br><span class="line"> * 嵌套折叠面板，每层传递childList</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">interface Item &#123;</span><br><span class="line">  id: string | number;</span><br><span class="line">  name: string;</span><br><span class="line">  childList?: Item[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 手风琴模式（accordion）绑定普通类型即可，否则需要绑定数组</span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">  items: Item[];</span><br><span class="line">&#125;&gt;();</span><br><span class="line"></span><br><span class="line">const emit = defineEmits&lt;&#123;</span><br><span class="line">  (e: &quot;click&quot;, item: Item): void;</span><br><span class="line">&#125;&gt;();</span><br><span class="line"></span><br><span class="line">const activeNames = ref(&quot;&quot;);</span><br><span class="line"></span><br><span class="line">function onItemClick(item: Item) &#123;</span><br><span class="line">  emit(&quot;click&quot;, item);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.nested-collapse &#123;</span><br><span class="line">  --van-cell-horizontal-padding: 4px;</span><br><span class="line">  --van-cell-group-background: transparent;</span><br><span class="line">  --van-cell-background: transparent;</span><br><span class="line"></span><br><span class="line">  :deep(.van-collapse-item__content) &#123;</span><br><span class="line">    --van-collapse-item-content-background: transparent;</span><br><span class="line">    padding-left: 16px;</span><br><span class="line">  &#125;</span><br><span class="line">  // 留出点空位</span><br><span class="line">  // 点击标题时阻止了组件的默认事件，如果宽度为100%会导致右边的箭头无法点击</span><br><span class="line">  .title &#123;</span><br><span class="line">    width: 96%;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="单行日期选择"><a href="#单行日期选择" class="headerlink" title="单行日期选择"></a>单行日期选择</h2><p>当天选中为主题色作为背景色，选中其他日期主题色为边框，建议名称：<code>InlineDatePicker.vue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;calendar&quot;&gt;</span><br><span class="line">    &lt;!-- 周标题 --&gt;</span><br><span class="line">    &lt;div v-if=&quot;!inSameRound&quot; class=&quot;weekdays&quot;&gt;</span><br><span class="line">      &lt;div v-for=&quot;(day, index) in weekdays&quot; :key=&quot;index&quot; class=&quot;weekday&quot;&gt;</span><br><span class="line">        &#123;&#123; day &#125;&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 日期 --&gt;</span><br><span class="line">    &lt;div class=&quot;dates&quot;&gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        v-for=&quot;(date, index) in dates&quot;</span><br><span class="line">        :key=&quot;index&quot;</span><br><span class="line">        class=&quot;date&quot;</span><br><span class="line">        :class=&quot;&#123; today: date.isToday, active: isSelected(date) &#125;&quot;</span><br><span class="line">        @click=&quot;selectDate(date)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;span v-if=&quot;inSameRound&quot;&gt;&#123;&#123; date.day &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;span v-if=&quot;date.date&quot;&gt;&#123;&#123; date.date &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">interface Props &#123;</span><br><span class="line">  inSameRound?: boolean; // 星期和日期在一个圆形内</span><br><span class="line">&#125;</span><br><span class="line">interface Emits &#123;</span><br><span class="line">  (e: &quot;select&quot;, date: DateType): void;</span><br><span class="line">&#125;</span><br><span class="line">interface DateType &#123;</span><br><span class="line">  day: string; // 周</span><br><span class="line">  date: number; // 日</span><br><span class="line">  fullDate: string;</span><br><span class="line">  isToday: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const props = defineProps&lt;Props&gt;();</span><br><span class="line">const emit = defineEmits&lt;Emits&gt;();</span><br><span class="line"></span><br><span class="line">const weekdays = ref([&quot;日&quot;, &quot;一&quot;, &quot;二&quot;, &quot;三&quot;, &quot;四&quot;, &quot;五&quot;, &quot;六&quot;]);</span><br><span class="line">const today = new Date();</span><br><span class="line"></span><br><span class="line">const selectedDate = ref&lt;DateType | null&gt;(null);</span><br><span class="line">const isSelected = (date: DateType) =&gt; &#123;</span><br><span class="line">  return selectedDate.value?.fullDate === date.fullDate;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 生成当前周的日期数据</span><br><span class="line">const dates = computed(() =&gt; &#123;</span><br><span class="line">  const startOfWeek = new Date(today);</span><br><span class="line">  startOfWeek.setDate(today.getDate() - today.getDay());</span><br><span class="line"></span><br><span class="line">  return Array.from(&#123; length: 7 &#125;).map((_, index) =&gt; &#123;</span><br><span class="line">    const currentDate = new Date(startOfWeek);</span><br><span class="line">    currentDate.setDate(startOfWeek.getDate() + index);</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      day: weekdays.value[index],</span><br><span class="line">      date: currentDate.getDate(),</span><br><span class="line">      isToday: currentDate.toDateString() === today.toDateString(),</span><br><span class="line">      fullDate: currentDate.toLocaleDateString(),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function selectDate(date: DateType) &#123;</span><br><span class="line">  selectedDate.value = date;</span><br><span class="line">  emit(&quot;select&quot;, date);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.calendar &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weekdays,</span><br><span class="line">.dates &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-around;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weekday,</span><br><span class="line">.date &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.date &#123;</span><br><span class="line">  $date-size: 30px;</span><br><span class="line"></span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  width: $date-size;</span><br><span class="line">  max-width: $date-size;</span><br><span class="line">  height: $date-size;</span><br><span class="line">  margin-top: 5px;</span><br><span class="line">  border-radius: 100%;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.date.today &#123;</span><br><span class="line">  color: white;</span><br><span class="line">  background-color: var(--van-primary-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.date.active &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  border: 1px solid var(--van-primary-color);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;📦 复制就能使用？&lt;/p&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://smalljerry.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="vue" scheme="https://smalljerry.cn/tags/vue/"/>
    
    <category term="组件" scheme="https://smalljerry.cn/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>部署手册</title>
    <link href="https://smalljerry.cn/2025/02/15/%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/"/>
    <id>https://smalljerry.cn/2025/02/15/%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/</id>
    <published>2025-02-15T08:50:12.000Z</published>
    <updated>2025-06-02T03:12:00.650Z</updated>
    
    <content type="html"><![CDATA[<p>👋 永远都记不住的配置过程</p><span id="more"></span><h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="linux-配置登录"><a href="#linux-配置登录" class="headerlink" title="linux 配置登录"></a>linux 配置登录</h2><blockquote><p>Windows 会直接弹出弹窗以输入账号密码（前提是安装了 GUI 软件）</p></blockquote><p>使用<code>git push</code>时输入用户明和密码登录后，提示不再支持此登录方式：</p><p><img src="https://s21.ax1x.com/2025/03/03/pEG7DfI.png" alt="废弃提示"></p><p>根据提示中的链接，找到<a href="https://github.com/git-ecosystem/git-credential-manager/blob/main/README.md">Git 凭据管理器</a>（Git Credential Manager），大致安装、配置步骤：（Ubuntu）</p><ol><li>安装.NET tool</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update &amp;&amp; \</span><br><span class="line">  <span class="built_in">sudo</span> apt-get install -y dotnet-sdk-8.0</span><br></pre></td></tr></table></figure><ol start="2"><li>安装管理工具</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet tool install -g git-credential-manager</span><br></pre></td></tr></table></figure><p>成功安装后会提示将其设置到环境变量中：</p><p><img src="https://s21.ax1x.com/2025/03/03/pEG766f.png" alt="配置环境变量"></p><ol start="3"><li>配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git-credential-manager configure</span><br></pre></td></tr></table></figure><p>设置<code>GCM_CREDENTIAL_STORE</code>环境变量，这里使用<code>gpg</code>，并且需要额外安装<code>pass</code>（此外还有别的设置形式）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GCM_CREDENTIAL_STORE=<span class="string">&quot;gpg&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install pass</span><br></pre></td></tr></table></figure><p>初始化 store</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># init后面的名称随意</span></span><br><span class="line">pass init github-gpg-id</span><br></pre></td></tr></table></figure><p>推送代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2025/03/03/pEG72nS.png" alt="选择gpg"></p><h1 id="NGINX"><a href="#NGINX" class="headerlink" title="NGINX"></a>NGINX</h1><p>👉 <a href="https://smalljerry.cn/2020/11/06/Nginx%E5%AE%89%E8%A3%85/">Nginx 安装</a></p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><blockquote><p>常见操作就是使用代理结局跨域问题</p></blockquote><h3 id="端口到子域名"><a href="#端口到子域名" class="headerlink" title="端口到子域名"></a>端口到子域名</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> your_subdomain.yourdomain.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="端口到路径"><a href="#端口到路径" class="headerlink" title="端口到路径"></a>端口到路径</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /your-subpath/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8080;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="示例：解决前端跨域"><a href="#示例：解决前端跨域" class="headerlink" title="示例：解决前端跨域"></a>示例：解决前端跨域</h3><blockquote><p>通过代理请求以解决<code>前端跨域</code>问题，原因是由浏览器的同源策略导致（Same-Origin Policy）</p></blockquote><p>前端跨域产生的原因：浏览器通过 JavaScript 发送网络请求时，请求的接口与当前页面的 URL 不在同一个域名、协议和端口之下，浏览器就会认为这是一个跨域请求，从而根据同源策略阻止这个请求（除非服务器在响应头明确声明允许跨域）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前端请求 /api 的代理配置</span></span><br><span class="line">    <span class="section">location</span> /api/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://api.example.com/;  <span class="comment"># 将请求转发到后端服务</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>location</code>配置的是<code>/api/</code>而不是<code>/api</code>，二者区别：</p><ul><li><code>/api/</code>：匹配当前规则之后的所有路径</li><li><code>/api</code>：匹配以这个开头的所有路径</li></ul><p><code>proxy_pass</code>同样需要以/结尾，二者区别：</p><ul><li>有<code>/</code>结尾：请求中的/api 将会被去掉，其余部分拼接上去<ul><li>如：<code>http://api.example.com/login</code></li></ul></li><li>无<code>/</code>结尾：/api 会继续拼接到请求的接口中<ul><li>如：<code>http://api.example.com/api/login</code></li></ul></li></ul><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="VSCode-容器开发"><a href="#VSCode-容器开发" class="headerlink" title="VSCode 容器开发"></a>VSCode 容器开发</h2><p>⚙️ 需要安装 vscode 插件<code>Dev Containers</code></p><p>🔗 容器内外文件会自动同步</p><p>使用场景：统一的开发环境，或者是特殊的开发环境，以下示例基于<code>python2</code>、<code>node14</code>的不常见开发环境（对于 2025 年来说）</p><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>在根目录创建<code>.devcontainer</code>文件夹，添加以下文件：</p><p><strong><code>Dockerfile</code></strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用官方 Python 2 镜像作为基础</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">2.7</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Node.js 14</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get install -y curl</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -fsSL https://deb.nodesource.com/setup_14.x | bash -</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y nodejs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装常用工具（可选）</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y git vim</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /workspace</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Python 依赖（可选）</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Node.js 依赖（可选）</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package.json .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install</span></span><br></pre></td></tr></table></figure><ul><li>和终端一样，命令和使用<code>\</code>来换行</li></ul><p><strong><code>devcontainer.json</code></strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Python 2 + Node.js 14&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dockerfile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Dockerfile&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;ms-python.python&quot;</span><span class="punctuation">,</span> <span class="comment">// Python 扩展</span></span><br><span class="line">    <span class="string">&quot;dbaeumer.vscode-eslint&quot;</span><span class="punctuation">,</span> <span class="comment">// ESLint 扩展</span></span><br><span class="line">    <span class="string">&quot;esbenp.prettier-vscode&quot;</span> <span class="comment">// Prettier 扩展</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;forwardPorts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">3000</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 转发端口（Node.js 应用），可指定多个，比如容器里面还有服务端的端口</span></span><br><span class="line">  <span class="attr">&quot;postCreateCommand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm install&quot;</span><span class="punctuation">,</span> <span class="comment">// 容器创建后运行命令</span></span><br><span class="line">  <span class="attr">&quot;workspaceMount&quot;</span><span class="punctuation">:</span> <span class="string">&quot;source=$&#123;localWorkspaceFolder&#125;,target=/workspace,type=bind&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;workspaceFolder&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/workspace&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>在 VSCode 中输入快捷键<code>Ctrl/Cmd + Shift + P</code>，或者点击左下角的蓝色箭头（或者其他主题色），选择<strong>Reopen in container</strong>（在容器中重新打开）</p><p>此过程中会：</p><ul><li><p>创建一个镜像，镜像名称以<code>vsc</code>开头</p></li><li><p>基于镜像运行一个容器</p></li><li><p>运行成功后，vscode 地下的面板中的 PORT（端口） 选项面板就会显示出在<code>forwardPorts</code>中配置的转发端口</p></li></ul><blockquote><p>如果启动失败，并且是由于拉去不到镜像，可以先拉去所需要的镜像，再启动。如<code>docker pull python:2.7-slim</code></p></blockquote><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><p><strong>Ubuntu</strong></p><p>依赖Java运行，需要先安装Java</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install openjdk-17-jdk</span><br></pre></td></tr></table></figure><p>通过压缩包安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dlcdn.apache.org/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.tar.gz</span><br></pre></td></tr></table></figure><p>解压、安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-maven-3.9.6-bin.tar.gz -C /opt/</span><br></pre></td></tr></table></figure><p>配置软连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /opt/apache-maven-3.9.6 /opt/maven</span><br></pre></td></tr></table></figure><p>编辑环境变量，并且添加内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile.d/maven.sh</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/opt/maven</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;MAVEN_HOME&#125;</span>/bin:<span class="variable">$&#123;PATH&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile.d/maven.sh</span><br></pre></td></tr></table></figure><p>验证安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="Docker-1"><a href="#Docker-1" class="headerlink" title="Docker"></a>Docker</h2><p>拉取 -&gt; 创建 -&gt; 运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:8.0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql-8 \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">  -v mysql-data:/var/lib/mysql \</span><br><span class="line">  mysql:8.0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql-8 bash</span><br></pre></td></tr></table></figure><p>进入容器后创建可远程连接的用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h2 id="跨域资源共享（CORS）"><a href="#跨域资源共享（CORS）" class="headerlink" title="跨域资源共享（CORS）"></a>跨域资源共享（CORS）</h2><blockquote><p>跨域资源共享 和 浏览器的同源策略 产生的跨域问题属于两个不同范畴</p></blockquote><p>通过 Nginx 的配置可解决前端的跨域问题，但是跨域资源共享则<strong>需要后端</strong>解决：</p><ul><li>CORS 属于服务端的解决方案</li><li>CORS 允许目标服务器声明哪些外部域名可以访问其资源</li></ul><p>后端在响应头，需要的是添加如<code>Access-Control-Allow-*</code>之类的声明</p><p>默认情况下浏览器会根据同源策略来阻止非同源请求，如果 目标服务器支持 CORS，服务端可以在响应头添加适当的 CORS 头来告诉浏览器允许特定的跨域请求。</p><p>CORS 工作原理：</p><ul><li><p>预检请求（Preflight Request）</p><ul><li>对于某些跨域请求（PUT、DELETE 或带有自定义头的请求），浏览器会先发送一个 OPTIONS 请求（预检请求）来询问服务器是否允许跨域请求。</li></ul></li><li><p>CORS 响应头</p><ul><li>服务端在响应头中加入如 Access-Control-Allo-Origin、Access-Control-Allow-Methods 来允许浏览器跨域访问</li></ul></li><li><p>简单请求</p><ul><li>GET、POST（并且没有特殊头的请求）等简单请求，浏览器不会发送预检请求。如果服务端的响应头中有相关的 CORS 头配置，浏览器会允许这个请求</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;👋 永远都记不住的配置过程&lt;/p&gt;</summary>
    
    
    
    <category term="部署运维" scheme="https://smalljerry.cn/categories/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>nestjs学习日记</title>
    <link href="https://smalljerry.cn/2025/02/15/nestjs/"/>
    <id>https://smalljerry.cn/2025/02/15/nestjs/</id>
    <published>2025-02-15T02:13:54.000Z</published>
    <updated>2025-03-30T09:29:56.274Z</updated>
    
    <content type="html"><![CDATA[<p>🗨️ 问一下DeepSeek今天要学什么</p><span id="more"></span><h1 id="安装与运行"><a href="#安装与运行" class="headerlink" title="安装与运行"></a>安装与运行</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @nestjs/cli</span><br></pre></td></tr></table></figure><p>（typescript）安装<em>express</em>的声明文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @types/express</span><br></pre></td></tr></table></figure><p>运行（生产）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><ul><li>生产模式启动，适用于部署环境、测试生产环境的启动流程（是运行生产环境代码）</li><li>不监听文件变化</li></ul><p>运行（开发）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start:dev</span><br></pre></td></tr></table></figure><ul><li>热更新</li><li>详细的日志输出</li><li>启动慢</li></ul><p>加快构建速度（使用<em>swc</em>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start -- -b swc</span><br></pre></td></tr></table></figure><p>构建生产环境代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><ul><li>将ts代码编译为js代码</li><li>后续部署</li></ul><h1 id="术语表"><a href="#术语表" class="headerlink" title="术语表"></a>术语表</h1><ul><li><p>装饰器（Decorator）：一种函数，使用时需要以<code>@</code>开头放在需要装饰的代码上方，旨在不修改代码的前提下给代码拓展功能</p></li><li><p>JWT</p></li></ul><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><ul><li>为什么说是集成<em>express</em>，因为例如请求、相应对象是相通的</li></ul><h1 id="学习日记"><a href="#学习日记" class="headerlink" title="学习日记"></a>学习日记</h1><h2 id="D1"><a href="#D1" class="headerlink" title="D1"></a>D1</h2><ol><li>创建一个模块</li><li>连接数据库</li><li>添加Swagger文档</li><li>错误处理</li></ol><h3 id="基础模块"><a href="#基础模块" class="headerlink" title="基础模块"></a>基础模块</h3><p>创建一个<code>user</code>模块（生成模块必须文件和可选的<code>.spec.ts</code>的测试文件），可使用<code>nest g --help</code>查看更多命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest g resource user</span><br></pre></td></tr></table></figure><ul><li>一般选择<code>REST API</code></li><li>创建的模块会自动更新<code>app.module.ts</code>文件</li><li>此命令不会创建<code>dto</code>文件（用来规范客户端与服务端之间的数据格式），需手动创建</li><li>文件一般被放在如<code>user/dto/create-user.dto.ts</code>这里</li></ul><p><img src="https://s21.ax1x.com/2025/03/03/pEG7a0e.png" alt="目录结构"></p><p>编辑后的代码示例：</p><p><code>user.controller.ts</code>（控制器）接收请求，具体的业务逻辑由<code>use.service.ts</code>文件提供</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Post</span>, <span class="title class_">Body</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CreateUserDto</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto/create-user.dto&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前接口，如 localhost:3000/user</span></span><br><span class="line"><span class="comment">// 此装饰器是控制器必须的</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">userService</span>: <span class="title class_">UserService</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">getUsers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">getUsers</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里Body装饰器的作用是从 http请求体 中提取数据，并且绑定到方法的参数上</span></span><br><span class="line">  <span class="comment">// 并且可讲数据类型自动转换为 dto 中的类型</span></span><br><span class="line">  <span class="meta">@Post</span>()</span><br><span class="line">  <span class="title function_">createUser</span>(<span class="params"><span class="meta">@Body</span>() <span class="attr">createUserDto</span>: <span class="title class_">CreateUserDto</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">createUser</span>(createUserDto)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>use.service.ts</code>（提供器、服务）处理更为复杂的业务需求</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CreateUserDto</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto/create-user.dto&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此装饰器是服务必须的</span></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> users = [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;小白&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getUsers</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">users</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">createUser</span>(<span class="params"><span class="attr">createUserDto</span>: <span class="title class_">CreateUserDto</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> newUser = &#123; <span class="attr">id</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(), ...createUserDto &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(newUser)</span><br><span class="line">        <span class="keyword">return</span> newUser</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>create-user.dto.ts</code>（Data Transfer Object、数据传输对象）可单独作为一个普通dto来使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CreateUserDto</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以结合<code>class-validator</code>（需要额外安装）来实现更高效的验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install class-validator class-transformer</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">IsString</span>, <span class="title class_">IsEmail</span>, <span class="title class_">MinLength</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;class-validator&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">CreateUserDto</span> &#123;</span><br><span class="line">    <span class="meta">@IsString</span>()</span><br><span class="line">    <span class="meta">@MinLength</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@IsEmail</span>()</span><br><span class="line">    <span class="attr">email</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>使用<code>typeorm</code>连接数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @nestjs/typeorm</span><br></pre></td></tr></table></figure><p>在<code>app.module.ts</code>中全局配置</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TypeOrmModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">UserModule</span>,</span><br><span class="line">    <span class="title class_">AuthModule</span>,</span><br><span class="line">    <span class="comment">// forRoot 用于设置模块的全局配置选项</span></span><br><span class="line">    <span class="title class_">TypeOrmModule</span>.<span class="title function_">forRoot</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">      <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">      <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">      <span class="attr">database</span>: <span class="string">&#x27;nestjs&#x27;</span>,</span><br><span class="line">      <span class="attr">entities</span>: [<span class="title class_">User</span>],</span><br><span class="line">      <span class="attr">synchronize</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>通过<code>entities</code>创建一个用户表，一般在当前模块下创建，如<code>user/entities/user.entity.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Entity</span>, <span class="title class_">Column</span>, <span class="title class_">PrimaryGeneratedColumn</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn</span>()</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  <span class="attr">passwd</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123; <span class="attr">default</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  <span class="attr">isActive</span>: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;timestamp&#x27;</span>, <span class="attr">default</span>: <span class="function">() =&gt;</span> <span class="string">&#x27;CURRENT_TIMESTAMP&#x27;</span> &#125;)</span><br><span class="line">  <span class="attr">createTime</span>: <span class="title class_">Date</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后在<code>user.modules.ts</code>中导入，一旦导入就会自动创建数据表（typeorm配置时，<code>synchronize</code>设为<code>true</code>）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./entities/user.entity&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">TypeOrmModule</span>.<span class="title function_">forFeature</span>([<span class="title class_">User</span>])],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UserController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">UserService</span>],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">UserService</span>],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过接口创建一条数据（控制器 -&gt; 服务），在<code>users.service.ts</code>中通过<code>Repository</code>来执行，它提供了很多操作数据库的方法（find, create等）。有了这个，在绝大多数情况下不需要写SQL</p><blockquote><p>以下代码中，实际起到作用的是<code>InjectRepository</code>，<code>Repository</code>在此只起到类型的作用</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">InjectRepository</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Repository</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;typeorm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CreateUserDto</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./dto/create-user.dto&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./entities/user.entity&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        <span class="meta">@InjectRepository</span>(User)</span></span><br><span class="line"><span class="params">        <span class="keyword">private</span> <span class="attr">userRepository</span>: <span class="title class_">Repository</span>&lt;<span class="title class_">User</span>&gt;,</span></span><br><span class="line"><span class="params">    </span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getUsers</span>(): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>[]&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userRepository</span>.<span class="title function_">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">createUser</span>(<span class="attr">createUserDto</span>: <span class="title class_">CreateUserDto</span>): <span class="title class_">Promise</span>&lt;<span class="title class_">User</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> user = <span class="variable language_">this</span>.<span class="property">userRepository</span>.<span class="title function_">create</span>(createUserDto);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userRepository</span>.<span class="title function_">save</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">findOne</span>(<span class="params"><span class="attr">username</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> user = <span class="variable language_">this</span>.<span class="property">userRepository</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">where</span>: &#123; <span class="attr">name</span>: username &#125; &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(user)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加Swagger文档"><a href="#添加Swagger文档" class="headerlink" title="添加Swagger文档"></a>添加Swagger文档</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @nestjs/swagger</span><br></pre></td></tr></table></figure><p>修改<code>main.ts</code>以配置swagger，访问文档<code>http://localhost:3000/api</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SwaggerModule</span>, <span class="title class_">DocumentBuilder</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/swagger&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> config = <span class="keyword">new</span> <span class="title class_">DocumentBuilder</span>()</span><br><span class="line">    .<span class="title function_">setTitle</span>(<span class="string">&#x27;NestJS学习&#x27;</span>)</span><br><span class="line">    .<span class="title function_">setDescription</span>(<span class="string">&#x27;NestJS学习API文档&#x27;</span>)</span><br><span class="line">    .<span class="title function_">setVersion</span>(<span class="string">&#x27;1.0&#x27;</span>)</span><br><span class="line">    .<span class="title function_">build</span>();</span><br><span class="line">  <span class="keyword">const</span> <span class="variable language_">document</span> = <span class="title class_">SwaggerModule</span>.<span class="title function_">createDocument</span>(app, config);</span><br><span class="line">  <span class="title class_">SwaggerModule</span>.<span class="title function_">setup</span>(<span class="string">&#x27;api&#x27;</span>, app, <span class="variable language_">document</span>);    <span class="comment">// api 指定文档的访问路径</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>main.ts</code>文件中相当于初始化swagger，具体的接口描述可以使用swagger提供的装饰器在具体的接口中使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ApiTags</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/swagger&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiTags</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">userService</span>: <span class="title class_">UserService</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Get</span>()</span><br><span class="line">  <span class="title function_">getUsers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">getUsers</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>创建文件<code>src/filters/http-exception.filter.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ExceptionFilter</span>, <span class="title class_">Catch</span>, <span class="title class_">ArgumentsHost</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Response</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Catch</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">HttpExceptionFilter</span> <span class="keyword">implements</span> <span class="title class_">ExceptionFilter</span> &#123;</span><br><span class="line">  <span class="keyword">catch</span>(<span class="attr">exception</span>: <span class="title class_">Error</span>, <span class="attr">host</span>: <span class="title class_">ArgumentsHost</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = host.<span class="title function_">switchToHttp</span>();</span><br><span class="line">    <span class="keyword">const</span> response = ctx.<span class="property">getResponse</span>&lt;<span class="title class_">Response</span>&gt;();</span><br><span class="line"></span><br><span class="line">    response.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Internal Server Error&#x27;</span>,</span><br><span class="line">      <span class="attr">error</span>: exception.<span class="property">message</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>main.ts</code>以全局注册过滤器</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">useGlobalFilters</span>(<span class="keyword">new</span> <span class="title class_">HttpExceptionFilter</span>());</span><br></pre></td></tr></table></figure><h2 id="D2"><a href="#D2" class="headerlink" title="D2"></a>D2</h2><ol><li>用户认证（JWT）</li><li>中间件实战（日志级联）</li><li>环境配置</li><li>单元测试入门</li><li>部署优化（生产环境配置）</li></ol><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install @nestjs/jwt @nestjs/passport passport passport-jwt bcrypt</span><br><span class="line">npm install @types/passport-jwt @types/bcrypt --save-dev</span><br></pre></td></tr></table></figure><p>创建认证模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest g resource auth</span><br></pre></td></tr></table></figure><p><img src="https://s21.ax1x.com/2025/03/03/pEG70kd.png" alt="成功创建"></p><p>实现用户注册（需要创建和数据库对应的entity），如：</p><p><code>src/user/entities/user.entity.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">string</span> <span class="comment">// 实际保存为哈希值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>auth.service.ts</code>实现登录相关的业务逻辑（获取用户数据，实现成功登录token返回）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">JwtService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/jwt&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> bcrypt <span class="keyword">from</span> <span class="string">&#x27;bcrypt&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../user/user.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthService</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">userService</span>: <span class="title class_">UserService</span>,</span></span><br><span class="line"><span class="params">        <span class="keyword">private</span> <span class="attr">jwtService</span>: <span class="title class_">JwtService</span></span></span><br><span class="line"><span class="params">    </span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">validateUser</span>(<span class="attr">username</span>: <span class="built_in">string</span>, <span class="attr">pass</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">userService</span>.<span class="title function_">findOne</span>(username)</span><br><span class="line">        <span class="keyword">if</span> (user &amp;&amp; (<span class="keyword">await</span> bcrypt.<span class="title function_">compare</span>(pass, user.<span class="property">passwd</span>))) &#123;</span><br><span class="line">            <span class="comment">// 返回除密码外的其他数据（实用的操作）</span></span><br><span class="line">            <span class="keyword">const</span> &#123; passwd, ...result&#125; = user</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params"><span class="attr">user</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> payload = &#123; <span class="attr">username</span>: user.<span class="property">username</span>, <span class="attr">sub</span>: user.<span class="property">id</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">access_token</span>: <span class="variable language_">this</span>.<span class="property">jwtService</span>.<span class="title function_">sign</span>(payload)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改<code>auth.controller.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Body</span>, <span class="title class_">Post</span>, <span class="title class_">UnauthorizedException</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;auth&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">authService</span>: <span class="title class_">AuthService</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// dto也不一定需要写在单独的文件，行内也可以</span></span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;login&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="params"><span class="meta">@Body</span>() <span class="attr">loginDto</span>: &#123; username: <span class="built_in">string</span>; password: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">authService</span>.<span class="title function_">validateUser</span>(loginDto.<span class="property">username</span>, loginDto.<span class="property">password</span>)</span><br><span class="line">    <span class="keyword">if</span> (!user) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnauthorizedException</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">authService</span>.<span class="title function_">login</span>(user)    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>auth.module.ts</code>文件配置JWT模块</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">JwtModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/jwt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">JwtModule</span>.<span class="title function_">register</span>(&#123;</span><br><span class="line">      <span class="attr">secret</span>: <span class="string">&#x27;your_secret_key&#x27;</span>,</span><br><span class="line">      <span class="attr">signOptions</span>: &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;1h&#x27;</span> &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AuthService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>一般也是使用环境变量进行配置：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">JwtModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/jwt&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ConfigModule</span>, <span class="title class_">ConfigService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">JwtModule</span>.<span class="title function_">registerAsync</span>(&#123;</span><br><span class="line">      <span class="attr">imports</span>: [<span class="title class_">ConfigModule</span>],</span><br><span class="line">      <span class="attr">inject</span>: [<span class="title class_">ConfigService</span>],</span><br><span class="line">      <span class="attr">useFactory</span>: <span class="function">(<span class="params"><span class="attr">config</span>: <span class="title class_">ConfigService</span></span>) =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">secret</span>: config.<span class="title function_">get</span>(<span class="string">&quot;JWT_SECRET&quot;</span>),</span><br><span class="line">        <span class="attr">signOptions</span>: &#123; <span class="attr">expiresIn</span>: <span class="string">&#x27;1h&#x27;</span> &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AuthService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AuthModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>中间件一般会保存到如：</p><p><code>src/middleware/logger.middleware.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">NestMiddleware</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Request</span>, <span class="title class_">Response</span>, <span class="title class_">NextFunction</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">LoggerMiddleware</span> <span class="keyword">implements</span> <span class="title class_">NestMiddleware</span> &#123;</span><br><span class="line">  <span class="title function_">use</span>(<span class="params"><span class="attr">req</span>: <span class="title class_">Request</span>, <span class="attr">res</span>: <span class="title class_">Response</span>, <span class="attr">next</span>: <span class="title class_">NextFunction</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString()&#125;</span>] <span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.url&#125;</span>`</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>app.module.ts</code>中全局应用中间件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;  <span class="title class_">NestModule</span>, <span class="title class_">MiddlewareConsumer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LoggerMiddleWare</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./middleware/logger.middleware&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> <span class="keyword">implements</span> <span class="title class_">NestModule</span> &#123;</span><br><span class="line">  <span class="title function_">configure</span>(<span class="params"><span class="attr">consumer</span>: <span class="title class_">MiddlewareConsumer</span></span>) &#123;</span><br><span class="line">    consumer</span><br><span class="line">      .<span class="title function_">apply</span>(<span class="title class_">LoggerMiddleWare</span>)</span><br><span class="line">      .<span class="title function_">forRoutes</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><blockquote><p>通过<code>.env</code>文件来区分不同环境</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @nestjs/config</span><br></pre></td></tr></table></figure><p>修改<code>app.module.ts</code>进行配置</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ConfigModule</span>, <span class="title class_">ConfigService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/config&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TypeOrmModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/typeorm&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user/user.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./auth/auth.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下配置也可以直接使用 process.env.xx 来获取</span></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">UserModule</span>, </span><br><span class="line">    <span class="title class_">AuthModule</span>, </span><br><span class="line">    <span class="title class_">ConfigModule</span>.<span class="title function_">forRoot</span>(&#123;</span><br><span class="line">      <span class="attr">isGlobal</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">envFilePath</span>: <span class="string">`.env.<span class="subst">$&#123;process.env.NODE_ENV || <span class="string">&#x27;development&#x27;</span>&#125;</span>`</span></span><br><span class="line">    &#125;)，</span><br><span class="line">    <span class="title class_">TypeOrmModule</span>.<span class="title function_">forRootAsync</span>(&#123;</span><br><span class="line">      <span class="attr">imports</span>: [<span class="title class_">ConfigModule</span>],</span><br><span class="line">      <span class="attr">inject</span>: [<span class="title class_">ConfigService</span>],</span><br><span class="line">      <span class="attr">useFactory</span>: <span class="function">(<span class="params"><span class="attr">config</span>: <span class="title class_">ConfigService</span></span>) =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">        <span class="attr">host</span>: config.<span class="title function_">get</span>(<span class="string">&#x27;DB_HOST&#x27;</span>),</span><br><span class="line">        <span class="attr">port</span>: <span class="title class_">Number</span>(config.<span class="title function_">get</span>(<span class="string">&#x27;DB_PORT&#x27;</span>)),</span><br><span class="line">        <span class="attr">username</span>: config.<span class="title function_">get</span>(<span class="string">&#x27;DB_USER&#x27;</span>),</span><br><span class="line">        <span class="attr">password</span>: config.<span class="title function_">get</span>(<span class="string">&#x27;DB_PASSWORD&#x27;</span>),</span><br><span class="line">        <span class="attr">database</span>: config.<span class="title function_">get</span>(<span class="string">&#x27;DB_DATABASE&#x27;</span>),</span><br><span class="line">        <span class="attr">entities</span>: [<span class="title class_">User</span>],</span><br><span class="line">        <span class="attr">synchronize</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>多数支持动态配置的都会<code>useFactory</code>有这个方法</li></ul><p>本地创建两个不同的环境变量文件：<code>.env.development</code> 和 <code>.env.production</code>，尽量确保文件名和<code>NODE_ENV</code>的值对应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># .env.development</span><br><span class="line">NODE_ENV=development</span><br><span class="line">DATABASE_URL=sqlite:./dev.db</span><br><span class="line">JWT_SECRET=development_secret</span><br><span class="line"></span><br><span class="line"># .env.production</span><br><span class="line">NODE_ENV=production</span><br><span class="line">DATABASE_URL=mysql://user:password@localhost:3306/prod_db</span><br><span class="line">JWT_SECRET=production_secret</span><br></pre></td></tr></table></figure><p>也可以在运行的时候指定环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;start:dev&quot;: &quot;NODE_ENV=development nest start --watch&quot;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><blockquote><p>单元测试文件在运行<code>nest g resource xx</code>的时候会自动创建，也可手动创建</p></blockquote><p>例如测试<code>UserService</code>，修改<code>user.service.spec.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Test</span>, <span class="title class_">TestingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/testing&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">UserService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./user.service&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;UserService&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">service</span>: <span class="title class_">UserService</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">module</span>: <span class="title class_">TestingModule</span> = <span class="keyword">await</span> <span class="title class_">Test</span>.<span class="title function_">createTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">providers</span>: [<span class="title class_">UserService</span>],</span><br><span class="line">    &#125;).<span class="title function_">compile</span>();</span><br><span class="line"></span><br><span class="line">    service = <span class="variable language_">module</span>.<span class="property">get</span>&lt;<span class="title class_">UserService</span>&gt;(<span class="title class_">UserService</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should be defined&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(service).<span class="title function_">toBeDefined</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;show return users&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">expect</span>(service.<span class="title function_">getUsers</span>()).<span class="title function_">toEqual</span>([</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">passwd</span>: <span class="string">&#x27;123&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;小白&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span>, <span class="attr">passwd</span>: <span class="string">&#x27;123&#x27;</span> &#125;</span><br><span class="line">    ])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run test</span><br></pre></td></tr></table></figure><h3 id="部署优化"><a href="#部署优化" class="headerlink" title="部署优化"></a>部署优化</h3><p>运行<code>npm run start</code>的时候已经是生产环境，除此之外还可以打包之后再部署（可使用<em>swc</em>、<em>pm2</em>等进行打包）</p><p>安装swc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @swc/cli @swc/core</span><br></pre></td></tr></table></figure><p>在项目根目录下创建<code>.swc</code>文件，并且添加打包命令到 npm-script，如<code>&quot;build&quot;: &quot;swc src -d dist&quot;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;jsc&quot;: &#123;</span><br><span class="line">    &quot;parser&quot;: &#123;</span><br><span class="line">      &quot;syntax&quot;: &quot;typescript&quot;,</span><br><span class="line">      &quot;tsx&quot;: false,</span><br><span class="line">      &quot;decorators&quot;: true,</span><br><span class="line">      &quot;dynamicImport&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;target&quot;: &quot;es2020&quot;,</span><br><span class="line">    &quot;keepClassNames&quot;: true,</span><br><span class="line">    &quot;transform&quot;: &#123;</span><br><span class="line">      &quot;legacyDecorator&quot;: true,</span><br><span class="line">      &quot;decoratorMetadata&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;module&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;commonjs&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用docker进行容器部署，在项目根目录创建<code>Dockerfile</code>文件（必须大写开头）</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 Node.js 官方镜像</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 package.json 和 package-lock.json</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package*.json ./</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install --production</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制源代码</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建应用</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动应用</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;node&quot;</span>, <span class="string">&quot;dist/main.js&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>构建镜像和运行容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建 Docker 镜像</span></span><br><span class="line">docker build -t my-nest-app .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行 Docker 容器</span></span><br><span class="line">docker run -p 3000:3000 my-nest-app</span><br></pre></td></tr></table></figure><p>使用nginx进行反向代理（处理跨域的好方法），当访问<code>yourdomain.com/api</code>时代理到本地的<code>3000</code>端口</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> yourdomain.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /api &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:3000;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D3"><a href="#D3" class="headerlink" title="D3"></a>D3</h2><ol><li>权限守卫</li><li>文件上传与静态资源托管</li><li>WebSocket实时通信</li></ol><h3 id="权限守卫"><a href="#权限守卫" class="headerlink" title="权限守卫"></a>权限守卫</h3><p>创建角色装饰器，新建文件<code>src/auth/roles.decorator.ts</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">SetMetadata</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Roles</span> = (<span class="params">...<span class="attr">roles</span>: <span class="built_in">string</span>[]</span>) =&gt; <span class="title class_">SetMetadata</span>(<span class="string">&#x27;roles&#x27;</span>, roles);</span><br></pre></td></tr></table></figure><p>实现守卫，新建文件<code>src/auth/roles.guard.ts</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Injectable</span>, <span class="title class_">CanActivate</span>, <span class="title class_">ExecutionContext</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Reflector</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">RolesGuard</span> <span class="keyword">implements</span> <span class="title class_">CanActivate</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="attr">reflector</span>: <span class="title class_">Reflector</span></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">canActivate</span>(<span class="attr">context</span>: <span class="title class_">ExecutionContext</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="comment">// 获取接口所需的角色</span></span><br><span class="line">    <span class="keyword">const</span> requiredRoles = <span class="variable language_">this</span>.<span class="property">reflector</span>.<span class="property">get</span>&lt;<span class="built_in">string</span>[]&gt;(</span><br><span class="line">      <span class="string">&#x27;roles&#x27;</span>,</span><br><span class="line">      context.<span class="title function_">getHandler</span>(),</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (!requiredRoles) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟从请求中获取用户角色（实际应从 JWT 解析）</span></span><br><span class="line">    <span class="keyword">const</span> request = context.<span class="title function_">switchToHttp</span>().<span class="title function_">getRequest</span>();</span><br><span class="line">    <span class="keyword">const</span> user = request.<span class="property">user</span>; <span class="comment">// 假设 user 已通过 JWT 中间件注入</span></span><br><span class="line">    <span class="keyword">return</span> requiredRoles.<span class="title function_">some</span>(<span class="function">(<span class="params">role</span>) =&gt;</span> user.<span class="property">roles</span>?.<span class="title function_">includes</span>(role));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制器中使用守卫，如:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/users/users.controller.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Roles</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../auth/roles.decorator&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">RolesGuard</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../auth/roles.guard&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line"><span class="meta">@UseGuards</span>(<span class="title class_">RolesGuard</span>) <span class="comment">// 全局应用守卫，或在模块中全局注册</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">  <span class="meta">@Roles</span>(<span class="string">&#x27;admin&#x27;</span>) <span class="comment">// 仅允许 admin 角色访问</span></span><br><span class="line">  <span class="title function_">getAdminData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;Admin data&#x27;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传与静态资源托管"><a href="#文件上传与静态资源托管" class="headerlink" title="文件上传与静态资源托管"></a>文件上传与静态资源托管</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>需要外安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @nestjs/platform-express multer</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @types/multer --save-dev</span><br></pre></td></tr></table></figure><p>创建文件上传控制器：<code>src/files/files.controller.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Post</span>, <span class="title class_">UseInterceptors</span>, <span class="title class_">UploadedFile</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">FileInterceptor</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/platform-express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; diskStorage &#125; <span class="keyword">from</span> <span class="string">&#x27;multer&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; extname &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">&#x27;files&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">FilesController</span> &#123;</span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;upload&#x27;</span>)</span><br><span class="line">  <span class="meta">@UseInterceptors</span>(<span class="title class_">FileInterceptor</span>(<span class="string">&#x27;file&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">storage</span>: <span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">      <span class="attr">destination</span>: <span class="string">&#x27;./uploads&#x27;</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, callback</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> randomName = <span class="title class_">Array</span>(<span class="number">32</span>).<span class="title function_">fill</span>(<span class="literal">null</span>).<span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">16</span>).<span class="title function_">toString</span>(<span class="number">16</span>)).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">`<span class="subst">$&#123;randomName&#125;</span><span class="subst">$&#123;extname(file.originalname)&#125;</span>`</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;))</span><br><span class="line">  <span class="title function_">uploadFile</span>(<span class="params"><span class="meta">@UploadedFile</span>() <span class="attr">file</span>: <span class="title class_">Express</span>.<span class="title class_">Multer</span>.<span class="title class_">File</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`/static/<span class="subst">$&#123;file.filename&#125;</span>`</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>FileInterceptor</code>：文件上传拦截器（第一个参数是文件字段名（<code>formData</code>中的键名）</li></ul><p>托管静态文件，在<code>main.ts</code>中配置</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NestFactory</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; join &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="title function_">create</span>(<span class="title class_">AppModule</span>);</span><br><span class="line">  <span class="comment">// 静态文件托管, 一般会指定到非源码目录</span></span><br><span class="line">  app.<span class="title function_">use</span>(<span class="string">&#x27;/static&#x27;</span>, express.<span class="title function_">static</span>(<span class="title function_">join</span>(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;uploads&#x27;</span>)));</span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br></pre></td></tr></table></figure><h4 id="静态资源托管"><a href="#静态资源托管" class="headerlink" title="静态资源托管"></a>静态资源托管</h4><p>除了上面的方式外，常用的处理方法还有</p><ul><li>使用 nginx 作为静态文件服务器</li><li>使用 CDN 服务（阿里云OOS + CDN、腾讯云COS + CDN）</li><li>nestjs 自带的<code>ServeStaticModule</code>模块</li></ul><p>在 nginx 中配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> yourdomain.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /static/ &#123;</span><br><span class="line">        <span class="attribute">alias</span> /var/www/static/; <span class="comment"># 静态资源目录</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:3000; <span class="comment"># 反向代理到 NestJS 应用</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>ServeStaticModule</code>，预先安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @nestjs/serve-static</span><br></pre></td></tr></table></figure><p>在<code>app.module.ts</code>中配置:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/app.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ServeStaticModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/serve-static&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; join &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">ServeStaticModule</span>.<span class="title function_">forRoot</span>(&#123;</span><br><span class="line">      <span class="attr">rootPath</span>: <span class="string">&#x27;/var/www/static&#x27;</span>, <span class="comment">// 静态资源目录</span></span><br><span class="line">      <span class="attr">serveRoot</span>: <span class="string">&#x27;/static&#x27;</span>, <span class="comment">// 访问路径</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;🗨️ 问一下DeepSeek今天要学什么&lt;/p&gt;</summary>
    
    
    
    <category term="后端学习" scheme="https://smalljerry.cn/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="js" scheme="https://smalljerry.cn/tags/js/"/>
    
    <category term="mysql" scheme="https://smalljerry.cn/tags/mysql/"/>
    
    <category term="ts" scheme="https://smalljerry.cn/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>Vue Props篇</title>
    <link href="https://smalljerry.cn/2023/10/17/Vue-Props%E7%AF%87/"/>
    <id>https://smalljerry.cn/2023/10/17/Vue-Props%E7%AF%87/</id>
    <published>2023-10-17T14:09:45.000Z</published>
    <updated>2025-02-22T02:14:47.345Z</updated>
    
    <content type="html"><![CDATA[<p>🌤️ Vue3</p><span id="more"></span><p>相比于组件内的状态 <code>ref</code> 和 <code>reactive</code>，<code>props</code> 用来在组件之间传值（父组件 -&gt; 子组件）</p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>❗❗ <code>defineProps()</code>宏中的参数<strong>不可访问</strong><code>&lt;script setup&gt;</code>中定义的其他变量，因为在编译时整个表达式都会被移到外部的函数中。</p><h2 id="普通"><a href="#普通" class="headerlink" title="普通"></a>普通</h2><p>🎇 在单文件组件的<code>&lt;script setup&gt;</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 单纯的声明</span><br><span class="line">const props = defineProps([&quot;foo&quot;]);</span><br><span class="line">console.log(props.foo);</span><br><span class="line"></span><br><span class="line">// 声明时指定对应类型的 构造函数</span><br><span class="line">const props2 = defineProps(&#123;</span><br><span class="line">  title: &#123; type: String, required: true &#125;,</span><br><span class="line">  likes: Number,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">props2.title; // string</span><br><span class="line">props2.likes; // number | undefined</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>如果只在模板（<code>&lt;template&gt;</code>）中使用，可不用声明变量<code>props</code>，可直接在模板中使用<code>foo</code></li></ul><blockquote><p>大写<code>String</code>和小写<code>string</code>不是同一个东西；大写是 JavaScript 中的<strong>构造函数</strong>，小写用在 TypeScript，是字符串类型</p></blockquote><hr><p>🎇 如果没有使用<code>&lt;script setup&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;foo&quot;</span>],</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="comment">// setup() 接收 props 作为第一个参数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">foo</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>🎇 或者在<code>JSX</code>语法中</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123; <span class="attr">msg</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125; &#125;,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"><span class="attr">props</span>: &#123; msg: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&#123;</span>&quot;<span class="attr">error-tips</span>&quot;&#125;&gt;</span>&#123;props.msg&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="TS-中"><a href="#TS-中" class="headerlink" title="TS 中"></a>TS 中</h2><p>🪄 上面使用构造函数声明 props 的叫做<em>运行时声明</em>，接下来用作泛型传递给<code>&lt;&gt;</code>的方式叫做<em>基于类型的声明</em></p><ul><li>两种方式不能同时使用</li></ul><hr><p>就像创建接口对象一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">defineProps&lt;&#123;</span><br><span class="line">  title: string;</span><br><span class="line">  likes?: number;</span><br><span class="line">&#125;&gt;();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可以直接提取成<code>interface</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">likes</span>?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">definedProps&lt;<span class="title class_">Props</span>&gt;();</span><br></pre></td></tr></table></figure><blockquote><p>🎇 多行书写时<code>;</code>可省略。由于限制，当前条件类型仅可指定单个属性，不能指定整个 props 对象</p></blockquote><h1 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h1><p>普通模式中，检验不是必须的，不进行校验的话直接传递<em>字符串数组</em>就行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">defineProps</span>([<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;isShow&quot;</span>]);</span><br></pre></td></tr></table></figure><h2 id="普通-1"><a href="#普通-1" class="headerlink" title="普通"></a>普通</h2><ul><li><code>type</code>指定<code>props</code>类型</li><li><code>required</code>为<code>true</code>指定为必传 props，<code>false</code>代表默认可选</li><li><code>default</code>指定默认值</li></ul><p>使用<code>type</code>指定类型，这些类型时原生 JavaScript 的构造函数：</p><table><thead><tr><th>🌸</th><th>🌺</th><th>🏵️</th><th>🪷</th></tr></thead><tbody><tr><td>String</td><td>Number</td><td>Boolean</td><td>Array</td></tr><tr><td>Object</td><td>Date</td><td>Function</td><td>Symbol</td></tr></tbody></table><p>``</p><p>除此之外，可以通过自定义类或者构造函数来用作 props 的类型，Vue 会通过<code>instanceof</code>来检查：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">firstName, lastName</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstName</span> = firstName;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lastName</span> = lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">author</span>: <span class="title class_">Person</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Vue 校验的时候会使用到<code>instanceof Person</code></li></ul><hr><p>校验选项参考：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="comment">// 基础类型检查</span></span><br><span class="line">  <span class="comment">// （给出 `null` 和 `undefined` 值则会跳过任何类型检查）</span></span><br><span class="line">  <span class="attr">propA</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="comment">// 多种可能的类型</span></span><br><span class="line">  <span class="attr">propB</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>],</span><br><span class="line">  <span class="comment">// 必传，且为 String 类型</span></span><br><span class="line">  <span class="attr">propC</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Number 类型的默认值</span></span><br><span class="line">  <span class="attr">propD</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="number">100</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 对象类型的默认值</span></span><br><span class="line">  <span class="attr">propE</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">    <span class="comment">// 对象或数组的默认值</span></span><br><span class="line">    <span class="comment">// 必须从一个工厂函数返回。</span></span><br><span class="line">    <span class="comment">// 该函数接收组件所接收到的原始 prop 作为参数。</span></span><br><span class="line">    <span class="title function_">default</span>(<span class="params">rawProps</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&quot;hello&quot;</span> &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义类型校验函数</span></span><br><span class="line">  <span class="attr">propF</span>: &#123;</span><br><span class="line">    <span class="title function_">validator</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="comment">// The value must match one of these strings</span></span><br><span class="line">      <span class="keyword">return</span> [<span class="string">&quot;success&quot;</span>, <span class="string">&quot;warning&quot;</span>, <span class="string">&quot;danger&quot;</span>].<span class="title function_">includes</span>(value);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 函数类型的默认值</span></span><br><span class="line">  <span class="attr">propG</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Function</span>,</span><br><span class="line">    <span class="comment">// 不像对象或数组的默认，这不是一个</span></span><br><span class="line">    <span class="comment">// 工厂函数。这会是一个用来作为默认值的函数</span></span><br><span class="line">    <span class="title function_">default</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;Default function&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="TS"><a href="#TS" class="headerlink" title="TS"></a>TS</h2><p>使用到了 TypeScript 就说明是在校验了：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">defineProps&lt;&#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="built_in">string</span>; <span class="comment">// 字符串类型</span></span><br><span class="line">  <span class="attr">bar</span>?: <span class="built_in">number</span>; <span class="comment">// 可选</span></span><br><span class="line">&#125;&gt;();</span><br></pre></td></tr></table></figure><p>默认值：需要使用<code>withDefaults</code>编译宏</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">msg</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">labels</span>?: <span class="built_in">string</span>[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">withDefaults</span>(defineProps&lt;<span class="title class_">Props</span>&gt;(), &#123;</span><br><span class="line">  <span class="attr">msg</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">  <span class="attr">labels</span>: <span class="function">() =&gt;</span> [<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="在非-lt-script-setup-gt-的情况下"><a href="#在非-lt-script-setup-gt-的情况下" class="headerlink" title="在非&lt;script setup&gt;的情况下"></a>在非<code>&lt;script setup&gt;</code>的情况下</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="title class_">String</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// setup的props参数会从上面推断，所以这里可以不用指定类型</span></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    props.<span class="property">message</span>; <span class="comment">// &lt;-- 类型：string</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="复杂的-props-类型"><a href="#复杂的-props-类型" class="headerlink" title="复杂的 props 类型"></a>复杂的 props 类型</h3><p>🤔 刚接触的时候还挺容易混淆</p><p>简单的情况：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">interface Book &#123;</span><br><span class="line">  title: string;</span><br><span class="line">  author: string;</span><br><span class="line">  year: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const props = defineProps&lt;Book&gt;();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>props 将会有 title,author,year</li></ul><p>复杂的情况，实则是<strong>再嵌套</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">interface Book &#123;</span><br><span class="line">  title: string;</span><br><span class="line">  author: string;</span><br><span class="line">  year: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">  book: Book;</span><br><span class="line">&#125;&gt;();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>现在是 props 只有 book 一个，然后 book 下面才有这三个属性</li></ul><h2 id="即普通又-TS"><a href="#即普通又-TS" class="headerlink" title="即普通又 TS"></a>即普通又 TS</h2><p>想用一定的 TypeScript 类型检查，但是又不想传递范式（<code>&lt;T&gt;</code>），会这样使用。通常在在<em>Options API</em>中出现</p><p>需要导入<strong>工具类型</strong><code>PropType</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">PropType</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">book</span>: <span class="title class_">Object</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">Book</span>&gt;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>🎇 在<code>&lt;script&gt;</code>中使用的时候推荐 camelCase 的命名方式；在模板中使用的时候推荐 kebab-case 的形式</p><p>传递 props（父组件向子组件传值）：</p><ul><li>动态绑定值需要在属性前加上<code>v-bind</code>或者简写<code>:</code></li><li>不加上的都认作是传递字符串</li></ul><p>父组件：<code>&lt;Page&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 如果 likes 在这直接传递数字，并且想得到number类型 --&gt;</span><br><span class="line">    &lt;!-- 可以动态绑定 v-bind=&quot;100&quot; --&gt;</span><br><span class="line">    &lt;MyTitle title=&quot;静夜思&quot; :likes=&quot;likes&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const likes = ref(100);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件：<code>&lt;MyTitle&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; likes &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">defineProps&lt;&#123;</span><br><span class="line">  title: string;</span><br><span class="line">  likes?: number;</span><br><span class="line">&#125;&gt;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h1><p>所有的 props 都遵循<strong>单向绑定</strong>原则</p><ul><li>因父组件变化而变化，更新随之传向子组件，所以子组件中的 props 是最新的</li><li>子组件中不要修改 props。要想获得衍生值<ul><li>可以使用计算属性</li><li>可以创建新的变量接收</li></ul></li></ul><p>当 props 是一个对象或者数组时，可以改变内部的值，但是<strong>不推荐</strong></p><h1 id="Boolean-类型转换"><a href="#Boolean-类型转换" class="headerlink" title="Boolean 类型转换"></a>Boolean 类型转换</h1><p>方便在模板中使用时更加简洁，避免类似<code>:disabled=&#39;true&#39;</code>的出现，使用简单的<code>disabled</code>表示即可</p><p>在<code>&lt;MyComponent&gt;</code>中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">definedProps</span>(&#123;</span><br><span class="line">  <span class="attr">disabled</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用时：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 等同于传入 :disabled=&quot;true&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">disabled</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 等同于传入 :disabled=&quot;false&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>当 props 有多种类型的时候，这种转换依然适用。不过与<code>String</code>搭配时有例外。在排列时<code>Boolean</code>需要排在<code>String</code>的前面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// disabled 将被转换为 true</span></span><br><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">disabled</span>: [<span class="title class_">Boolean</span>, <span class="title class_">Number</span>],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// disabled 将被转换为 true</span></span><br><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">disabled</span>: [<span class="title class_">Boolean</span>, <span class="title class_">String</span>],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// disabled 将被转换为 true</span></span><br><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">disabled</span>: [<span class="title class_">Number</span>, <span class="title class_">Boolean</span>],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// disabled 将被解析为空字符串 (disabled=&quot;&quot;)</span></span><br><span class="line"><span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">disabled</span>: [<span class="title class_">String</span>, <span class="title class_">Boolean</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>使用<code>generic</code>属性，属性值和和在 TypeScript 中的<code>&lt;T&gt;</code>一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot; generic=&quot;T&quot;&gt;</span><br><span class="line">defineProps&lt;&#123;</span><br><span class="line">  items: T[];</span><br><span class="line">  selected: T;</span><br><span class="line">&#125;&gt;();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>同时也可以使用<code>extends</code>进行泛型约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot; generic=&quot;T extends string | number, U extends Item&quot;&gt;</span><br><span class="line">import type &#123; Item &#125; from &quot;./types&quot;;</span><br><span class="line">defineProps&lt;&#123;</span><br><span class="line">  id: T;</span><br><span class="line">  list: U[];</span><br><span class="line">&#125;&gt;();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="provide-和-inject"><a href="#provide-和-inject" class="headerlink" title="provide 和 inject"></a>provide 和 inject</h1><p>不局限于相邻的父子组件传值，可以更深层次传递（React 中的<em>context</em>）</p><h2 id="provide-提供数据"><a href="#provide-提供数据" class="headerlink" title="provide()提供数据"></a><code>provide()</code>提供数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, provide &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const msg = ref(&quot;hello&quot;);</span><br><span class="line">const setMsg = () =&gt; &#123;</span><br><span class="line">  msg.value = &quot;hi&quot;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">provide(/* 注入名 */ &quot;message&quot;, /* 值 */ &#123; msg, setMsg &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>一个组件可以多次调用，传递不同的注入名</li><li>如果传入的是一个普通变量，还可以使用<code>readonly()</code>将它包住</li></ul><p>应用层 provide，全局提供数据。（在编写插件的时候会用到）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">provide</span>(<span class="comment">/* 注入名 */</span> <span class="string">&quot;message&quot;</span>, <span class="comment">/* 值 */</span> <span class="string">&quot;hello!&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="inject-获取数据"><a href="#inject-获取数据" class="headerlink" title="inject()获取数据"></a><code>inject()</code>获取数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; inject &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const &#123; msg, setMsg &#125; = inject(&quot;message&quot;, &quot;这是默认值&quot;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如果上游组件并没有提供<code>message</code>这样一个数据，给<code>inject</code>传递的第二个参数将会是作为当前返回的默认值</p><p>默写情况下为避免产生副作用，默认值可以是一个工厂函数，这时候第三个参数需要设置为<code>true</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = <span class="title function_">inject</span>(<span class="string">&quot;key&quot;</span>, <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">ExpensiveClass</span>(), <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><blockquote><p>目前 TypeScript 标注好像作用不大</p></blockquote><h1 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h1><ol><li>多个组件共享状态；</li></ol><ul><li>可通过 <code>props</code> 来解决，但是组件嵌套深了后容易混乱</li><li>可通过<code>provide</code>和<code>inject</code></li></ul><ol start="2"><li>不同的视图交互可修改同一状态</li></ol><ul><li>通过模板获取对应组件实例，然后触发组件内对应的事件</li></ul><p>状态管理中最直接的方法，就是将对应的共享状态抽离出来</p><h2 id="响应式-API-做状态管理"><a href="#响应式-API-做状态管理" class="headerlink" title="响应式 API 做状态管理"></a>响应式 API 做状态管理</h2><p>将共享的状态单独抽离出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ComponentA.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; store &#125; from &quot;./store.js&quot;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;From A: &#123;&#123; store.count &#125;&#125;&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- ComponentB.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; store &#125; from &quot;./store.js&quot;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;From B: &#123;&#123; store.count &#125;&#125;&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>每当<code>store</code>被改动时，这两个组件都会自动更新自己的视图</p><p>不局限于<code>reactive</code>其他的响应式 API 同样适用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局状态，创建在模块作用域下</span></span><br><span class="line"><span class="keyword">const</span> globalCount = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 局部状态，每个组件都会创建</span></span><br><span class="line">  <span class="keyword">const</span> localCount = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    globalCount,</span><br><span class="line">    localCount,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>使用 <code>Pinia</code></li><li>SSR ???</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;🌤️ Vue3&lt;/p&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://smalljerry.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="vue" scheme="https://smalljerry.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue响应式篇</title>
    <link href="https://smalljerry.cn/2023/10/01/Vue%E7%8A%B6%E6%80%81%E7%AF%87/"/>
    <id>https://smalljerry.cn/2023/10/01/Vue%E7%8A%B6%E6%80%81%E7%AF%87/</id>
    <published>2023-10-01T10:15:16.000Z</published>
    <updated>2025-02-22T02:14:47.345Z</updated>
    
    <content type="html"><![CDATA[<p>🌤️ Vue3</p><span id="more"></span><h1 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h1><p><code>ref()</code>和<code>reactive()</code>都是用来声明响应式的变量（代码改变页面也会跟着改变），两者不同在于：</p><ul><li>前者用于基本原始值：string、number、boolean、null、undefined、symbol（下面的也能用）</li><li>后者用于：对象、数组、set、map</li></ul><p>在<code>&lt;script setup&gt;</code>使用时，通过<code>ref()</code>声明的变量取值的时候需要使用<code>.value</code></p><ul><li>如果在<code>reactive()</code>里面传进一个<code>ref()</code>，不需要使用，会自动解包</li><li>但是<code>reactive()</code>里面是数组或者 map 的时候，又需要手动<code>.value</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> age = <span class="title function_">ref</span>(<span class="number">18</span>);</span><br><span class="line"><span class="keyword">const</span> xm = <span class="title function_">reactive</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;xm&quot;</span>, <span class="attr">gender</span>: <span class="string">&quot;male&quot;</span>, age &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age.<span class="property">value</span>); <span class="comment">// 18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xm.<span class="property">name</span>); <span class="comment">// &#x27;xm&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xm.<span class="property">age</span>); <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> books = <span class="title function_">reactive</span>([<span class="title function_">ref</span>(<span class="string">&quot;Vue 3 Guide&quot;</span>)]);</span><br><span class="line"><span class="keyword">const</span> map = <span class="title function_">reactive</span>(<span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&quot;count&quot;</span>, <span class="title function_">ref</span>(<span class="number">0</span>)]]));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(books[<span class="number">0</span>].<span class="property">value</span>); <span class="comment">// &#x27;Vue 3 Guide&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;count&quot;</span>).<span class="property">value</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><code>reactive()</code>声明的对象重新赋值，会丢失响应性；在解构的时候，也会丢失响应性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的 (&#123; count: 0 &#125;) 引用将不再被追踪</span></span><br><span class="line">state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; count &#125; = state;</span><br><span class="line"><span class="comment">// 不会影响原始的 state</span></span><br><span class="line">count++;</span><br></pre></td></tr></table></figure><h2 id="模板中使用"><a href="#模板中使用" class="headerlink" title="模板中使用"></a>模板中使用</h2><p>自动解包条件：</p><ul><li>顶级的<code>ref()</code>会自动解包</li><li>不是顶级，但是只是取值（无其他 js 操作），也可自动解包</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> object = &#123; <span class="attr">id</span>: <span class="title function_">ref</span>(<span class="number">1</span>) &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 正常运作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; count++ &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 失败，得到 [object Object]1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; object.id + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 正常运作，相当于在后面加上.value--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; object.id &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="类型标注"><a href="#类型标注" class="headerlink" title="类型标注"></a>类型标注</h2><p>一般指定<code>&lt;script setup lang=&#39;ts&#39;&gt;</code>为 <em>TypeScript</em> 时有自动的类型推断，不需要手动指定</p><p>🤔 指定<code>ref</code>的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Ref</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">year</span>: <span class="title class_">Ref</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt; = <span class="title function_">ref</span>(<span class="string">&quot;2020&quot;</span>);</span><br><span class="line"><span class="comment">// 或者是</span></span><br><span class="line"><span class="keyword">const</span> year = ref&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;(<span class="string">&quot;2020&quot;</span>);</span><br><span class="line"></span><br><span class="line">year.<span class="property">value</span> = <span class="number">2020</span>;</span><br></pre></td></tr></table></figure><p>🤔 指定<code>reactive</code>的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">year</span>?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">book</span>: <span class="title class_">Book</span> = <span class="title function_">reactive</span>(&#123; <span class="attr">title</span>: <span class="string">&quot;Vue 3 指引&quot;</span> &#125;);</span><br></pre></td></tr></table></figure><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>使用带<code>.value</code>的 ref 而不是普通的变量</p><ul><li>渲染的时候<strong>追踪</strong>渲染过程中<strong>用到的</strong>每一个 ref</li><li>ref 变化时，触发组件内的重新渲染函数</li><li>普通变量无法达到这个目的</li></ul><p>类似于这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码，不是真正的实现</span></span><br><span class="line"><span class="keyword">const</span> myRef = &#123;</span><br><span class="line">  <span class="attr">_value</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="title function_">track</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = newValue;</span><br><span class="line">    <span class="title function_">trigger</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>不是每一次的 ref 变动都触发页面重新渲染。Vue 会在“next tick”更新周期中缓冲所有状态的修改，不管进行了多少次状态修改，每个组件都只会被更新一次。</p></blockquote><p>要等待 DOM 更新完成再执行，需要使用<code>nextTick()</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref, nextTick &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span>++;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// DOM 还未更新</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;counter&quot;</span>).<span class="property">textContent</span>); <span class="comment">// 0</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可以 await，也可以传一个回调函数进去</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">await</span> <span class="title function_">nextTick</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// DOM 此时已经更新</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;counter&quot;</span>).<span class="property">textContent</span>); <span class="comment">// 1</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;counter&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><p><code>computed(()=&gt;&#123;&#125;)</code>，必须要有返回值；不能接收参数</p><ul><li>和<code>ref()</code>一样，在 JS 中使用时需要<code>.value</code></li></ul><p>通过现有的变量来进一步计算获得新的值（临时值）；或者将条件判断写到计算属性中，简化模板中<code>&#123;&#123;&#125;&#125;</code>里面的内容</p><ul><li>因为是在现有基础上得来的（派升值），所以直接修改它没什么一样，所以一般认为这是只读的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; reactive, computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> author = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">books</span>: [</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;Vue 2 - Advanced Guide&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;Vue 3 - Basic Guide&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;Vue 4 - The Mystery&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    ],</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 一个计算属性 ref</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> publishedBooksMessage = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> author.<span class="property">books</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Has published books:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; publishedBooksMessage &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>会自动跟踪响应式依赖。它会检测到 publishedBooksMessage 依赖于 author.books，所以当 author.books 改变时，任何依赖于 publishedBooksMessage 的绑定都会同时更新。</p></blockquote><p><strong>TS 类型标注</strong></p><p>一般情况下会自动推断，手动指定：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> double = computed&lt;<span class="built_in">number</span>&gt;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 若返回值不是 number 类型则会报错</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>与方法的区别</strong></p><p>计算属性会缓存，渲染时如果所依赖的变量没有改变，计算属性不会执行（不执行 getter 函数）。相比之下，方法在每次渲染的时候都会执行。</p><p><strong>计算属性是基于响应式依赖被缓存</strong>，下面<code>Date.now()</code>不是响应式的，所以不会被缓存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> now = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br></pre></td></tr></table></figure><h2 id="可写计算属性"><a href="#可写计算属性" class="headerlink" title="可写计算属性"></a>可写计算属性</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstName = <span class="title function_">ref</span>(<span class="string">&#x27;John&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> lastName = <span class="title function_">ref</span>(<span class="string">&#x27;Doe&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fullName = <span class="title function_">computed</span>(&#123;</span><br><span class="line">  <span class="comment">// getter</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName.<span class="property">value</span> + <span class="string">&#x27; &#x27;</span> + lastName.<span class="property">value</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// setter</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">    <span class="comment">// 注意：我们这里使用的是解构赋值语法</span></span><br><span class="line">    [firstName.<span class="property">value</span>, lastName.<span class="property">value</span>] = newValue.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>getter 不应该有副作用（变更现有值，触发 DOM 重新渲染）</p></blockquote><h1 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h1><p><code>watch(ref, (newVal, oldVal)=&gt;&#123;&#125;)</code></p><ul><li>返回一个函数，再次调用可停止当前监听</li></ul><p>相比于 _计算属性_，监听器做的是监听到值变化的时候做一些副作用（DOM 页面更新）。<a href="https://cn.vuejs.org/api/reactivity-core.html#watch">watch api</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> y = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个 ref</span></span><br><span class="line"><span class="title function_">watch</span>(x, <span class="function">(<span class="params">newX</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`x is <span class="subst">$&#123;newX&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter 函数</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> x.<span class="property">value</span> + y.<span class="property">value</span>,</span><br><span class="line">  <span class="function">(<span class="params">sum</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`sum of x + y is: <span class="subst">$&#123;sum&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个来源组成的数组</span></span><br><span class="line"><span class="title function_">watch</span>([x, <span class="function">() =&gt;</span> y.<span class="property">value</span>], <span class="function">(<span class="params">[newX, newY]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`x is <span class="subst">$&#123;newX&#125;</span> and y is <span class="subst">$&#123;newY&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>监听<code>reactive</code>对象的时候，不能直接监听它的属性，而是需要一个 getter 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误，因为 watch() 得到的参数是一个 number</span></span><br><span class="line"><span class="title function_">watch</span>(obj.<span class="property">count</span>, <span class="function">(<span class="params">count</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count is: <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供一个 getter 函数</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> obj.<span class="property">count</span>,</span><br><span class="line">  <span class="function">(<span class="params">count</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count is: <span class="subst">$&#123;count&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="深度监听"><a href="#深度监听" class="headerlink" title="深度监听"></a>深度监听</h2><p>监听响应式对象的时候，会<strong>隐式地</strong>进行深度监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(obj, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在嵌套的属性变更时触发</span></span><br><span class="line">  <span class="comment">// 注意：`newValue` 此处和 `oldValue` 是相等的</span></span><br><span class="line">  <span class="comment">// 因为它们是同一个对象！</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.<span class="property">count</span>++;</span><br></pre></td></tr></table></figure><p>如果只需要监听对象的改变，需要监听一个 getter 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> state.<span class="property">someObject</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 仅当 state.someObject 被替换时触发</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在使用 getter 函数的基础上，也可以进行强制深度监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> state.<span class="property">someObject</span>,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 注意：`newValue` 此处和 `oldValue` 是相等的</span></span><br><span class="line">    <span class="comment">// *除非* state.someObject 被整个替换了</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="回调触发时机"><a href="#回调触发时机" class="headerlink" title="回调触发时机"></a>回调触发时机</h2><p>指定<code>flush</code>的值，有：<code>&#39;pre&#39; | &#39;post&#39; | &#39;sync&#39;</code></p><p><strong>默认情况</strong>（pre）中，是在 DOM 更新前触发的，所以在回调里面获得的 DOM 是旧的</p><p><strong>DOM 更新后触发</strong>（post）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; watchEffect, watchPostEffect &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(source, callback, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">watchEffect</span>(callback, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">watchPostEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* 在 Vue 更新后执行. 对应的是 flush: &#x27;post&#x27; */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>watchSyncEffect()</code>为同步触发，对应的<code>watchEffect</code>为<code>flush: &#39;sync&#39;</code></li></ul><p><strong>立即触发</strong></p><p><code>watch</code>默认是懒执行的：仅当数据源变化时，才会执行回调。</p><p>如果需要在创建的时候立即执行一次：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  source,</span><br><span class="line">  <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 立即执行，且当 `source` 改变时再次执行</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h2><p>和<code>wacth</code>的区别是不用指定要监听的目标，它会自动跟踪（跟踪取值的那个变量）</p><ul><li>不需要指定<code>immediate: true</code>也会立即执行</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todoId = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> data = <span class="title function_">ref</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  todoId,</span><br><span class="line">  <span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">      <span class="string">`https://jsonplaceholder.typicode.com/todos/<span class="subst">$&#123;todoId.value&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">    data.<span class="property">value</span> = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>使用<code>watchEffect</code>简化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watchEffect</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(</span><br><span class="line">    <span class="string">`https://jsonplaceholder.typicode.com/todos/<span class="subst">$&#123;todoId.value&#125;</span>`</span></span><br><span class="line">  );</span><br><span class="line">  data.<span class="property">value</span> = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>对于需要监听多个依赖的时候非常有用</li></ul><h2 id="停止监听器"><a href="#停止监听器" class="headerlink" title="停止监听器"></a>停止监听器</h2><p>在<code>setup</code>中<strong>同步语句</strong>创建的监听器，会随着组件卸载而自动停止。如果是在<strong>异步语句</strong>中创建，需要手动停止</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; watchEffect &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 它会自动停止</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// ...这个则不会！</span></span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;, <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>调用监听器执行后的返回值停止监听器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unwatch = <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...当该侦听器不再需要时</span></span><br><span class="line"><span class="title function_">unwatch</span>();</span><br></pre></td></tr></table></figure><blockquote><p>一般都是同步创建监听器的 😃</p></blockquote><h1 id="其他-API"><a href="#其他-API" class="headerlink" title="其他 API"></a>其他 API</h1><p><code>isRef()</code></p><p>判断变量是不是<em>ref</em></p><p><code>shallowRef()</code></p><p>ref 的浅层形式，只对第一个<code>.</code>保持响应式。改变深层次的<code>.</code>，页面不会更新；在处理大型数据结构的时候对性能有帮助</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">shallowRef</span>(&#123; <span class="attr">count</span>: <span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不会触发更改</span></span><br><span class="line">state.<span class="property">value</span>.<span class="property">count</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会触发更改</span></span><br><span class="line">state.<span class="property">value</span> = &#123; <span class="attr">count</span>: <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure><p><code>triggerRef()</code></p><p>强制触发一个<code>shalloRef()</code>。就是强制地将传进去的浅层 ref 变为深层次也有响应式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shallow = <span class="title function_">shallowRef</span>(&#123;</span><br><span class="line">  <span class="attr">greet</span>: <span class="string">&quot;Hello, world&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发该副作用第一次应该会打印 &quot;Hello, world&quot;</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(shallow.<span class="property">value</span>.<span class="property">greet</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这次变更不应触发副作用，因为这个 ref 是浅层的</span></span><br><span class="line"><span class="comment">// 如果关联页面，页面不会渲染</span></span><br><span class="line">shallow.<span class="property">value</span>.<span class="property">greet</span> = <span class="string">&quot;Hello, universe&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 &quot;Hello, universe&quot;（watchEffect监听到了变动）</span></span><br><span class="line"><span class="title function_">triggerRef</span>(shallow);</span><br></pre></td></tr></table></figure><p><code>customRef()</code></p><p>有 <em>Proxy</em> 的意思，在设置值取值之间进行自定义操作</p><ul><li>接收一个回调，有两个参数<ul><li><code>track()</code>函数和<code>trigger()</code>函数</li></ul></li><li>返回一个对象<ul><li>包含<code>get()</code>方法和<code>set()</code>方法</li></ul></li><li>一般 track 在 get 里面调用；trigger 在 set 里面调用</li></ul><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; customRef &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useDebouncedRef</span>(<span class="params">value, delay = <span class="number">200</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">customRef</span>(<span class="function">(<span class="params">track, trigger</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">track</span>();</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          value = newValue;</span><br><span class="line">          <span class="title function_">trigger</span>();</span><br><span class="line">        &#125;, delay);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useDebouncedRef &#125; from &quot;./debouncedRef&quot;;</span><br><span class="line">const text = useDebouncedRef(&quot;hello&quot;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input v-model=&quot;text&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><hr><p><code>shallowReactive()</code></p><p>如果里面传的是<code>ref()</code>，不会自动解包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">shallowReactive</span>(&#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">nested</span>: &#123;</span><br><span class="line">    <span class="attr">bar</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改状态自身的属性是响应式的</span></span><br><span class="line">state.<span class="property">foo</span>++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...但下层嵌套对象不会被转为响应式</span></span><br><span class="line"><span class="title function_">isReactive</span>(state.<span class="property">nested</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不是响应式的</span></span><br><span class="line">state.<span class="property">nested</span>.<span class="property">bar</span>++;</span><br></pre></td></tr></table></figure><p><code>readonly()</code></p><p>接受一个对象 (不论是响应式还是普通的)，返回一个只读对象代理</p><p><code>shallowReadonly()</code></p><p>只是第一个<code>.</code>只读</p><p><code>toRaw()</code></p><p>返回由 <code>reactive()</code>、<code>readonly()</code>、<code>shallowReactive()</code> 或者 <code>shallowReadonly()</code> 创建的代理对应的原始对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> reactiveFoo = <span class="title function_">reactive</span>(foo);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">toRaw</span>(reactiveFoo) === foo); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>markRaw()</code></p><p>将对象标记为不可代理（不能设置为响应式）。返回对象本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="title function_">markRaw</span>(&#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(<span class="title function_">reactive</span>(foo))); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也适用于嵌套在其他响应性对象</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="title function_">reactive</span>(&#123; foo &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(bar.<span class="property">foo</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>effectScope()</code></p><p>创建一个 effect 作用域，捕获创建的副作用（计算属性和监听器），然后同时处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scope = <span class="title function_">effectScope</span>();</span><br><span class="line"></span><br><span class="line">scope.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> doubled = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> counter.<span class="property">value</span> * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">watch</span>(doubled, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(doubled.<span class="property">value</span>));</span><br><span class="line"></span><br><span class="line">  <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Count: &quot;</span>, doubled.<span class="property">value</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理掉当前作用域内的所有 effect</span></span><br><span class="line">scope.<span class="title function_">stop</span>();</span><br></pre></td></tr></table></figure><p><code>getCurrentScope()</code></p><p>如果有的话，返回当前活跃的 effect 作用域。</p><p><code>onScopeDispose()</code></p><p>接收一个回调，当 effect 作用域停止的时候会执行这个回调。<code>onUnmounted</code>的替代品</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;🌤️ Vue3&lt;/p&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://smalljerry.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="vue" scheme="https://smalljerry.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Pinia快速手册</title>
    <link href="https://smalljerry.cn/2023/09/24/Pinia%E5%BF%AB%E9%80%9F%E6%89%8B%E5%86%8C/"/>
    <id>https://smalljerry.cn/2023/09/24/Pinia%E5%BF%AB%E9%80%9F%E6%89%8B%E5%86%8C/</id>
    <published>2023-09-24T11:44:45.000Z</published>
    <updated>2025-02-22T02:14:47.343Z</updated>
    
    <content type="html"><![CDATA[<p>🌏 Vue 状态管理</p><span id="more"></span><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><code>Store</code>：不与组件树绑定，承载着全局状态（数据）。在<code>Vue</code>中有<code>vuex</code>，<code>pinia</code>；在<code>React</code>中，有<code>redux</code>、<code>unstate-next</code></p><p>🤔 并非所有应用都需要全局状态</p><p>🏞️ Store 的使用场景：在整个应用中可访问到的数据。例如：</p><ul><li>导航栏的用户信息</li><li>复杂的多步骤表单</li></ul><blockquote><p>避免将本可以保存至组件中的数据保存到 Store，例如一个元素在页面的可见性</p></blockquote><p>对于<code>pinia</code>，有<strong>state</strong>、<strong>getter</strong>、<strong>action</strong>三个概念</p><p>可理解为对应组件的</p><ul><li><code>data</code> -&gt; <code>state</code></li><li><code>computed</code> -&gt; <code>getter</code></li><li><code>methods</code> -&gt; <code>action</code></li></ul><p>在 setup 中的对应关系是</p><ul><li><code>state</code> -&gt; <code>ref()</code></li><li><code>getter</code> -&gt; <code>computed()</code></li><li><code>action</code> -&gt; <code>function()</code></li></ul><p>这三个概念可以认为是：值、通过值得到的、用来改变值的</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>通过 <code>Vite</code> 创建一个 <code>Vue</code> 项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm create vite</span><br></pre></td></tr></table></figure><p>安装<code>pinia</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add pinia</span><br></pre></td></tr></table></figure><p>习惯在相对项目根目录创建<code>src/store/index.ts</code>文件，以此作为入口来配置整个项目的 _store_（state？？）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pinia;</span><br></pre></td></tr></table></figure><p>在<code>vue</code>的入口文件<code>main.ts</code>中导入并使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> pinia <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>记得要在挂在<code>#app</code>之前使用</li></ul><p>如果是在<code>Vue2</code>中</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia, <span class="title class_">PiniaVuePlugin</span> &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">PiniaVuePlugin</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="comment">// 同一个`pinia&#x27;实例，可以在同一个页面的多个 Vue 应用中使用。</span></span><br><span class="line">  pinia,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h1><h2 id="在-setup-中使用"><a href="#在-setup-中使用" class="headerlink" title="在 setup 中使用"></a>在 setup 中使用</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>Composition API</li></ul><p>在<code>setup</code>中使用非常方便，写法和普通的 JavaScript 大差不差</p><p>使用<code>defineStore</code>定义一个<code>Store</code>:（可在<code>src/store</code>下创建新的文件）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&quot;user&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> username = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setUsername</span> = (<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">    username.<span class="property">value</span> = name;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; username, setUsername &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>🎇 Store 的名字推荐是<code>useXXXStore</code></p><ul><li>第一个参数是 Store 的唯一 ID</li><li>第二个参数是一个函数</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在 Vue 组件的<code>&lt;script setup&gt;</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useUserStore &#125; <span class="keyword">from</span> <span class="string">&quot;xx/store/userStore&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接解构的 username 不具有响应式</span></span><br><span class="line"><span class="comment">// 作为 action 的 setUsername 正常使用</span></span><br><span class="line"><span class="keyword">const</span> &#123; username, setUsername &#125; = <span class="title function_">useUserStore</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">setUsername</span>(<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(username); <span class="comment">// 还是原来的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">useUserStore</span>().<span class="property">username</span>); <span class="comment">// Jerry</span></span><br></pre></td></tr></table></figure><p>要保持响应性，可使用<code>storeToRefs</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useUserStore</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; username &#125; = <span class="title function_">storeToRefs</span>(store);</span><br><span class="line"><span class="comment">// 需要变为响应性的是 state（值），action直接解构就行</span></span><br><span class="line"><span class="keyword">const</span> &#123; setUsername &#125; = store;</span><br></pre></td></tr></table></figure><blockquote><p>如果有报错说类似是：<code>setUsername is not a function</code>的，重启一下项目就好了。？不知道是 vite 的问题还是 pinia 的问题</p></blockquote><h2 id="不在-setup-中使用"><a href="#不在-setup-中使用" class="headerlink" title="不在 setup 中使用"></a>不在 setup 中使用</h2><ul><li>Option API</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&quot;counter&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">double</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用方法和在<code>setup</code>中一样，就像是<code>Vue</code>中<em>Option API</em>和<em>Composition API</em>的区别</p><h1 id="细节使用"><a href="#细节使用" class="headerlink" title="细节使用"></a>细节使用</h1><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&quot;storeId&quot;</span>, &#123;</span><br><span class="line">  <span class="comment">// 为了完整类型推理，推荐使用箭头函数</span></span><br><span class="line">  <span class="attr">state</span>: (): <span class="function"><span class="params">State</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">items</span>: [] <span class="keyword">as</span> <span class="title class_">ItemInfo</span>[],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ItemInfo</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">State</span> &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">items</span>: array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一般都会自动推断类型，无需手动写</li></ul><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>使用的时候可以直接进行读写来改变 store，也可以使用<code>$patch</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br><span class="line"></span><br><span class="line">store.<span class="property">count</span>++;</span><br><span class="line"></span><br><span class="line">store.$patch(&#123;</span><br><span class="line">  <span class="attr">count</span>: store.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">  <span class="attr">items</span>: [&#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&quot;huawei&quot;</span> &#125;],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以以函数作为参数的形式使用</span></span><br><span class="line">store.$patch(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">  state.<span class="property">items</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;shoes&quot;</span>, <span class="attr">quantity</span>: <span class="number">1</span> &#125;);</span><br><span class="line">  state.<span class="property">hasChanged</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以重置state</span></span><br><span class="line">store.$reset();</span><br></pre></td></tr></table></figure><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><p><strong>不能完全替换掉</strong>store 的 state，可以 patch 它们</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这实际上并没有替换`$state`</span></span><br><span class="line">store.<span class="property">$state</span> = &#123; <span class="attr">count</span>: <span class="number">24</span> &#125;;</span><br><span class="line"><span class="comment">// 在它内部调用 `$patch()`：</span></span><br><span class="line">store.$patch(&#123; <span class="attr">count</span>: <span class="number">24</span> &#125;);</span><br></pre></td></tr></table></figure><p>可以通过变更<code>pinia</code>实例的<code>state</code>来设置整个应用的初始 state。常用于<em>SSR 中的激活过程</em>（为了安全起见，<code>pinia.state.value</code>被转义为其他形式）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pinia.<span class="property">state</span>.<span class="property">value</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="订阅-State"><a href="#订阅-State" class="headerlink" title="订阅 State"></a>订阅 State</h3><p><code>$subscribe</code>监听<code>state</code>的变化，相比于<code>watch</code>，好处是 <em>subscriptions</em> （订阅的内容）在 <em>patch</em> 后只触发一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cartStore.$subscribe(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// import &#123; MutationType &#125; from &#x27;pinia&#x27;</span></span><br><span class="line">  mutation.<span class="property">type</span>; <span class="comment">// &#x27;direct&#x27; | &#x27;patch object&#x27; | &#x27;patch function&#x27;</span></span><br><span class="line">  <span class="comment">// 和 cartStore.$id 一样</span></span><br><span class="line">  mutation.<span class="property">storeId</span>; <span class="comment">// &#x27;cart&#x27;</span></span><br><span class="line">  <span class="comment">// 只有 mutation.type === &#x27;patch object&#x27;的情况下才可用</span></span><br><span class="line">  mutation.<span class="property">payload</span>; <span class="comment">// 传递给 cartStore.$patch() 的补丁对象。</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每当状态发生变化时，将整个 state 持久化到本地存储。</span></span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;cart&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><em>state subscription</em> 会被绑定到添加它们的组件上，组件被卸载的时候，这些订阅会被删除。添加<code>&#123;detachd: true&#125;</code>作为第二个参数将订阅从当前组件中分离</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const someStore = useSomeStore();</span><br><span class="line">// 此订阅器即便在组件卸载之后仍会被保留</span><br><span class="line">someStore.$subscribe(callback, &#123; detached: true &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>也可以在<em>pinia</em>实例上监听整个 state</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  pinia.<span class="property">state</span>,</span><br><span class="line">  <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 每当状态发生变化时，将整个 state 持久化到本地存储。</span></span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;piniaState&quot;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state));</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="在-OptionAPI-的用法"><a href="#在-OptionAPI-的用法" class="headerlink" title="在 OptionAPI 的用法"></a>在 OptionAPI 的用法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例文件路径：</span></span><br><span class="line"><span class="comment">// ./src/stores/counter.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&quot;counter&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用<code>mapState()</code>辅助函数将 state 属性映射为<strong>只读</strong>的计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/counter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 可以访问组件中的 this.count</span></span><br><span class="line">    <span class="comment">// 与从 store.count 中读取的数据相同</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(useCounterStore, [<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line">    <span class="comment">// 与上述相同，但将其注册为 this.myOwnName</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(useCounterStore, &#123;</span><br><span class="line">      <span class="attr">myOwnName</span>: <span class="string">&#x27;count&#x27;</span>,</span><br><span class="line">      <span class="comment">// 你也可以写一个函数来获得对 store 的访问权</span></span><br><span class="line">      <span class="attr">double</span>: <span class="function"><span class="params">store</span> =&gt;</span> store.<span class="property">count</span> * <span class="number">2</span>,</span><br><span class="line">      <span class="comment">// 它可以访问 `this`，但它没有标注类型...</span></span><br><span class="line">      <span class="title function_">magicValue</span>(<span class="params">store</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> store.<span class="property">someGetter</span> + <span class="variable language_">this</span>.<span class="property">count</span> + <span class="variable language_">this</span>.<span class="property">double</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>mapWritableState()</code>辅助函数将 state 映射为<strong>可修改</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapWritableState &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/counter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 可以访问组件中的 this.count，并允许设置它。</span></span><br><span class="line">    <span class="comment">// this.count++</span></span><br><span class="line">    <span class="comment">// 与从 store.count 中读取的数据相同</span></span><br><span class="line">    ...<span class="title function_">mapWritableState</span>(useCounterStore, [<span class="string">&#x27;count&#x27;</span>])</span><br><span class="line">    <span class="comment">// 与上述相同，但将其注册为 this.myOwnName</span></span><br><span class="line">    ...<span class="title function_">mapWritableState</span>(useCounterStore, &#123;</span><br><span class="line">      <span class="attr">myOwnName</span>: <span class="string">&#x27;count&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是就不能传递函数了</li></ul><h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><ul><li>完全等同于 state 的计算属性。推荐使用箭头函数，接收一个 state 作为第一个参数</li><li>在<code>setup</code>中，就是通过 state 返回衍生值的那个方法（不传参）</li><li>不可异步</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&quot;main&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">doubleCount</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="访问其他-Getter"><a href="#访问其他-Getter" class="headerlink" title="访问其他 Getter"></a>访问其他 Getter</h3><p>除了依赖 state，也可以访问到其他的 getter</p><p>在使用<code>TypeScript</code>的时候，如果是通过<code>this</code>访问其他 getter，需要明确当前 getter 的返回类型（ts 的问题）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&quot;main&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 自动推断出返回类型是一个 number</span></span><br><span class="line">    <span class="title function_">doubleCount</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">count</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 返回类型**必须**明确设置</span></span><br><span class="line">    <span class="title function_">doublePlusOne</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">      <span class="comment">// 整个 store 的 自动补全和类型标注 ✨</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">doubleCount</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>访问另外一个 store（另外的<code>defineStore</code>） 的 Getter，也是一样的操作</li></ul><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><p>计算属性不传参的，不过可以让 getter 返回一个函数，这个函数可以接收任意参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&quot;main&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="attr">getUserById</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">userId</span>) =&gt;</span> state.<span class="property">users</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> user.<span class="property">id</span> === userId);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>这样的 getter 不会被缓存（计算属性缓存），但性能会好点</li></ul><h3 id="在setup中使用"><a href="#在setup中使用" class="headerlink" title="在setup中使用"></a>在<code>setup</code>中使用</h3><p>作为 store 的一个属性，可直接访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const store = useCounterStore();</span><br><span class="line">store.count = 3;</span><br><span class="line">store.doubleCount; // 6</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="在-OptionAPI-中的用法"><a href="#在-OptionAPI-中的用法" class="headerlink" title="在 OptionAPI 中的用法"></a>在 OptionAPI 中的用法</h3><p>这里面也分为两种风格：</p><ol><li>组合式 API，不是在<code>&lt;script setup&gt;</code>里面，是在<code>defineComponent</code>里面</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/counter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> counterStore = <span class="title function_">useCounterStore</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; counterStore &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">quadrupleCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">counterStore</span>.<span class="property">doubleCount</span> * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>OptionAPI 的形式（和 state 一样，使用辅助函数）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&quot;../stores/counter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 允许在组件中访问 this.doubleCount</span></span><br><span class="line">    <span class="comment">// 与从 store.doubleCount 中读取的相同</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(useCounterStore, [<span class="string">&quot;doubleCount&quot;</span>]),</span><br><span class="line">    <span class="comment">// 与上述相同，但将其注册为 this.myOwnName</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(useCounterStore, &#123;</span><br><span class="line">      <span class="attr">myOwnName</span>: <span class="string">&quot;doubleCount&quot;</span>,</span><br><span class="line">      <span class="comment">// 你也可以写一个函数来获得对 store 的访问权</span></span><br><span class="line">      <span class="attr">double</span>: <span class="function">(<span class="params">store</span>) =&gt;</span> store.<span class="property">doubleCount</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><ul><li>相当于组件的<code>method</code></li><li>在<code>setup</code>中，就是改变 state 的那个方法</li><li>可以是异步的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mande &#125; <span class="keyword">from</span> <span class="string">&quot;mande&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = <span class="title function_">mande</span>(<span class="string">&quot;/api/users&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUsers = <span class="title function_">defineStore</span>(<span class="string">&quot;users&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">userData</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">registerUser</span>(<span class="params">login, password</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">userData</span> = <span class="keyword">await</span> api.<span class="title function_">post</span>(&#123; login, password &#125;);</span><br><span class="line">        <span class="title function_">showTooltip</span>(<span class="string">`Welcome back <span class="subst">$&#123;<span class="variable language_">this</span>.userData.name&#125;</span>!`</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="title function_">showTooltip</span>(error);</span><br><span class="line">        <span class="comment">// 让表单组件显示错误</span></span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>使用的时候正常调用就行</li></ul><h3 id="订阅-action"><a href="#订阅-action" class="headerlink" title="订阅 action"></a>订阅 action</h3><p>通过<code>store.$onAction()</code>来监听 action 和它的结果；传递给它的回调函数会在 action 本身之前执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unsubscribe = someStore.$onAction(</span><br><span class="line">  <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    name, // 使用到的 action 名称</span></span></span><br><span class="line"><span class="params"><span class="function">    store, // store 实例，类似 <span class="string">`someStore`</span></span></span></span><br><span class="line"><span class="params"><span class="function">    args, // 传递给 action 的参数数组</span></span></span><br><span class="line"><span class="params"><span class="function">    after, // 在 action 返回或解决后的钩子</span></span></span><br><span class="line"><span class="params"><span class="function">    onError, // action 抛出或拒绝的钩子</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 为这个特定的 action 调用提供一个共享变量</span></span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="comment">// 这将在执行 &quot;store &quot;的 action 之前触发。</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Start &quot;<span class="subst">$&#123;name&#125;</span>&quot; with params [<span class="subst">$&#123;args.join(<span class="string">&quot;, &quot;</span>)&#125;</span>].`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这将在 action 成功并完全运行后触发。</span></span><br><span class="line">    <span class="comment">// 它等待着任何返回的 promise（action的返回值）</span></span><br><span class="line">    <span class="title function_">after</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        <span class="string">`Finished &quot;<span class="subst">$&#123;name&#125;</span>&quot; after <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">          <span class="built_in">Date</span>.now() - startTime</span></span></span><br><span class="line"><span class="subst"><span class="string">        &#125;</span>ms.\nResult: <span class="subst">$&#123;result&#125;</span>.`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 action 抛出或返回一个拒绝的 promise，这将触发</span></span><br><span class="line">    <span class="title function_">onError</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(</span><br><span class="line">        <span class="string">`Failed &quot;<span class="subst">$&#123;name&#125;</span>&quot; after <span class="subst">$&#123;<span class="built_in">Date</span>.now() - startTime&#125;</span>ms.\nError: <span class="subst">$&#123;error&#125;</span>.`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动删除监听器</span></span><br><span class="line"><span class="title function_">unsubscribe</span>();</span><br></pre></td></tr></table></figure><ul><li>订阅默认绑定在<em>添加它们的组件内</em>，组件卸载时，订阅也会自动取消</li></ul><p>如果不想让订阅跟着组件取消，将<code>true</code>传递给第二个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const someStore = useSomeStore();</span><br><span class="line">// 此订阅器即便在组件卸载之后仍会被保留</span><br><span class="line">someStore.$onAction(callback, true);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="在-OptionAPI-中的用法-1"><a href="#在-OptionAPI-中的用法-1" class="headerlink" title="在 OptionAPI 中的用法"></a>在 OptionAPI 中的用法</h3><ol><li>使用 <code>setup()</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/counter&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> counterStore = <span class="title function_">useCounterStore</span>()</span><br><span class="line">    <span class="keyword">return</span> &#123; counterStore &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">incrementAndPrint</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">counterStore</span>.<span class="title function_">increment</span>()</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;New Count:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">counterStore</span>.<span class="property">count</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>不使用 <code>setup()</code>，也是使用辅助函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCounterStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../stores/counter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 访问组件内的 this.increment()</span></span><br><span class="line">    <span class="comment">// 与从 store.increment() 调用相同</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(useCounterStore, [<span class="string">&#x27;increment&#x27;</span>])</span><br><span class="line">    <span class="comment">// 与上述相同，但将其注册为this.myOwnName()</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(useCounterStore, &#123; <span class="attr">myOwnName</span>: <span class="string">&#x27;increment&#x27;</span> &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>插件是<strong>一个函数</strong>，通过<code>pinia.use()</code>添加到 pinia 实例中，可以<strong>选择性地返回</strong>要添加到 store 的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"></span><br><span class="line">pinia.<span class="title function_">use</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 创建的每个 store 中都会添加一个名为 `secret` 的属性。</span></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">secret</span>: <span class="string">&quot;the cake is a lie&quot;</span> &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在另一个文件中</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br><span class="line">store.<span class="property">secret</span>; <span class="comment">// &#x27;the cake is a lie&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>所以在创建全局（共享）的 store 变量时很有用</li><li>每个 store 都被<code>reactive</code>包装过，所以对于<code>ref</code>的值也无需使用<code>.value</code></li></ul><p>插件函数有一个<strong>可选</strong>的<code>context</code>参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">myPiniaPlugin</span>(<span class="params">context</span>) &#123;</span><br><span class="line">  context.<span class="property">pinia</span>; <span class="comment">// 用 `createPinia()` 创建的 pinia。</span></span><br><span class="line">  context.<span class="property">app</span>; <span class="comment">// 用 `createApp()` 创建的当前应用(仅 Vue 3)。</span></span><br><span class="line">  context.<span class="property">store</span>; <span class="comment">// 该插件想扩展的 store</span></span><br><span class="line">  context.<span class="property">options</span>; <span class="comment">// 定义传给 `defineStore()` 的 store 的可选对象。</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为插件本身是一个函数，所以在<code>pinia.use</code>的时候也可以传递参数进去</p><p>🤔 第一个参数是一个<em>context</em>，要想接收到传递过来的参数，需要使用<em>函数柯里化</em></p><ul><li>在外面再包一层函数用来接收传递过来的参数</li><li>然后返回一个函数，作为参数传递给<code>pinia.use</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">myPlugin</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">context</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 插件操作</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; myPlugin &#125; <span class="keyword">from</span> <span class="string">&quot;xx.js&quot;</span>;</span><br><span class="line"></span><br><span class="line">pinia.<span class="title function_">use</span>(<span class="title function_">myPlugin</span>(&#123; <span class="attr">msg</span>: <span class="string">&quot;hello pinia&quot;</span> &#125;));</span><br></pre></td></tr></table></figure><p>在 TypeScript 中使用时可以指定<code>options</code>的类型，然后再使用的时候会有类型检测</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Options</span> &#123;</span><br><span class="line">  <span class="attr">msg</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">myPlugin</span>(<span class="params"><span class="attr">options</span>: <span class="title class_">Options</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">context</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 插件操作</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用的时候传递不符合<code>Options</code>时会报错</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;🌏 Vue 状态管理&lt;/p&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://smalljerry.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="vue" scheme="https://smalljerry.cn/tags/vue/"/>
    
    <category term="状态管理" scheme="https://smalljerry.cn/tags/%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Vue样式篇</title>
    <link href="https://smalljerry.cn/2023/09/19/Vue%E6%A0%B7%E5%BC%8F%E7%AF%87/"/>
    <id>https://smalljerry.cn/2023/09/19/Vue%E6%A0%B7%E5%BC%8F%E7%AF%87/</id>
    <published>2023-09-18T23:23:32.000Z</published>
    <updated>2025-02-22T02:14:47.345Z</updated>
    
    <content type="html"><![CDATA[<p>📦 Vue3</p><span id="more"></span><h1 id="style"><a href="#style" class="headerlink" title="style"></a><code>style</code></h1><ul><li>全称<code>v-bind:style</code>，简写<code>:style</code></li></ul><p>😃 如果样式需要浏览器前缀，Vue 会自动加上</p><p>也可以自己传递</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; display: [&#x27;-webkit-box&#x27;, &#x27;-ms-flexbox&#x27;, &#x27;flex&#x27;] &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果浏览器不需要前缀，结果就只有<code>display: flex</code></li></ul><p><strong>传递对象</strong></p><ul><li>可用 <em>camelCase</em> 或者 <em>kebab-cased</em></li></ul><p>使用<code>:style=&quot;&#123;&#125;&quot;</code>或者是<code>:style=&quot;[]&quot;</code>绑定的样式</p><blockquote><p>记得值也需要用 <code>&quot;&quot;</code>包住，React 中就不用。如果需要使用模板字符串，双引号换成**`**</p></blockquote><p>常见使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> activeColor = <span class="title function_">ref</span>(<span class="string">&quot;red&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fontSize = <span class="title function_">ref</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styleObject = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">  <span class="attr">fontSize</span>: <span class="string">&quot;13px&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isBig = <span class="title function_">ref</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">const</span> bigActive = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  isBig ? &#123; <span class="attr">fontSize</span>: <span class="string">&quot;18px&quot;</span> &#125; : &#123; <span class="attr">fontSize</span>: <span class="string">&quot;14px&quot;</span> &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; color: activeColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; &#x27;font-size&#x27;: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;styleObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;isBig&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>传递数组</strong></p><p>在 JS 中写好的样式对象传递到行内的数组中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[baseStyles, overridingStyles]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在组件上使用<code>style</code>，组件内的根元素会继承组件上的样式。👉<a href="#%E7%BB%84%E4%BB%B6%E4%B8%8A%E7%9A%84-class">class 透传</a></p><h1 id="class"><a href="#class" class="headerlink" title="class"></a><code>class</code></h1><ul><li>全称<code>v-bind:class</code>，简写<code>:class</code></li></ul><blockquote><p>记得值也需要用 <code>&quot;&quot;</code>包住</p></blockquote><p><code>class</code>和<code>:class</code>可同时存在，渲染后合并</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main-pane&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>样式类<code>active</code>是否存在，取决于<code>isActive</code>是否为 true</li><li>和<code>style</code>一样，支持绑定<em>对象</em>或者<em>计算属性</em>，也支持<em>数组</em></li></ul><p>绑定数组的时候，还可以在数组里面嵌套对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#123; active: isActive &#125;, errorClass]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件上的-class"><a href="#组件上的-class" class="headerlink" title="组件上的 class"></a>组件上的 class</h2><p>对于<strong>单根组件</strong>，组件上的<code>class</code>会和组件内根元素的合并</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar&quot;</span>&gt;</span>Hi!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在使用组件时 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">class</span>=<span class="string">&quot;baz boo&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>渲染结果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar baz boo&quot;</span>&gt;</span>Hi!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于<strong>多根组件</strong>，在组件内部需要使用<code>$attr.class</code>来指定哪个<strong>根元素</strong>来接收</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MyComponent 模板使用 $attrs 时 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">&quot;$attrs.class&quot;</span>&gt;</span>Hi!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is a child component<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">class</span>=<span class="string">&quot;baz&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>要在 JS 中获取到，可以通过<code>useAttrs()</code></p><p>在<code>setup</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useAttrs &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const attrs = useAttrs();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>不用<code>setup</code>的话</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props, ctx</span>) &#123;</span><br><span class="line">    <span class="comment">// 透传 attribute 被暴露为 ctx.attrs</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">attrs</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>不能用监听器来监听 attrs 的变化</p></blockquote><h1 id="lt-style-gt-标签"><a href="#lt-style-gt-标签" class="headerlink" title="&lt;style&gt;标签"></a><code>&lt;style&gt;</code>标签</h1><h2 id="css-预处理器"><a href="#css-预处理器" class="headerlink" title="css 预处理器"></a>css 预处理器</h2><p><code>&lt;style lang=&#39;xx&#39;&gt;&lt;/style&gt;</code>：<code>xx</code>一般会有 <em>less</em>, <em>sass</em>(使用的时候传<em>scss</em>)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.example</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="样式作用域"><a href="#样式作用域" class="headerlink" title="样式作用域"></a>样式作用域</h2><p><code>&lt;style scoped&gt;&lt;/style&gt;</code>：使得里面的样式仅在当前组件可用</p><ul><li>在同一组件中，可和代表<strong>全局</strong>的<code>&lt;style&gt;&lt;/style&gt;</code>同时存在</li><li>谨慎使用后代选择器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">.example &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;example&quot;&gt;hi&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>转换为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.example</span><span class="selector-attr">[data-v-f3f3eg9]</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;example&quot;</span> <span class="attr">data-v-f3f3eg9</span>&gt;</span>hi<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>data-v-f3f3eg9 后面的哈希值根据文件的路径生成</li></ul><blockquote><p>使用了作用域之后，父组件样式不会影响子组件。不过为了布局考虑，子组件的根节点会受到影响</p></blockquote><p><strong>深度选择器</strong>：<code>:deep()</code></p><p>在<em>scoped</em>作用域里面，要选择子组件里面的内容，使用伪类<code>:deep()</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">.a :deep(.b) &#123;</span><br><span class="line">  /* ... */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 将会编译为 */</span><br><span class="line">.a[data-v-f3f3eg9] .b &#123;</span><br><span class="line">  /* ... */</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>括号里面的内容不需要用引号包起来</p></blockquote><p><strong>插槽选择器</strong>：<code>:slotted</code></p><p>默认情况下，<code>scoped</code>不会影响到<code>&lt;slot/&gt;</code>渲染出来的内容，因为它们被认为是父组件所持有并传递进来的。</p><p>要指定插槽的额内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">:slotted(div) &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>全局选择器</strong>：<code>:global</code></p><p>就是让当前指定的选择器配置的样式全局范围内生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">:global(.red) &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="CSS-Modules"><a href="#CSS-Modules" class="headerlink" title="CSS Modules"></a>CSS Modules</h2><p><code>&lt;style module=&quot;xxx&quot;&gt;</code>被编译成 CSS Module</p><ul><li>在 CSS Module 里的内容会变成对象<ul><li>直接<code>module</code>，使用默认名称<code>$style</code></li><li>自定义名称<code>module=&quot;classes&quot;</code></li></ul></li><li>可在<code>&lt;template&gt;</code>和<code>&lt;script setup&gt;</code>中使用</li></ul><p>在<em>模板</em>中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p :class=&quot;$style.red&quot;&gt;This should be red&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style module&gt;</span><br><span class="line">.red &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>绑定的 <em>class</em>会进行哈希化</li></ul><p>在 <em>setup</em> 中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCssModule &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 setup() 作用域中...</span></span><br><span class="line"><span class="comment">// 默认情况下, 返回 &lt;style module&gt; 的 class</span></span><br><span class="line"><span class="title function_">useCssModule</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具名情况下, 返回 &lt;style module=&quot;classes&quot;&gt; 的 class</span></span><br><span class="line"><span class="title function_">useCssModule</span>(<span class="string">&quot;classes&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="CSS-中的-v-bind"><a href="#CSS-中的-v-bind" class="headerlink" title="CSS 中的 v-bind"></a>CSS 中的 <code>v-bind</code></h2><p>在<code>&lt;style&gt;</code>中用来绑定<code>&lt;script&gt;</code>中的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const theme = &#123;</span><br><span class="line">  color: &quot;red&quot;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;hello&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">p &#123;</span><br><span class="line">  // 是表达式，就需要用引号包起来</span><br><span class="line">  color: v-bind(&quot;theme.color&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><p>Vue 提供组件 <code>&lt;Transition&gt;</code> 和 <code>&lt;TransitionGroup&gt;</code> 来处理元素的</p><ul><li>进入</li><li>离开</li><li>列表顺序变化</li></ul><p>的过渡效果</p><ul><li><code>&lt;Transition&gt;</code>，组件或元素<strong>进入</strong>或<strong>离开</strong>DOM 时应用动画</li><li><code>&lt;TransitionGroup&gt;</code>，在一个<code>v-for</code>列表的元素或组件被<strong>插入</strong>，<strong>移动</strong>，<strong>删除</strong>时应用动画</li></ul><h2 id="lt-Transition-gt-组件"><a href="#lt-Transition-gt-组件" class="headerlink" title="&lt;Transition&gt;组件"></a><code>&lt;Transition&gt;</code>组件</h2><blockquote><p>仅支持单个元素或者一个单根组件</p></blockquote><p>动画通过默认插槽传递给它包裹的元素或者组件上。触发条件：</p><ul><li><code>v-if</code></li><li><code>v-show</code></li><li><code>&lt;component&gt;</code>切换的时候</li><li>改变特殊的<code>key</code>属性</li></ul><p>整个动画过程：</p><ol><li>Vue 会自动检测目标元素是否应用了 CSS 过渡或动画。则一些 <code>CSS过渡class</code>（<code>v-enter</code>那些）会在适当的时机被添加和移除。</li><li>如果有作为监听器的 <code>JavaScript钩子</code>，这些钩子函数会在适当时机被调用。</li><li>上面两点都没，那么 DOM 的插入、删除操作将在浏览器的下一个动画帧后执行。</li></ol><p>🚗 可用的属性和事件</p><p>属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">TransitionProps</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用于自动生成过渡 CSS class 名。</span></span><br><span class="line"><span class="comment">   * 例如 `name: &#x27;fade&#x27;` 将自动扩展为 `.fade-enter`、</span></span><br><span class="line"><span class="comment">   * `.fade-enter-active` 等。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">name</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 是否应用 CSS 过渡 class。</span></span><br><span class="line"><span class="comment">   * 默认：true</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">css</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 指定要等待的过渡事件类型</span></span><br><span class="line"><span class="comment">   * 来确定过渡结束的时间。</span></span><br><span class="line"><span class="comment">   * 默认情况下会自动检测</span></span><br><span class="line"><span class="comment">   * 持续时间较长的类型。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">type</span>?: <span class="string">&quot;transition&quot;</span> | <span class="string">&quot;animation&quot;</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 显式指定过渡的持续时间。</span></span><br><span class="line"><span class="comment">   * 默认情况下是等待过渡效果的根元素的第一个 `transitionend`</span></span><br><span class="line"><span class="comment">   * 或`animationend`事件。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">duration</span>?: <span class="built_in">number</span> | &#123; <span class="attr">enter</span>: <span class="built_in">number</span>; <span class="attr">leave</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 控制离开/进入过渡的时序。</span></span><br><span class="line"><span class="comment">   * 默认情况下是同时的。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">mode</span>?: <span class="string">&quot;in-out&quot;</span> | <span class="string">&quot;out-in&quot;</span> | <span class="string">&quot;default&quot;</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 是否对初始渲染使用过渡。</span></span><br><span class="line"><span class="comment">   * 默认：false</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">appear</span>?: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用于自定义过渡 class 的 prop。</span></span><br><span class="line"><span class="comment">   * 在模板中使用短横线命名，例如：enter-from-class=&quot;xxx&quot;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">enterFromClass</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">enterActiveClass</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">enterToClass</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">appearFromClass</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">appearActiveClass</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">appearToClass</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">leaveFromClass</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">leaveActiveClass</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">leaveToClass</span>?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件</p><ul><li>@before-enter</li><li>@before-leave</li><li>@enter</li><li>@leave</li><li>@appear</li><li>@after-enter</li><li>@after-leave</li><li>@after-appear</li><li>@enter-cancelled</li><li>@leave-cancelled (v-show only)</li><li>@appear-cancelled</li></ul><h3 id="基于-CSS-的过渡效果"><a href="#基于-CSS-的过渡效果" class="headerlink" title="基于 CSS 的过渡效果"></a>基于 CSS 的过渡效果</h3><h4 id="CSS-过渡-class"><a href="#CSS-过渡-class" class="headerlink" title="CSS 过渡 class"></a>CSS 过渡 class</h4><p><a href="https://cn.vuejs.org/assets/transition-classes.f0f7b3c9.png">图片来自 Vue - Transition</a></p><ol><li><p><code>v-enter-from</code>：进入动画的起始状态。在元素插入之前添加，在元素插入完成后的下一帧移除。</p></li><li><p><code>v-enter-active</code>：进入动画的生效状态。应用于整个进入动画阶段。在元素被插入之前添加，在过渡或动画完成之后移除。这个 class 可以被用来定义进入动画的持续时间、延迟与速度曲线类型。</p></li><li><p><code>v-enter-to</code>：进入动画的结束状态。在元素插入完成后的下一帧被添加 (也就是 <code>v-enter-from</code> 被移除的同时)，在过渡或动画完成之后移除。</p></li><li><p><code>v-leave-from</code>：离开动画的起始状态。在离开过渡效果被触发时立即添加，在一帧后被移除。</p></li><li><p><code>v-leave-active</code>：离开动画的生效状态。应用于整个离开动画阶段。在离开过渡效果被触发时立即添加，在过渡或动画完成之后移除。这个 class 可以被用来定义离开动画的持续时间、延迟与速度曲线类型。</p></li><li><p><code>v-leave-to</code>：离开动画的结束状态。在一个离开动画被触发后的下一帧被添加 (也就是 <code>v-leave-from</code> 被移除的同时)，在过渡或动画完成之后移除。</p></li></ol><p>使用<code>name</code>属性声明一个过渡效果名来代替前缀<code>v</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Transition name=&quot;fade&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/Transition&gt;</span><br></pre></td></tr></table></figure><ul><li><code>name</code>可动态绑定</li></ul><p>搭配 css 自己的 <code>tansition</code> 属性；也可以使用 css 的<code>animation</code>，一般都在<code>*-enter-active</code>和<code>*-leave</code>中使用</p><blockquote><p>同时使用<code>transition</code>和<code>animation</code>，需要在标签中使用<code>type</code>属性传入两者之一，以告诉 Vue 需要关注哪种动画类型</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  进入和离开动画可以使用不同</span></span><br><span class="line"><span class="comment">  持续时间和速度曲线。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.fade-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-out;</span><br><span class="line">  <span class="comment">/** 或者 */</span></span><br><span class="line">  <span class="attribute">animation</span>: bounce-in <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.8s</span> <span class="built_in">cubic-bezier</span>(<span class="number">1</span>, <span class="number">0.5</span>, <span class="number">0.8</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">/** 或者 */</span></span><br><span class="line">  <span class="attribute">animation</span>: bounce-in <span class="number">0.5s</span> reverse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-enter-from</span>,</span><br><span class="line"><span class="selector-class">.fade-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">20px</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> bounce-in &#123;</span><br><span class="line">  <span class="comment">/** */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🎇 动画效果会直接应用在子元素上，此外还可以选择指定更深层次的子元素来触发动画效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Transition name=&quot;nested&quot;&gt;</span><br><span class="line">  &lt;div v-if=&quot;show&quot; class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">      Hello</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/Transition&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 应用于嵌套元素的规则 */</span></span><br><span class="line"><span class="selector-class">.nested-enter-active</span> <span class="selector-class">.inner</span>,</span><br><span class="line"><span class="selector-class">.nested-leave-active</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.nested-enter-from</span> <span class="selector-class">.inner</span>,</span><br><span class="line"><span class="selector-class">.nested-leave-to</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">30px</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ... 省略了其他必要的 CSS */</span></span><br></pre></td></tr></table></figure><p>还可以单独拿出来，添加一个过渡延迟，以获得交错效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 延迟嵌套元素的进入以获得交错效果 */</span></span><br><span class="line"><span class="selector-class">.nested-enter-active</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">0.25s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过向标签传递<code>duration</code>来指定过渡的持续时间，以确保这个延迟会在这个动画周期中生效（如果在<code>transitionend</code>和<code>animationend</code>时间结束了，延迟都没到来）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Transition :duration=&quot;550&quot;&gt;...&lt;/Transition&gt;</span><br><span class="line">&lt;!-- 也可以传递一个对象来分别指定进入和离开 --&gt;</span><br><span class="line">&lt;Transition :duration=&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;...&lt;/Transition&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义过渡-class"><a href="#自定义过渡-class" class="headerlink" title="自定义过渡 class"></a>自定义过渡 class</h4><p>向 <code>&lt;Transition&gt;</code> 传递以下的 props 来指定自定义的过渡 class：</p><ul><li>enter-from-class</li><li>enter-active-class</li><li>enter-to-class</li><li>leave-from-class</li><li>leave-active-class</li><li>leave-to-class</li></ul><p>在使用第三方 CSS 动画库的时候非常有用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 假设你已经在页面中引入了 Animate.css --&gt;</span><br><span class="line">&lt;Transition</span><br><span class="line">  name=&quot;custom-classes&quot;</span><br><span class="line">  enter-active-class=&quot;animate__animated animate__tada&quot;</span><br><span class="line">  leave-active-class=&quot;animate__animated animate__bounceOutRight&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;p v-if=&quot;show&quot;&gt;hello&lt;/p&gt;</span><br><span class="line">&lt;/Transition&gt;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-钩子"><a href="#JavaScript-钩子" class="headerlink" title="JavaScript 钩子"></a>JavaScript 钩子</h3><p>也可与听过监听<code>&lt;Transition&gt;</code>组件上的事件来实现动画</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Transition</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">before-enter</span>=<span class="string">&quot;onBeforeEnter&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">enter</span>=<span class="string">&quot;onEnter&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">after-enter</span>=<span class="string">&quot;onAfterEnter&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">enter-cancelled</span>=<span class="string">&quot;onEnterCancelled&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">before-leave</span>=<span class="string">&quot;onBeforeLeave&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">leave</span>=<span class="string">&quot;onLeave&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">after-leave</span>=<span class="string">&quot;onAfterLeave&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">leave-cancelled</span>=<span class="string">&quot;onLeaveCancelled&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Transition</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在元素被插入到 DOM 之前被调用</span></span><br><span class="line"><span class="comment">// 用这个来设置元素的 &quot;enter-from&quot; 状态</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onBeforeEnter</span>(<span class="params">el</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在元素被插入到 DOM 之后的下一帧被调用</span></span><br><span class="line"><span class="comment">// 用这个来开始进入动画</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onEnter</span>(<span class="params">el, done</span>) &#123;</span><br><span class="line">  <span class="comment">// 调用回调函数 done 表示过渡结束</span></span><br><span class="line">  <span class="comment">// 如果与 CSS 结合使用，则这个回调是可选参数</span></span><br><span class="line">  <span class="title function_">done</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当进入过渡完成时调用。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onAfterEnter</span>(<span class="params">el</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当进入过渡在完成之前被取消时调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onEnterCancelled</span>(<span class="params">el</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 leave 钩子之前调用</span></span><br><span class="line"><span class="comment">// 大多数时候，你应该只会用到 leave 钩子</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onBeforeLeave</span>(<span class="params">el</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在离开过渡开始时调用</span></span><br><span class="line"><span class="comment">// 用这个来开始离开动画</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onLeave</span>(<span class="params">el, done</span>) &#123;</span><br><span class="line">  <span class="comment">// 调用回调函数 done 表示过渡结束</span></span><br><span class="line">  <span class="comment">// 如果与 CSS 结合使用，则这个回调是可选参数</span></span><br><span class="line">  <span class="title function_">done</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在离开过渡完成、</span></span><br><span class="line"><span class="comment">// 且元素已从 DOM 中移除时调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onAfterLeave</span>(<span class="params">el</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅在 v-show 过渡中可用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onLeaveCancelled</span>(<span class="params">el</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>使用仅由 JavaScript 执行的动画时，可添加一个 <code>:css=&quot;false&quot;</code>，告诉 Vue 可跳过对 CSS 过渡的自动检测。使用之后：</p><ul><li><code>@enter</code>和<code>@leave</code>回调函数<code>done</code>是必须的，否则钩子会被同步调用，过渡将立即完成</li></ul><h3 id="可复用"><a href="#可复用" class="headerlink" title="可复用"></a>可复用</h3><p>😃 可以向标签里面传递<code>&lt;slot&gt;</code>来封装成可复用的过渡组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- MyTransition.vue --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">// JavaScript 钩子逻辑...</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 包装内置的 Transition 组件 --&gt;</span><br><span class="line">  &lt;Transition name=&quot;my-transition&quot; @enter=&quot;onEnter&quot; @leave=&quot;onLeave&quot;&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;!-- 向内传递插槽内容 --&gt;</span><br><span class="line">  &lt;/Transition&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/*</span><br><span class="line">  必要的 CSS...</span><br><span class="line">  注意：避免在这里使用 &lt;style scoped&gt;</span><br><span class="line">  因为那不会应用到插槽内容上</span><br><span class="line">*/</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyTransition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">MyTransition</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他过渡效果"><a href="#其他过渡效果" class="headerlink" title="其他过渡效果"></a>其他过渡效果</h3><p><strong>出现时过渡</strong></p><p>初次渲染时应用一个过渡效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Transition appear&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/Transition&gt;</span><br></pre></td></tr></table></figure><p><strong>元素间过渡</strong></p><p>使用 <code>v-if</code> / <code>v-else</code> / <code>v-else-if</code>在几个组件之间切换</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">&quot;docState === &#x27;saved&#x27;&quot;</span>&gt;</span>Edit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-else-if</span>=<span class="string">&quot;docState === &#x27;edited&#x27;&quot;</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-else-if</span>=<span class="string">&quot;docState === &#x27;editing&#x27;&quot;</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>过渡模式</strong></p><p>想先执行离开动画，等它完成之后在执行元素的进入动画</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Transition mode=&quot;out-in&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/Transition&gt;</span><br></pre></td></tr></table></figure><ul><li>也支持<code>in-out</code>，但是不常用</li></ul><p><strong>组件之间过渡</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Transition name=&quot;fade&quot; mode=&quot;out-in&quot;&gt;</span><br><span class="line">  &lt;component :is=&quot;activeComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/Transition&gt;</span><br></pre></td></tr></table></figure><h3 id="性能考虑"><a href="#性能考虑" class="headerlink" title="性能考虑"></a>性能考虑</h3><p>多数使用<code>transform</code>和<code>opacity</code></p><ol><li>因为不会影响到 DOM 结构</li><li>多数现代浏览器的<code>transform</code>动画会使用 GPU 进行硬件加速</li></ol><p>相比之下<code>height</code>、<code>margin</code>这些会触发 CSS 布局变动，计算消耗就高了。<a href="https://csstriggers.com/">🌏 查看更多</a></p><h2 id="lt-TransitionGroup-gt-组件"><a href="#lt-TransitionGroup-gt-组件" class="headerlink" title="&lt;TransitionGroup&gt;组件"></a><code>&lt;TransitionGroup&gt;</code>组件</h2><p>和<code>&lt;Transition&gt;</code>基本相同的属性、CSS 过渡 class、JavaScript 钩子</p><p>区别：</p><ul><li>默认情况下不会生成容器元素；通过<code>tag</code>指定一个元素作为容器元素来渲染（外层自动生成的包裹层）</li><li>_过渡模式_（<code>mode</code>）不可用</li><li>列表中每个元素需要有唯一<code>key</code></li><li>CSS 过渡 class 会被应用在列表上而不是容器元素上</li></ul><blockquote><p>在<em>DOM 模板</em>（html 文件或者 JS 片段）中使用时，需要使用<code>&lt;transition-group&gt;</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;TransitionGroup name=&quot;list&quot; tag=&quot;ul&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;item in items&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">    &#123;&#123; item &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/TransitionGroup&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list-move</span>, <span class="comment">/* 对移动中的元素应用的过渡 */</span></span><br><span class="line"><span class="selector-class">.list-enter-active</span>,</span><br><span class="line"><span class="selector-class">.list-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-enter-from</span>,</span><br><span class="line"><span class="selector-class">.list-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">30px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 确保将离开的元素从布局流中删除</span></span><br><span class="line"><span class="comment">  以便能够正确地计算移动的动画。 */</span></span><br><span class="line"><span class="selector-class">.list-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事件和<code>&lt;Transition&gt;</code>一样</p><p>属性对比<code>&lt;Transition&gt;</code>少了<code>mode</code>，其他一样，并且多了两个：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">TransitionGroupProps</span> <span class="keyword">extends</span> <span class="title class_">Omit</span>&lt;<span class="title class_">TransitionProps</span>, &quot;mode&quot;&gt; &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 如果未定义，则渲染为片段 (fragment)。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">tag</span>?: <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用于自定义过渡期间被应用的 CSS class。</span></span><br><span class="line"><span class="comment">   * 在模板中使用 kebab-case，例如 move-class=&quot;xxx&quot;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attr">moveClass</span>?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="渐进延迟列表动画"><a href="#渐进延迟列表动画" class="headerlink" title="渐进延迟列表动画"></a>渐进延迟列表动画</h3><ul><li>通过读取元素的 data attribute</li></ul><p>把每一个元素的索引渲染为该元素上的一个 data attribute</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;TransitionGroup</span><br><span class="line">  tag=&quot;ul&quot;</span><br><span class="line">  :css=&quot;false&quot;</span><br><span class="line">  @before-enter=&quot;onBeforeEnter&quot;</span><br><span class="line">  @enter=&quot;onEnter&quot;</span><br><span class="line">  @leave=&quot;onLeave&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;li</span><br><span class="line">    v-for=&quot;(item, index) in computedList&quot;</span><br><span class="line">    :key=&quot;item.msg&quot;</span><br><span class="line">    :data-index=&quot;index&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;&#123; item.msg &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/TransitionGroup&gt;</span><br></pre></td></tr></table></figure><p>在 JavaScript 钩子中，基于当前元素的 data attribute 对元素的进场动画添加一个延迟</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">onEnter</span>(<span class="params">el, done</span>) &#123;</span><br><span class="line">  gsap.<span class="title function_">to</span>(el, &#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&quot;1.6em&quot;</span>,</span><br><span class="line">    <span class="attr">delay</span>: el.<span class="property">dataset</span>.<span class="property">index</span> * <span class="number">0.15</span>,</span><br><span class="line">    <span class="attr">onComplete</span>: done,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;📦 Vue3&lt;/p&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://smalljerry.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="vue" scheme="https://smalljerry.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Rollup快速手册</title>
    <link href="https://smalljerry.cn/2023/09/03/Rollup%E5%BF%AB%E9%80%9F%E6%89%8B%E5%86%8C/"/>
    <id>https://smalljerry.cn/2023/09/03/Rollup%E5%BF%AB%E9%80%9F%E6%89%8B%E5%86%8C/</id>
    <published>2023-09-03T08:10:14.000Z</published>
    <updated>2025-02-22T02:14:47.344Z</updated>
    
    <content type="html"><![CDATA[<p>【🚧 施工中】</p><p>[ ] 相关插件案例</p><span id="more"></span><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="常见词汇"><a href="#常见词汇" class="headerlink" title="常见词汇"></a>常见词汇</h2><p><strong>捆绑包（bundle）</strong></p><p>是指将多个源代码文件或模块组合成一个单独的文件或一组文件的过程</p><ul><li>减小文件数量，更有效在浏览器或者其他环境中加载和执行</li><li>减少网络请求</li></ul><p>用于部署在生产环境，一般会经过压缩和混淆</p><h2 id="rollup-概念"><a href="#rollup-概念" class="headerlink" title="rollup 概念"></a>rollup 概念</h2><ol><li>向未来兼容</li><li>除屑优化（Tree-shaking）</li></ol><p><strong>向未来兼容</strong></p><p>虽然<code>ES6</code>新特性在现代浏览器中已经稳定，但在 Nodejs 中还未完全落地</p><p>Rollup 的作用就是可以使用新的特性，然后打包成<code>CommonJS</code>或<code>AMD</code>等格式，即使以后这些特性在 Nodejs 中完整支持，现在的代码也不需要改动（向未来兼容）</p><p><strong>除屑优化</strong></p><p>静态分析导入的代码，然后去除没有使用的代码，减少打包后的体积</p><p>📄 原始文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;./utils&#x27;</span>);<span class="string">`，</span></span><br></pre></td></tr></table></figure><p>但使用的时候只用到<code>utils</code>中的<code>ajax</code>方法，打包出来会是：</p><p>📄 打包结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ajax &#125; <span class="keyword">from</span> <span class="string">&quot;./utils&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>全局安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install rollup --global</span><br></pre></td></tr></table></figure><p>本地安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install rollup --save-dev</span><br></pre></td></tr></table></figure><p><code>package.json</code>中的<code>scripts</code>节点</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup --config&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">&quot;./foo.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/foo.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">&quot;hello world!&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollup src/main.js -f cjs</span><br></pre></td></tr></table></figure><ul><li><code>-f</code>全称<code>--format</code>，指定为<em>CommonJS</em></li><li>没有指定输出文件，默认以<code>stdout</code>输出</li></ul><p>得到输出内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> main = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = main;</span><br></pre></td></tr></table></figure><p>使用<code>-o</code>指定输出文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollup src/main.js -o bundle.js -f cjs</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.mjs</span></span><br><span class="line"><span class="keyword">import</span> xxplugin <span class="keyword">from</span> <span class="string">&quot;xxplugin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">input</span>: <span class="string">&quot;src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">file</span>: <span class="string">&quot;bundle.js&quot;</span>, <span class="comment">// 还可以使用 dir</span></span><br><span class="line">    <span class="attr">format</span>: <span class="string">&quot;cjs&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">xxplugin</span>()],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>如果输出一个以上的文件，需要使用<code>output.dir</code></li></ul><p><em>CJS</em>的话，使用<code>module.exports = &#123;/* config */&#125;</code></p><p>使用<code>-c</code>（<code>--config</code>）指定配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollup -c</span><br></pre></td></tr></table></figure><ul><li>会自动读取<code>rollup.config.js</code>或<code>rollup.config.mjs</code>，如果没有，会报错</li></ul><p>可以在命令行随便覆盖配置文件的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollup -c -o bundle-2.js # `-o` 等价于 `--file`（曾用名为 &quot;output&quot;）</span><br></pre></td></tr></table></figure><p>🎇 一般会使用<code>defindConfig</code>函数，这样会有代码提示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;rollup&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="comment">/* 你的配置 */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="mjs-和-cjs"><a href="#mjs-和-cjs" class="headerlink" title="mjs 和 cjs"></a>mjs 和 cjs</h3><p>默认就是<code>cjs</code>，即使是<code>.js</code>文件。如果要使用<code>mjs</code>，需要在<code>package.json</code>中配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>使用<code>cjs</code>的话，<code>__dirname</code>可用</li></ul><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p><code>@rollup/plugin-typescript</code>插件可以让 Rollup 支持 TypeScript</p><ul><li>配置文件<code>.ts</code></li><li><code>tsconfig.json</code>中的<code>include</code>字段包含配置文件</li></ul><p>在 <em>TypeScript</em> 中支持使用<code>RollupOptions</code>类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">RollupOptions</span> &#125; <span class="keyword">from</span> <span class="string">&quot;rollup&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">RollupOptions</span> = &#123;</span><br><span class="line">  <span class="comment">/* 你的配置 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config;</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p><code>import.meta.url</code>的路径是当前文件的路径，而不是<code>process.cwd()</code>的路径</p></blockquote><h3 id="路径使用"><a href="#路径使用" class="headerlink" title="路径使用"></a>路径使用</h3><p>在 CommonJS 中，经常会用到<code>__dirname</code>，但是在 Rollup 原生 ES 模块中，是没有这个的，推荐使用<code>import.meta.url</code>来获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  ...,</span><br><span class="line">  <span class="comment">// 为 &lt;currentdir&gt;/src/some-file.js 生成绝对路径</span></span><br><span class="line">  <span class="attr">external</span>: [<span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;src/some-file.js&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="导入-pakage-json"><a href="#导入-pakage-json" class="headerlink" title="导入 pakage.json"></a>导入 pakage.json</h3><p>例如自动将依赖项标记为<code>external</code></p><p>在<code>node 17.5+</code>中，可使用导入断言</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pkg <span class="keyword">from</span> <span class="string">&quot;./package.json&quot;</span> assert &#123; <span class="attr">type</span>: <span class="string">&quot;json&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// Mark package dependencies as &quot;external&quot;. Rest of configuration</span></span><br><span class="line">  <span class="comment">// omitted.</span></span><br><span class="line">  <span class="attr">external</span>: <span class="title class_">Object</span>.<span class="title function_">keys</span>(pkg.<span class="property">dependencies</span>),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在旧版<code>node</code>中，可以使用<code>@rollup/plugin-json</code>。或者使用 node 提供的<code>createRequire</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRequire &#125; <span class="keyword">from</span> <span class="string">&quot;node:module&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">require</span> = <span class="title function_">createRequire</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>);</span><br><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="string">&quot;./package.json&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>或者直接使用<code>fs</code>模块读取文件内容</p><h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><p><a href="https://github.com/rollup/awesome" target="_blank">🌎 Awesome Rollup</a></p><h3 id="导入现有的-CommonJS-模块"><a href="#导入现有的-CommonJS-模块" class="headerlink" title="导入现有的 CommonJS 模块"></a>导入现有的 CommonJS 模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @rollup/plugin-commonjs --save-dev</span><br></pre></td></tr></table></figure><ul><li>需要 node14+</li></ul><h3 id="从-JSON-文件中导入数据"><a href="#从-JSON-文件中导入数据" class="headerlink" title="从 JSON 文件中导入数据"></a>从 JSON 文件中导入数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @rollup/plugin-json --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; version &#125; <span class="keyword">from</span> <span class="string">&quot;../package.json&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;version &quot;</span> + version);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出插件"><a href="#输出插件" class="headerlink" title="输出插件"></a>输出插件</h3><ul><li>等 Rollup 主要分析完了之后，再对代码进行别的操作，比如压缩加密之类的</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @rollup/plugin-terser --save-dev</span><br></pre></td></tr></table></figure><p>👉 对于不同的输出格式，可以使用不同的插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.mjs</span></span><br><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">&quot;@rollup/plugin-json&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> terser <span class="keyword">from</span> <span class="string">&quot;@rollup/plugin-terser&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">input</span>: <span class="string">&quot;src/main.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&quot;cjs&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">file</span>: <span class="string">&quot;bundle.min.js&quot;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&quot;iife&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;version&quot;</span>,</span><br><span class="line">      <span class="attr">plugins</span>: [<span class="title function_">terser</span>()],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">json</span>()],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>iife</code>格式是将变量放到一个自动执行的函数中，这样就不会污染全局变量了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> version = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="string">&quot;use strict&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="string">&quot;1.0.0&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;version &quot;</span> + n);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h1 id="配置选项"><a href="#配置选项" class="headerlink" title="配置选项"></a>配置选项</h1><h2 id="external"><a href="#external" class="headerlink" title="external"></a>external</h2><p>类型：<code>(string | RegExp)[]| RegExp| string| (id: string, parentId: string, isResolved: boolean) =&gt; boolean</code></p><p>需要排除在打包之外的模块</p><ul><li>这些模块不会出现在打包后的代码中</li><li>rollup 会生成一个<code>require</code>或<code>import</code>语句，让运行时去加载这些模块，以避免不必要的依赖项重复打包。</li><li>部署到生产环境时，需要确保<code>external</code>指定的这些模块已经存在</li></ul><p><strong>匹配方式：</strong></p><ol><li>外部依赖名称</li></ol><p>如果将<code>import dependency.js</code>标记为外部依赖，那么就传递<code>dependency.js</code>；<code>import &quot;dependency&quot;</code>的话，传递<code>dependency</code></p><ol start="2"><li>解析过的模块 ID（疑问）</li></ol><p>解析过的模块 ID，例如文件的绝对路径，或者<code>node_modules</code>中的模块</p><p>如果通过正则表达式<code>/node_modules/</code>匹配</p><ol start="3"><li>自定义函数</li></ol><p>三个参数可使用：<code>(id, parent, isResolved) =&gt; boolean</code></p><ul><li><code>id</code>: 模块的 ID</li><li><code>parent</code>: 引入这个模块的模块 ID</li><li><code>isResolved</code>: 模块是否已经被插件解析，比如用<code>@rollup/plugin-node-resolve</code>插件解析过了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">external</span>: <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 排除所有以 &#x27;react&#x27; 开头的模块</span></span><br><span class="line">    <span class="keyword">return</span> id.<span class="title function_">startsWith</span>(<span class="string">&quot;react&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 其他配置选项...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>类型：字符串、字符串数组、<code>&#123;[entryName]: string&#125;</code></p><p>打包的入口，例如<code>main.ts</code>、<code>index.js</code></p><p>如果传过来的是一个数组，或者是上面的第三个类型，打包的产物也是分开的，除非输出的时候指定了<code>output.file</code>。那输出的文件名会跟随<code>output.entryFileNames</code></p><h2 id="output-file-和-output-dir"><a href="#output-file-和-output-dir" class="headerlink" title="output.file 和 output.dir"></a>output.file 和 output.dir</h2><p>类型：字符串</p><p><code>output.file</code>指定输出的文件，是一个具体文件；如果需要输出多个文件，需要使用<code>output.dir</code></p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="打包-TypeScript"><a href="#打包-TypeScript" class="headerlink" title="打包 TypeScript"></a>打包 TypeScript</h2><p>需要提前安装的有<code>typescript</code> 和<code>tslib</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @rollup/plugin-typescript --save-dev</span><br></pre></td></tr></table></figure><p>插件默认使用<code>tsconfig.json</code>中的配置，也可以在配置文件中指定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// ...</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">input</span>: <span class="string">&quot;./main.ts&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">dir</span>: <span class="string">&quot;output&quot;</span>,</span><br><span class="line">    <span class="attr">format</span>: <span class="string">&quot;cjs&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">typescript</span>(&#123;</span><br><span class="line">      <span class="attr">compilerOptions</span>: &#123; <span class="attr">lib</span>: [<span class="string">&quot;es5&quot;</span>, <span class="string">&quot;es6&quot;</span>, <span class="string">&quot;dom&quot;</span>], <span class="attr">target</span>: <span class="string">&quot;es5&quot;</span> &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>其他配置错误根据报错提示修改就好了</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;【🚧 施工中】&lt;/p&gt;
&lt;p&gt;[ ] 相关插件案例&lt;/p&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://smalljerry.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="打包" scheme="https://smalljerry.cn/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>VueRouter快速手册</title>
    <link href="https://smalljerry.cn/2023/08/26/VueRouter%E5%BF%AB%E9%80%9F%E6%89%8B%E5%86%8C/"/>
    <id>https://smalljerry.cn/2023/08/26/VueRouter%E5%BF%AB%E9%80%9F%E6%89%8B%E5%86%8C/</id>
    <published>2023-08-26T07:27:20.000Z</published>
    <updated>2025-02-22T02:14:47.345Z</updated>
    
    <content type="html"><![CDATA[<p>🫡🙃</p><p>[ ] 先看官方文档，然后组织出来笔记和案例代码</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="两个标签"><a href="#两个标签" class="headerlink" title="两个标签"></a>两个标签</h2><h3 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h3><p>跳转没用<code>&lt;a&gt;</code>标签，用<code>&lt;router-link&gt;</code>标签，在不重新加载页面的情况下，改变 URL</p><p>标签属性：</p><ul><li>to：指定跳转的路径，最后编译成<code>&lt;a&gt;</code>标签的<code>href</code>属性</li><li>tag：指定渲染成什么标签，默认是<code>&lt;a&gt;</code></li><li>replace：默认是<code>false</code>，点击跳转后，会向 history 添加一个新的记录，设置为<code>true</code>，则不会添加新记录，替换当前的 history 记录</li><li>active-class：指定当前路由高亮的类名，默认是<code>router-link-active</code></li></ul><p>除了使用标签来导航(<strong>声明式导航</strong>)，还可以使用<code>router.push</code>方法，<strong>编程式导航</strong></p><h3 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h3><ul><li>路由匹配到的组件将渲染在这里</li><li>一个页面中可以有多个<code>&lt;router-view&gt;</code>标签，用于显示不同的内容</li></ul><h2 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h2><blockquote><p>官网推荐的是通过动态导入组件来实现创建路由(路由懒加载)</p></blockquote><p>📄router/index.ts: 创建路由</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory, <span class="title class_">RouteRecordRaw</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;../views/Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;../views/About.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">routes</span>: <span class="title class_">RouteRecordRaw</span>[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;About&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/profle&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Profile&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../views/Profile.vue&quot;</span>), <span class="comment">// 动态加载</span></span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>📄main.ts: 将路由当成插件挂在到 Vue 实例中</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><p>📄Home.vue：两个标签，实现路由跳转和渲染</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>📄About.vue：在<em>setup</em>中通过 hooks 实现跳转、获取路由参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>About<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; useRouter, useRoute &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> router = <span class="title function_">useRouter</span>(); <span class="comment">// options API 中的 this.$router</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> route = <span class="title function_">useRoute</span>(); <span class="comment">// options API 中的 this.$route</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">pushWithQuery</span>(<span class="params">query</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    router.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&quot;home&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">query</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        ...route.<span class="property">query</span>,</span></span><br><span class="line"><span class="language-javascript">        ...query,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在模板中可以访问到 $router 和 $route 对象，但是在 setup 中不能访问，需要通过<code>useRouter</code>和<code>useRoute</code>获取</li></ul><blockquote><p><code>router</code> 和 <code>route</code> 的区别：router 是路由实例，route 是当前路由对象</p></blockquote><blockquote><p>在<code>setup</code>中使用的时候，<code>useRouter</code>和<code>useRoute</code>必须是顶级调用，如果在方法里面调用，得到的返回值是<code>undefined</code></p></blockquote><p>router 的一些方法：</p><ul><li><code>router.push</code>：跳转到指定路由</li><li><code>router.replace</code>：跳转到指定路由，不会在 history 中添加新记录</li><li><code>router.go</code>：前进或后退指定步数</li><li><code>router.back</code>：后退</li><li><code>router.forward</code>：前进</li><li><code>router.addRoute</code>：<strong>动态添加路由</strong></li><li><code>router.removeRoute</code>：<strong>动态删除路由</strong></li><li><code>router.getRoutes</code>：获取所有路由，是一个数组</li><li><code>router.hasRoute</code>：判断是否有指定路由</li></ul><p>route 对象是响应式的，可以通过<code>watch</code>监听变化</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRoute &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">const</span> userData = <span class="title function_">ref</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当参数更改时获取用户信息</span></span><br><span class="line"><span class="title function_">watch</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> route.<span class="property">params</span>.<span class="property">id</span>,</span><br><span class="line">  <span class="title function_">async</span> (newId) =&gt; &#123;</span><br><span class="line">    userData.<span class="property">value</span> = <span class="keyword">await</span> <span class="title function_">fetchUser</span>(newId);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><blockquote><p><code>router.addRoute</code>只注册一个新路由，如果新增的路由与当前位置匹配，就得手动配置<code>router.push</code>或者<code>router.replace</code>跳转</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">addRoute</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;);</span><br><span class="line"><span class="comment">// 我们也可以使用 this.$route 或 route = useRoute() （在 setup 中）</span></span><br><span class="line">router.<span class="title function_">replace</span>(router.<span class="property">currentRoute</span>.<span class="property">value</span>.<span class="property">fullPath</span>);</span><br></pre></td></tr></table></figure><ul><li>如果需要等待新的路由显示，可以使用 <code>await router.replace()</code></li></ul><p>在导航守卫中添加路由的时候，使用<code>return</code>返回新的路由，而不是使用<code>router.push</code>或者<code>router.replace</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">hasNecessaryRoute</span>(to)) &#123;</span><br><span class="line">    router.<span class="title function_">addRoute</span>(<span class="title function_">generateRoute</span>(to));</span><br><span class="line">    <span class="comment">// 触发重定向</span></span><br><span class="line">    <span class="keyword">return</span> to.<span class="property">fullPath</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>hasNecessaryRoute()</code> 在添加新的路由后返回 <code>false</code>，以避免无限重定向。</li></ul><p>添加<em>嵌套路由</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">addRoute</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;admin&quot;</span>, <span class="attr">path</span>: <span class="string">&quot;/admin&quot;</span>, <span class="attr">component</span>: <span class="title class_">Admin</span> &#125;);</span><br><span class="line">router.<span class="title function_">addRoute</span>(<span class="string">&quot;admin&quot;</span>, &#123; <span class="attr">path</span>: <span class="string">&quot;settings&quot;</span>, <span class="attr">component</span>: <span class="title class_">AdminSettings</span> &#125;);</span><br></pre></td></tr></table></figure><p>🗑️ 删除路由有几个方式:</p><ol><li>直接使用<code>router.addRoute</code>，如果有重名的，先删除再添加</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">addRoute</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;about&quot;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;);</span><br><span class="line"><span class="comment">// 这将会删除之前已经添加的路由，因为他们具有相同的名字且名字必须是唯一的</span></span><br><span class="line">router.<span class="title function_">addRoute</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/other&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;about&quot;</span>, <span class="attr">component</span>: <span class="title class_">Other</span> &#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>通过<code>router.addRoute()</code>返回的回调函数来删除</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> removeRoute = router.<span class="title function_">addRoute</span>(routeRecord);</span><br><span class="line"><span class="title function_">removeRoute</span>(); <span class="comment">// 删除路由如果存在的话</span></span><br></pre></td></tr></table></figure><ol start="3"><li>通过<code>router.removeRoute</code>来按<em>名称</em>删除</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">addRoute</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;about&quot;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;);</span><br><span class="line"><span class="comment">// 删除路由</span></span><br><span class="line">router.<span class="title function_">removeRoute</span>(<span class="string">&quot;about&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h3><p>进入路由之后需要从服务器获取数据，一般两种方式：</p><ul><li>导航完成之后获取，先导航，然后在组件的声明周期函数中获取。这期间显示 <em>正在加载</em> z 之类的动画，然后也可以添加个<code>watch</code>以便再次获取</li><li>导航完成之前获取，在导航守卫中进行</li></ul><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><p>🌎 这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，会回到之前的 URL。</p><ul><li>点击导航标签，内部会调用<code>router.push</code>方法</li></ul><p><code>push</code>方法的参数可以是一个字符串，也可以是一个描述地址的对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串路径</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&quot;/users/eduardo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有路径的对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/users/eduardo&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由，并加上参数，让路由建立 url</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;user&quot;</span>, <span class="attr">params</span>: &#123; <span class="attr">username</span>: <span class="string">&quot;eduardo&quot;</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，结果是 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/register&quot;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&quot;private&quot;</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带 hash，结果是 /about#team</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>, <span class="attr">hash</span>: <span class="string">&quot;#team&quot;</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h3><ul><li>目的是为了根据不同的参数，渲染不同的内容</li></ul><p>动态路由匹配的参数，可以通过<code>useRoute</code>获取</p><ul><li><code>useRoute</code>返回的是响应式的对象，所以可以通过<code>watch</code>监听变化</li><li>也可以通过<code>$route.params</code>获取，<code>$route</code>不是响应式的</li></ul><p>除了<code>params</code>，还有<code>query</code>、<code>hash</code>等，<code>params</code>和<code>query</code>都是对象，<code>hash</code>是字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;User&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这些都会传递给 `createRouter`</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// 动态字段以冒号开始</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/users/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>可以传递多个参数，它们会映射到 <code>$route.params</code> 上的相应字段</p><table><thead><tr><th align="center">匹配模式</th><th align="center">匹配路径</th><th align="center">$route.params</th></tr></thead><tbody><tr><td align="center">/users/:username</td><td align="center">/users/eduardo</td><td align="center">{ username: ‘eduardo’ }</td></tr><tr><td align="center">/users/:username/posts/:postId</td><td align="center">/users/eduardo/posts/123</td><td align="center">{ username: ‘eduardo’, postId: ‘123’ }</td></tr></tbody></table><blockquote><p>路由参数变化，组件不会重新渲染，因为组件的复用，可以通过<code>watch</code>监听参数变化，重新获取数据从而更新组件。或者使用导航守卫监听参数变化</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 对路由变化做出响应...</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userData</span> = <span class="keyword">await</span> <span class="title function_">fetchUser</span>(to.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="使用正则匹配"><a href="#使用正则匹配" class="headerlink" title="使用正则匹配"></a>使用正则匹配</h4><p>常规匹配的时候，内部会使用<code>([^/]+)</code>来匹配参数</p><ul><li>至少有一个字符不是<code>/</code></li></ul><p>如果想根据参数的格式来匹配，可以使用自定义正则表达式</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// /:orderId -&gt; 仅匹配数字</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/:orderId(\\d+)&quot;</span> &#125;,</span><br><span class="line">  <span class="comment">// /:productName -&gt; 匹配其他任何内容</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/:productName&quot;</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li><code>\d</code>需要使用<code>\\d</code>来转义</li></ul><h4 id="可重复的参数"><a href="#可重复的参数" class="headerlink" title="可重复的参数"></a>可重复的参数</h4><p>将参数标记为可重复：</p><ul><li>通过<code>+</code>来表示参数可以重复，可以是一个或多个<ul><li>就是说至少有一个字符不是<code>/</code></li></ul></li><li>通过<code>*</code>来表示参数可以重复，可以是零个或多个<ul><li>就是说可以是空字符串，也就是可选的</li><li>通过<code>?</code>也可以表示可选的</li></ul></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// /:chapters -&gt;  匹配 /one, /one/two, /one/two/three, 等</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/:chapters+&quot;</span> &#125;,</span><br><span class="line">  <span class="comment">// /:chapters -&gt; 匹配 /, /one, /one/two, /one/two/three, 等</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/:chapters*&quot;</span> &#125;,</span><br><span class="line">  <span class="comment">// 可选</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/:chapters?&quot;</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>在传递的时候，对应的参数需要传递数组</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给定 &#123; path: &#x27;/:chapters*&#x27;, name: &#x27;chapters&#x27; &#125;,</span></span><br><span class="line">router.<span class="title function_">resolve</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;chapters&quot;</span>, <span class="attr">params</span>: &#123; <span class="attr">chapters</span>: [] &#125; &#125;).<span class="property">href</span>;</span><br><span class="line"><span class="comment">// 产生 /</span></span><br><span class="line">router.<span class="title function_">resolve</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;chapters&quot;</span>, <span class="attr">params</span>: &#123; <span class="attr">chapters</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>] &#125; &#125;).<span class="property">href</span>;</span><br><span class="line"><span class="comment">// 产生 /a/b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给定 &#123; path: &#x27;/:chapters+&#x27;, name: &#x27;chapters&#x27; &#125;,</span></span><br><span class="line">router.<span class="title function_">resolve</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;chapters&quot;</span>, <span class="attr">params</span>: &#123; <span class="attr">chapters</span>: [] &#125; &#125;).<span class="property">href</span>;</span><br><span class="line"><span class="comment">// 抛出错误，因为 `chapters` 为空</span></span><br></pre></td></tr></table></figure><ul><li><code>router.resolve</code>方法可以根据路由名称和参数，返回一个 URL</li></ul><p>同时可以加上正则表达式</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  <span class="comment">// 仅匹配数字</span></span><br><span class="line">  <span class="comment">// 匹配 /1, /1/2, 等</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/:chapters(\\d+)+&quot;</span> &#125;,</span><br><span class="line">  <span class="comment">// 匹配 /, /1, /1/2, 等</span></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&quot;/:chapters(\\d+)*&quot;</span> &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="Sensitive-和-strict-路由"><a href="#Sensitive-和-strict-路由" class="headerlink" title="Sensitive 和 strict 路由"></a>Sensitive 和 strict 路由</h4><p>例如，路由 <code>/users</code> 将匹配 <code>/users</code>、<code>/users/</code>、甚至 <code>/Users/</code></p><p>可通过全局配置配置：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  <span class="attr">sensitive</span>: <span class="literal">true</span>, <span class="comment">// 匹配规则是否大小写敏感？(默认值：false)</span></span><br><span class="line">  <span class="attr">strict</span>: <span class="literal">true</span>, <span class="comment">// 匹配规则是否严格模式？(默认值：false)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>也可以在路由配置中配置：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    <span class="comment">// 将匹配 /users/posva 而非：</span></span><br><span class="line">    <span class="comment">// - /users/posva/ 当 strict: true</span></span><br><span class="line">    <span class="comment">// - /Users/posva 当 sensitive: true</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/users/:id&quot;</span>, <span class="attr">sensitive</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="comment">// 将匹配 /users, /Users, 以及 /users/42 而非 /users/ 或 /users/42/</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&quot;/users/:id?&quot;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">strict</span>: <span class="literal">true</span>, <span class="comment">// applies to all routes</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>一个页面中有多个<code>&lt;router-view&gt;</code>标签，用于显示不同的内容</p><ul><li>最外层的<code>&lt;router-view&gt;</code>标签，用于显示最外层的内容，也就是父路由的内容</li><li>一个被渲染的组件里面也可以有自己的<code>&lt;router-view&gt;</code>标签，用于显示内层的内容，也就是子路由的内容</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 当 /user/:id/profile 匹配成功</span></span><br><span class="line">        <span class="comment">// UserProfile 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;profile&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">UserProfile</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 当 /user/:id/posts 匹配成功</span></span><br><span class="line">        <span class="comment">// UserPosts 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;posts&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">UserPosts</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>以 <code>/</code> 开头的嵌套路径将被视为根路径</li></ul><p>如果访问了不存在的路由，<code>&lt;router-view&gt;</code>里面什么都没有，可以通过<code>&lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;</code>来处理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;Component&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 只有在匹配到的路由有组件时，才会显示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以提供一个空的嵌套路由作为默认子路由（path 传递空字符串）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      <span class="comment">// 当 /user/:id 匹配成功</span></span><br><span class="line">      <span class="comment">// UserHome 将被渲染到 User 的 &lt;router-view&gt; 内部</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;&quot;</span>, <span class="attr">component</span>: <span class="title class_">UserHome</span> &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// ...其他子路由</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="命名路由和命名视图"><a href="#命名路由和命名视图" class="headerlink" title="命名路由和命名视图"></a>命名路由和命名视图</h2><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><p>给路由配置一个<code>name</code>属性，可以通过<code>name</code>来跳转</p><ul><li>没有硬编码的 URL，没有硬编码的 URL，所以如果想改变 /user/:id，可以随时修改路由配置，而不用在代码中搜索所有用到该路径的地方</li><li>params 的自动编码/解码。</li><li>防止你在 url 中出现打字错误。</li><li>绕过路径排序（如显示一个）/user/:id 和 /user/:username，因为后者是在前者之后定义的。</li></ul><p>params 的自动编码/解码，更方便使用参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/user/:userId&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过命名路由跳转</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;user&quot;</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="string">&quot;123&quot;</span> &#125; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;register&quot;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&quot;private&quot;</span> &#125; &#125;);</span><br></pre></td></tr></table></figure><p>或者在标签中使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;user&#x27;, params: &#123; username: &#x27;erina&#x27; &#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  User</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h3><p>给<code>&lt;router-view&gt;</code>标签添加<code>name</code>属性，可以在路由配置中指定渲染的组件。例如创建一个布局，有 sidebar (侧导航) 和 main (主内容) 两个视图</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view left-sidebar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;LeftSidebar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view main-content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view right-sidebar&quot;</span> <span class="attr">name</span>=<span class="string">&quot;RightSidebar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个路由中有多个视图，所以得使用<code>components</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">components</span>: &#123;</span><br><span class="line">        <span class="attr">default</span>: <span class="title class_">Home</span>,</span><br><span class="line">        <span class="comment">// LeftSidebar: LeftSidebar 的缩写</span></span><br><span class="line">        <span class="title class_">LeftSidebar</span>,</span><br><span class="line">        <span class="comment">// 它们与 `&lt;router-view&gt;` 上的 `name` 属性匹配</span></span><br><span class="line">        <span class="title class_">RightSidebar</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="重定向和别名"><a href="#重定向和别名" class="headerlink" title="重定向和别名"></a>重定向和别名</h2><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>通过 routes 配置来完成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>, <span class="attr">redirect</span>: <span class="string">&quot;/&quot;</span> &#125;];</span><br></pre></td></tr></table></figure><p>也可以传递一个命名的路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>, <span class="attr">redirect</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;home&quot;</span> &#125; &#125;];</span><br></pre></td></tr></table></figure><p>甚至可以传递一个方法，动态返回重定向的目标</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// /search/screens -&gt; /search?q=screens</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/search/:searchText&quot;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 方法接收目标路由作为参数</span></span><br><span class="line">      <span class="comment">// return 重定向的字符串路径/路径对象</span></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">path</span>: <span class="string">&quot;/search&quot;</span>, <span class="attr">query</span>: &#123; <span class="attr">q</span>: to.<span class="property">params</span>.<span class="property">searchText</span> &#125; &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/search&quot;</span>,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>重定向时可以不指定<code>component</code>，因为重定向的时候，没有组件需要渲染</p></blockquote><p><strong>相对重定向</strong></p><ul><li>重定向的目标也可以是相对路径，这样就不用写完整的路径了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 将总是把/users/123/posts重定向到/users/123/profile。</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/users/:id/posts&quot;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 该函数接收目标路由作为参数</span></span><br><span class="line">      <span class="comment">// 相对位置不以`/`开头</span></span><br><span class="line">      <span class="comment">// 或 &#123; path: &#x27;profile&#x27;&#125;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;profile&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><ul><li>重定向的时候<code>/home</code>会替换掉<code>/</code>，别名不会改变 URL，但是会在路由匹配时添加到 history 记录中</li></ul><p>所以应该这样配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>, <span class="attr">component</span>: <span class="title class_">Homepage</span>, <span class="attr">alias</span>: <span class="string">&quot;/home&quot;</span> &#125;];</span><br></pre></td></tr></table></figure><p>通过别名可以将 UI 结构映射到一个任意的 URL，而不受配置的嵌套结构的限制。使别名以 / 开头，以使嵌套路径中的路径成为绝对路径。你甚至可以将两者结合起来，用一个数组提供多个别名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/users&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UsersLayout</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      <span class="comment">// 为这 3 个 URL 呈现 UserList</span></span><br><span class="line">      <span class="comment">// - /users</span></span><br><span class="line">      <span class="comment">// - /users/list</span></span><br><span class="line">      <span class="comment">// - /people</span></span><br><span class="line">      &#123; <span class="attr">path</span>: <span class="string">&quot;&quot;</span>, <span class="attr">component</span>: <span class="title class_">UserList</span>, <span class="attr">alias</span>: [<span class="string">&quot;/people&quot;</span>, <span class="string">&quot;list&quot;</span>] &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="路由组件传参"><a href="#路由组件传参" class="headerlink" title="路由组件传参"></a>路由组件传参</h2><p>通过使用 props 将路由参数传递给组件</p><blockquote><p>在组件中获取路由传过来的 <em>props</em> 时，需要定义然后使用</p></blockquote><p><strong>布尔模式</strong>：将<code>props</code>设置为<code>true</code>，<code>route.params</code>会被设置为组件的 props</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span> &#125;];</span><br></pre></td></tr></table></figure><p>替换成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">  <span class="comment">// 请确保添加一个与路由参数完全相同的 prop 名</span></span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&quot;id&quot;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;&lt;div&gt;User &#123;&#123; id &#125;&#125;&lt;/div&gt;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> routes = [&#123; <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;];</span><br></pre></td></tr></table></figure><p><strong>命名视图</strong>：每个视图需要定义自己的 props</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123; <span class="attr">default</span>: <span class="title class_">User</span>, <span class="attr">sidebar</span>: <span class="title class_">Sidebar</span> &#125;,</span><br><span class="line">    <span class="attr">props</span>: &#123; <span class="attr">default</span>: <span class="literal">true</span>, <span class="attr">sidebar</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><strong>对象模式</strong>：如果 props 被设置为一个对象，它会被按原样设置为组件的 props</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/user/:id&quot;</span>,</span><br><span class="line">    <span class="attr">components</span>: &#123; <span class="attr">default</span>: <span class="title class_">User</span>, <span class="attr">sidebar</span>: <span class="title class_">Sidebar</span> &#125;,</span><br><span class="line">    <span class="attr">props</span>: &#123; <span class="attr">default</span>: <span class="literal">true</span>, <span class="attr">sidebar</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><strong>函数模式</strong>：可以创建一个函数返回 props，将参数转换为其他类型，将静态值与基于路由的值相结合等等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/search&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">SearchUser</span>,</span><br><span class="line">    <span class="attr">props</span>: <span class="function">(<span class="params">route</span>) =&gt;</span> (&#123; <span class="attr">query</span>: route.<span class="property">query</span>.<span class="property">q</span> &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a>路由元信息</h2><p>配置<code>meta</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">    <span class="comment">// 路由元信息</span></span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>数组中每个对象叫做<strong>路由记录</strong>，在嵌套路由中就分为<strong>父路由记录</strong>和<strong>子路由记录</strong></li><li>匹配到的路由暴露为<code>$route</code>对象的<code>matched</code>属性，是一个数组，包含了所有匹配到的路由记录</li></ul><p><code>$route.meta</code>方法可以获取到路由元信息，直接用<code>.</code>访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 而不是去检查每条路由记录</span></span><br><span class="line">  <span class="comment">// to.matched.some(record =&gt; record.meta.requiresAuth)</span></span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requiresAuth</span> &amp;&amp; !auth.<span class="title function_">isLoggedIn</span>()) &#123;</span><br><span class="line">    <span class="comment">// 此路由需要授权，请检查是否已登录</span></span><br><span class="line">    <span class="comment">// 如果没有，则重定向到登录页面</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">      <span class="comment">// 保存我们所在的位置，以便以后再来</span></span><br><span class="line">      <span class="attr">query</span>: &#123; <span class="attr">redirect</span>: to.<span class="property">fullPath</span> &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>TypeScript</code>中，可以通过<code>RouteMeta</code>来定义路由元信息的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typings.d.ts or router.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;vue-router&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">RouteMeta</span> &#123;</span><br><span class="line">    <span class="comment">// 是可选的</span></span><br><span class="line">    <span class="attr">isAdmin</span>?: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="comment">// 每个路由都必须声明</span></span><br><span class="line">    <span class="attr">requiresAuth</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>props</code>会提供这个吗以后 ？？🫡</p></blockquote><h2 id="不同的历史模式"><a href="#不同的历史模式" class="headerlink" title="不同的历史模式"></a>不同的历史模式</h2><p>在以往<em>vue2</em>使用的时候，使用<code>mode</code>来配置，<em>vue3</em>现在使用<code>history</code>来配置</p><p>它们之间的对应关系：</p><ul><li>mode: history | hash | abstract</li><li>history: createWebHistory | createWebHashHistory | createMemoryHistory</li></ul><p><strong>👉 hash 模式</strong></p><p>在内部传递实际 URL 之前使用了一个哈希字符（<code>#</code>）</p><p>URL 看起来就像这样：<code>http://oursite.com/#/user/id</code></p><p>它的好处是不需要后端配置，缺点是<strong>在 SEO 方面不太友好</strong></p><p><strong>👉 HTML5 模式</strong></p><p>✅ 推荐使用</p><p>URL 开起来就像这样：<code>http://oursite.com/user/id</code></p><p>它的好处是 URL 看起来更加友好，但是需要后端配置</p><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><p>导航守卫是一个函数，它会在路由发生变化时被调用</p><p>出现的地方有：全局的、单个路由独享的、组件内的</p><h3 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h3><p><code>router.beforeEach</code>方法注册一个全局前置守卫，守卫是异步的，所以跳转需要在守卫<code>resolve</code>之后才会继续</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 返回 false 以取消导航</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>回调参数：</p><ul><li><code>to</code>：即将要进入的目标路由对象</li><li><code>from</code>：当前导航正要离开的路由</li><li><code>next</code>：调用该方法后，能进入下一个钩子，不过现在可以用<code>return</code>来代替<code>next</code><ul><li><code>next(false)</code>：取消当前导航</li><li><code>next(&#39;/&#39;)</code>：跳转</li><li><code>next(&#123; path: &#39;/&#39; &#125;)</code>：跳转</li></ul></li></ul><p>现在 <em>Vue Router 4</em> 中可以使用<code>return</code>，不用<code>next()</code>，返回值可以有：</p><ul><li><code>false</code>：取消当前导航</li><li>一个路由地址：跳转到指定路由，类似于<code>router.push()</code>，也可以设置<code>replace: true</code>、<code>name: &#39;home&#39;</code>等</li><li>如果什么都没有，<code>undefined</code> 或返回 <code>true</code>，则导航是有效的，并调用下一个导航守卫</li></ul><blockquote><p>return 会比 next 好点吧应该，因为 next 必须得调用，而 return 可以不用写那么多 if else</p></blockquote><p>如果遇到了意料之外的情况，可能会抛出一个 Error。这会取消导航并且调用 <code>router.onError()</code> 注册过的回调。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="title function_">async</span> (to, <span class="keyword">from</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="comment">// 检查用户是否已登录</span></span><br><span class="line">    !isAuthenticated &amp;&amp;</span><br><span class="line">    <span class="comment">// ❗️ 避免无限重定向</span></span><br><span class="line">    to.<span class="property">name</span> !== <span class="string">&quot;Login&quot;</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// 将用户重定向到登录页面</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">&quot;Login&quot;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="全局解析守卫"><a href="#全局解析守卫" class="headerlink" title="全局解析守卫"></a>全局解析守卫</h3><p><code>router.beforeResolve</code>方法注册一个全局解析守卫，和前置导航守卫类似，但是得在 <strong>所有组件内守卫</strong>和 <strong>异步路由组件</strong> 被解析之后，解析守卫就被调用</p><p>示例：确保用户可访问到自定义<em>meta</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeResolve</span>(<span class="title function_">async</span> (to) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">requiresCamera</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">askForCameraPermission</span>();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">NotAllowedError</span>) &#123;</span><br><span class="line">        <span class="comment">// ... 处理错误，然后取消导航</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 意料之外的错误，取消导航并把错误传给全局处理器</span></span><br><span class="line">        <span class="keyword">throw</span> error;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>router.beforeResolve 是获取数据或执行任何其他操作（如果用户无法进入页面时你希望避免执行的操作）的理想位置。</p><h3 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="全局后置钩子"></a>全局后置钩子</h3><ul><li>和守卫不同的是，后置钩子没有 <code>next</code> 函数，不能改变导航本身；第三个参数可以是<code>failure</code></li><li>对于分析、更改页面标题、声明页面等辅助功能以及许多其他事情都很有用。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, failure</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!failure) <span class="title function_">sendToAnalytics</span>(to.<span class="property">fullPath</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>也就是<strong>导航故障</strong></p><h2 id="导航故障"><a href="#导航故障" class="headerlink" title="导航故障"></a>导航故障</h2><h3 id="异步等待导航结果"><a href="#异步等待导航结果" class="headerlink" title="异步等待导航结果"></a>异步等待导航结果</h3><p>导航故障是导航期间出现的任何错误或被取消的导航。当使用 <code>router-link</code> 组件时，Vue Router 会自动调用 <code>router.push</code> 来触发一次导航。</p><p>一般来说导航都会到一个新的页面，想要在导航完成之后做一些事情，可以使用<code>router.afterEach</code>，但是如果导航被取消了（或者错误之类的），就不会触发<code>router.afterEach</code></p><p>解决的办法就是使用<strong>导航的异步特性</strong>进行等待</p><p>比如等导航结束之后再关闭菜单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> router.<span class="title function_">push</span>(<span class="string">&quot;/my-profile&quot;</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">isMenuOpen</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>或者是监听导航故障，然后做点什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">onError</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">NotAllowedError</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="故障"><a href="#故障" class="headerlink" title="故障"></a>故障</h3><p>导航成功的话，<code>await</code>等到的是<code>undefined</code>，如果导航失败了，<code>await</code>等到的是一个<code>NavigationFailure</code>对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> navigationResult = <span class="keyword">await</span> router.<span class="title function_">push</span>(<span class="string">&quot;/my-profile&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (navigationResult) &#123;</span><br><span class="line">  <span class="comment">// 导航被阻止</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 导航成功 (包括重新导航的情况)</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isMenuOpen</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者是(真的吗)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> router.<span class="title function_">push</span>(<span class="string">&quot;/my-profile&quot;</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isMenuOpen</span> = <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error <span class="keyword">instanceof</span> <span class="title class_">NotAllowedError</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 意料之外的错误，取消导航并把错误传给全局处理器</span></span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>**isNavigationFailure()**</code>：来了解哪些导航被阻止了和为什么被阻止</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NavigationFailureType</span>, isNavigationFailure &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 试图离开未保存的编辑文本界面</span></span><br><span class="line"><span class="keyword">const</span> failure = <span class="keyword">await</span> router.<span class="title function_">push</span>(<span class="string">&quot;/articles/2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isNavigationFailure</span>(failure, <span class="title class_">NavigationFailureType</span>.<span class="property">aborted</span>)) &#123;</span><br><span class="line">  <span class="comment">// 给用户显示一个小通知</span></span><br><span class="line">  <span class="title function_">showToast</span>(<span class="string">&quot;You have unsaved changes, discard and leave anyway?&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>👉 <code>isNavigationFailure()</code> 第二个参数是一个字符串，可以是</p><ul><li><code>aborted</code>：导航被取消，<code>return false</code>或<code>next(false)</code></li><li><code>cancelled</code>：当前导航没完成之前，又触发了一个新的导航（在导航等待的时候，调用了个新的<code>router.push()</code>）</li><li><code>duplicated</code>：导航被阻止，因为已经在目标位置了</li></ul><p>如果第二个参数不传的话，就只是判断是否是<em>Navigation Failure</em> 🙃</p><p>👉 <code>isNavigationFailure()</code> 第一个参数，记录着路由的<code>to</code>, <code>from</code></p><h3 id="检测重定向"><a href="#检测重定向" class="headerlink" title="检测重定向"></a>检测重定向</h3><p>重定向不会阻止导航，而是创建一个新的导航，所以<code>router.push()</code>返回的是<code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> router.<span class="title function_">push</span>(<span class="string">&quot;/my-profile&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (router.<span class="property">currentRoute</span>.<span class="property">value</span>.<span class="property">redirectedFrom</span>) &#123;</span><br><span class="line">  <span class="comment">// redirectedFrom 是解析出的路由地址，就像导航守卫中的 to和 from</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过渡特效和滚动行为"><a href="#过渡特效和滚动行为" class="headerlink" title="过渡特效和滚动行为"></a>过渡特效和滚动行为</h2><h3 id="过度特效"><a href="#过度特效" class="headerlink" title="过度特效"></a>过度特效</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Component</code>是当前路由匹配到的组件</li><li><code>v-solt</code>可以用简写<code>#default=&quot;&#123; Component &#125;&quot;</code></li></ul><p>除了使用<code>v-slot</code>，还可以使用<code>&lt;router-view&gt;</code>的<code>transition</code>属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">transition</span>=<span class="string">&quot;fade&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>🙃 针对每个路由配置不同的过渡特效</p><ul><li>可以在路由配置中加入<code>meta</code></li><li>或者在全局后置钩子中加入<code>meta</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/custom-transition&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">PanelLeft</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">transition</span>: <span class="string">&quot;slide-left&quot;</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/other-transition&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">PanelRight</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">transition</span>: <span class="string">&quot;slide-right&quot;</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component, route &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用任何自定义过渡和回退到 `fade` --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">:name</span>=<span class="string">&quot;route.meta.transition || &#x27;fade&#x27;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>❔❔ Vue 可能会自动复用看起来相似的组件，从而忽略了任何过渡。可以给动态组件加上一个 <code>key</code> 属性，来提示 Vue 去强制重新渲染</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component, route &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;route.path&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="滚动行为"><a href="#滚动行为" class="headerlink" title="滚动行为"></a>滚动行为</h3><ul><li>就是在前进后退的时候，页面滚动到哪里，或者是保持原来的滚动位置</li></ul><blockquote><p>注意: 这个功能只在支持 history.pushState 的浏览器中可用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  <span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) &#123;</span><br><span class="line">    <span class="comment">// return 期望滚动到哪个的位置</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>返回一个<em>falsy</em>值，或者是一个空对象，不会发生滚动</li><li>返回<code>savedPosition</code>，会滚动到之前保存的位置</li></ul><p>位置使用的是<code>top</code>和<code>left</code>，可以是数字或者是字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) &#123;</span><br><span class="line">    <span class="comment">// 始终在元素 #main 上方滚动 10px</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// 也可以这么写</span></span><br><span class="line">      <span class="comment">// el: document.getElementById(&#x27;main&#x27;),</span></span><br><span class="line">      <span class="attr">el</span>: <span class="string">&quot;#main&quot;</span>,</span><br><span class="line">      <span class="attr">top</span>: -<span class="number">10</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你要模拟 “滚动到锚点” 的行为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">hash</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">el</span>: to.<span class="property">hash</span>,</span><br><span class="line">        <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span>, <span class="comment">// 滚得更流畅，如果浏览器支持的话</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>延迟滚动，等待页面动效完成后再滚动，可以返回个<code>Promise</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="title function_">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(&#123; <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">top</span>: <span class="number">0</span> &#125;);</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><!-- <br /><br /><br /><br /><div style="text-align: center;"><h1 style="font-size: 50px; margin-bottom: -20px;"><span style="color: #41b883;">VueRouter</span  > 快速手册 <span style="font-size: 20px; margin-left: -10px";margin-top: -20px;>⚡</span></h1><h1> 🚄 🚅 🚈 🚝 💨</h1></div><br /><br /><br /><br /> -->]]></content>
    
    
    <summary type="html">&lt;p&gt;🫡🙃&lt;/p&gt;
&lt;p&gt;[ ] 先看官方文档，然后组织出来笔记和案例代码&lt;/p&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://smalljerry.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="vue" scheme="https://smalljerry.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Typescript 快速手册 2.0</title>
    <link href="https://smalljerry.cn/2023/08/12/Typescript-%E5%BF%AB%E9%80%9F%E6%89%8B%E5%86%8C-2-0/"/>
    <id>https://smalljerry.cn/2023/08/12/Typescript-%E5%BF%AB%E9%80%9F%E6%89%8B%E5%86%8C-2-0/</id>
    <published>2023-08-12T06:25:33.000Z</published>
    <updated>2025-02-22T02:14:47.345Z</updated>
    
    <content type="html"><![CDATA[<p>努力学习 🏞️🏞️</p><span id="more"></span><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>生成配置文件 <em>ts.config.json</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p>监听文件变化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -w index.ts</span><br></pre></td></tr></table></figure><p>安装 <em>ts-node</em> 直接运行 ts 文件，不用先手动编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ts-node -g</span><br></pre></td></tr></table></figure><h2 id="类型、接口"><a href="#类型、接口" class="headerlink" title="类型、接口"></a>类型、接口</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>类型的级别（从顶级到低级排）</p><ol><li>any, unknown</li><li>Object</li><li>Number, String, Boolean</li><li>number, string, boolean</li><li>1, ‘hello’, false</li><li>never</li></ol><p>其中：</p><ul><li><code>any</code>: 任意类型，可给随便赋值</li><li><code>unknown</code>: 不知道的类型，只能给自己或者 any 赋值</li></ul><p><code>unknown</code>的对象是无法读取属性的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="built_in">unknown</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;Jerry&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line">person.<span class="property">name</span>; <span class="comment">// ❌ 这里会报错</span></span><br></pre></td></tr></table></figure><ul><li>所以<code>unknown</code>类型会比较安全，当不知道用什么类型的时候可以选它</li></ul><hr><p><code>Object</code>, <code>object</code>, <code>&#123;&#125;</code>的区别：🙃</p><p>▶️ Object：在原型链上，可包含所有</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="title class_">Object</span> = <span class="number">1</span>;</span><br><span class="line">test = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">test = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>▶️ object：代表非原始类型的类型（引用类型），比较常用于<em>泛型约束</em></p><p>▶️ {}：相当于<code>new Object</code>，和<code>Object</code>一样，<strong>但是变量不能复制</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: &#123;&#125; = &#123; <span class="attr">name</span>: <span class="string">&quot;Jerry&quot;</span> &#125;;</span><br><span class="line">person.<span class="property">age</span>; <span class="comment">// ❌ 这里会报错</span></span><br></pre></td></tr></table></figure><hr><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li>两个重名的 interface 会合并起来</li><li>多行时，属性之间可以用<code>;</code>，也可以不用</li></ul><p><code>索引签名(index signature)</code>的可能使用场景：后端返回对象，但是前端只想要其中的几个属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Fn</span> &#123;</span><br><span class="line">  (nameL <span class="built_in">string</span>): <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">fn</span>: <span class="title class_">Fn</span> = <span class="function">(<span class="params"><span class="attr">name</span>:<span class="built_in">string</span></span>) =&gt;</span> [<span class="number">1</span>]</span><br></pre></td></tr></table></figure><blockquote><p>interface 里面有唯一 id 或者函数，可以用<code>readonly</code>限制一下（在对应 key 前面加上）</p></blockquote><p><em>数组接口</em> 的几种使用方式</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name1</span>: <span class="built_in">string</span>[] = [<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Jerry&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name2</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Jerry&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Name</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">name3</span>: <span class="title class_">Name</span>[] = [&#123; <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&quot;Jerry&quot;</span> &#125;];</span><br></pre></td></tr></table></figure><p>二维数组或者更多</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name1</span>: <span class="built_in">string</span>[][] = [[&#123; <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span> &#125;], [&#123; <span class="attr">name</span>: <span class="string">&quot;Jerry&quot;</span> &#125;]];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">name2</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt;&gt; = [[&#123; <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span> &#125;], [&#123; <span class="attr">name</span>: <span class="string">&quot;Jerry&quot;</span> &#125;]];</span><br></pre></td></tr></table></figure><p>如果数组里面啥都有。直接用<code>any</code>或者用<code>元组</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="string">&quot;qaq&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">1</span>, <span class="string">&quot;qaq&quot;</span>];</span><br></pre></td></tr></table></figure><p>_剩余参数_：有属于自己的接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params">...<span class="attr">args</span>: <span class="built_in">string</span>[]</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">// 类型是 IArgments</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>就是用<code>type</code>来指定某个类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> s = <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> strArr = <span class="built_in">string</span>[];</span><br></pre></td></tr></table></figure><p><code>interface</code>不能使用联合类型，但可以使用<code>extends</code></p><ul><li>遇到重复的会合并</li></ul><p><code>type</code>没有继承，但可以使用联合类型，如<code>type s = string | number</code></p><ul><li>遇到重复的不会合并</li></ul><p>🤤<code>type</code>的别的用法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 左边的值会作为右边类型的子类型</span></span><br><span class="line"><span class="keyword">type</span> num = <span class="number">1</span> <span class="keyword">extends</span> <span class="built_in">number</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br></pre></td></tr></table></figure><ul><li>这里是 1</li><li>type 中的 extends 是包含的意思</li></ul><hr><h3 id="类型断言、交叉类型、联合类型"><a href="#类型断言、交叉类型、联合类型" class="headerlink" title="类型断言、交叉类型、联合类型"></a>类型断言、交叉类型、联合类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="keyword">function</span> (<span class="params"><span class="attr">type</span>: <span class="built_in">number</span></span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> !!<span class="keyword">type</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>!0</code> 是 <code>true</code>，再<code>!</code>就是<code>false</code>了，这时类型就从<code>number</code>变成了<code>boolean</code>，但是表达的意义还是对、错（例如：有时后端返回数字而不是 true false 的时候）</li></ul><p>联合类型，<code>interface</code>的话，使用一个<code>&amp;</code>来联合，是一个。</p><p>类型断言，就是那个<code>as</code>，可以用来欺骗 TypeScript，如果有错的话，编译的时候还是会报错的。另外的写法是<code>&lt;类型&gt;变量</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="variable language_">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">abc</span> = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><ul><li>any 可以 断言为任何类型</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add1</span>(<span class="params"><span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">const</span> add2 = (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>对于函数的一个参数：默认值 和 可选 不能一起用</p></blockquote><p>在定义函数的时候，<strong>第一个参数</strong>可以定义<code>this</code>，用来指定函数当前所处的对象</p><ul><li>在调用的时候，<code>this</code>不用传递</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Obj</span> &#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="built_in">number</span>[]</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params"><span class="variable language_">this</span>.<span class="title class_">Obj</span>, <span class="attr">num</span>:<span class="built_in">number</span></span>)=&gt;</span><span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">Obj</span> = &#123;</span><br><span class="line">  <span class="attr">user</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  <span class="title function_">add</span>(<span class="params"><span class="variable language_">this</span>.obj, <span class="attr">num</span>:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">user</span>.<span class="title function_">push</span>(num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">add</span>(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><ul><li>这个语法在 <code>js</code> 中不能使用</li></ul><p><strong>函数重载</strong></p><p>可能场景</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">user</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 如果传进来的是number类型的数组，那就添加</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findNum</span>(<span class="params"><span class="attr">add</span>: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span>[];</span><br><span class="line"><span class="comment">// 如果传进id就单个查询</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findNum</span>(<span class="params"><span class="attr">id</span>: <span class="built_in">number</span></span>): <span class="built_in">number</span>[];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findNum</span>(<span class="params"><span class="attr">ids</span>: <span class="built_in">number</span> | <span class="built_in">number</span>[]</span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> ids === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> user.<span class="title function_">filter</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> v === ids);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(ids)) &#123;</span><br><span class="line">    user.<span class="title function_">push</span>(...ids);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p><code>implements</code>：用来实现接口，约束类的结构</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Options</span> &#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="built_in">string</span> | <span class="title class_">HTMLElement</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义接口约束</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">VueClass</span> &#123;</span><br><span class="line">  <span class="attr">options</span>: <span class="title class_">Options</span>;</span><br><span class="line">  <span class="title function_">init</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> <span class="keyword">implements</span> <span class="title class_">VueClass</span> &#123;</span><br><span class="line">  <span class="attr">options</span>: <span class="title class_">Options</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">options</span>: <span class="title class_">Options</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span> = options;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">init</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>extends</code>：用来继承类</p><ul><li>extends 需要写在 implements 前面，因为 extends 会继承 implements 的接口</li><li>super 原理是父类的<code>prototype.constructor.call</code><ul><li>里面的参数是父类的参数如果有个话，需要向里面传递实参</li><li>可以直接通过<code>super.</code>来调用父类的方法或者属性</li></ul></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dom</span> &#123;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="params"><span class="attr">el</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">createElement</span>(le);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setText</span>(<span class="params"><span class="attr">el</span>: <span class="title class_">HTMLElement</span>, <span class="attr">text</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    el.<span class="property">textContent</span> = text;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Dom</span> <span class="keyword">implements</span> <span class="title class_">VueClass</span> &#123;</span><br><span class="line">  <span class="attr">options</span>: <span class="title class_">Options</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">options</span>: <span class="title class_">Options</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 调用父类的构造函数，需要写在最上面</span></span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span> = options;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">init</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">render</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他关键字：</p><ul><li><code>readonly</code>：只能在声明属性的时候或者构造函数中赋值</li><li><code>private</code>: 类内部使用</li><li><code>protected</code>: 类内部和子类使用</li><li><code>public</code>: 类内部、子类、类外部都可以使用</li><li><code>static</code>: 静态属性，可以直接通过类名来调用。<ul><li><strong>只能调用静态的属性和方法</strong>，因为不需要实例化，自然就不在实例上面了</li><li>想要数据的话，可以把数据作为函数的参数传进来</li></ul></li></ul><p><code>get</code>、<code>set</code>: 可拦截属性的读取和赋值操作</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_el</span>: <span class="built_in">string</span> | <span class="title class_">HTMLElement</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">el</span>: <span class="built_in">string</span> | <span class="title class_">HTMLElement</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_el</span> = el;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">el</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_el</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">el</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_el</span> = val;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> vue = <span class="keyword">new</span> <span class="title class_">Vue</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">vue.<span class="property">el</span> = <span class="string">&quot;span&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vue.<span class="property">el</span>);</span><br></pre></td></tr></table></figure><p><code>abstract</code>：抽象类，不能被实例化，只能被继承 🤤</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Dom</span> &#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">createElement</span>(<span class="attr">el</span>: <span class="built_in">string</span>): <span class="title class_">HTMLElement</span>;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">setText</span>(<span class="attr">el</span>: <span class="title class_">HTMLElement</span>, <span class="attr">text</span>: <span class="built_in">string</span>): <span class="built_in">void</span>;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">render</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Dom</span> &#123;</span><br><span class="line">  <span class="attr">options</span>: <span class="title class_">Options</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">options</span>: <span class="title class_">Options</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">options</span> = options;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="attr">el</span>: <span class="built_in">string</span>): <span class="title class_">HTMLElement</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">createElement</span>(el);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setText</span>(<span class="attr">el</span>: <span class="title class_">HTMLElement</span>, <span class="attr">text</span>: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    el.<span class="property">textContent</span> = text;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> el = <span class="variable language_">this</span>.<span class="title function_">createElement</span>(<span class="variable language_">this</span>.<span class="property">options</span>.<span class="property">el</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setText</span>(el, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下面实现的叫派生类，抽象类中的东西，派生类必须实现</li></ul><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>👉🙃 有规可循</p><p><strong>ECMA</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="title class_">Number</span> = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">date</span>: <span class="title class_">Date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="attr">xhr</span>: <span class="title class_">XMLHttpRequest</span> = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure><ul><li>一般是 <em>new</em> 什么，就是什么类型</li></ul><p><strong>DOM</strong></p><p>一般是什么<code>HTMLxxxElement</code></p><p>section、header 这种，会归为 <code>HTMLElement</code></p><p><code>querySelectorAll</code>这种，就是<code>NodeList</code>，如果里面是有几个的，不固定的，使用<code>NodeListOf</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">div</span>: <span class="title class_">NodeListOf</span>&lt;<span class="title class_">HTMLDivElement</span> | <span class="title class_">HTMLElement</span>&gt; =</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>BOM</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">local</span>: <span class="title class_">Storage</span> = <span class="variable language_">localStorage</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">lo</span>: <span class="title class_">Location</span> = location;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">prop</span>: <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// cookie 是字符串哇</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">coo</span>: <span class="built_in">string</span> = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br></pre></td></tr></table></figure><h2 id="元组、枚举"><a href="#元组、枚举" class="headerlink" title="元组、枚举"></a>元组、枚举</h2><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: [<span class="built_in">number</span>, <span class="built_in">boolean</span>] = [<span class="number">1</span>, <span class="literal">false</span>];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="literal">null</span>); <span class="comment">// ❌ 虽然长度过了，但是这个元组会被推断为联合类型</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">1</span>); <span class="comment">// ✅ 所以只能装上面指定的类型</span></span><br></pre></td></tr></table></figure><p>其他限制：只读、指定名称、可选</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="keyword">readonly</span> [<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>?: <span class="built_in">boolean</span>] = [<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>使用场景：例如一个<em>excel</em>表格</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">excel</span>: [<span class="built_in">string</span>, <span class="built_in">string</span>, <span class="built_in">number</span>][] = [</span><br><span class="line">  [<span class="string">&quot;小满&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">18</span>],</span><br><span class="line">  [<span class="string">&quot;小满&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">18</span>],</span><br><span class="line">  [<span class="string">&quot;小满&quot;</span>, <span class="string">&quot;女&quot;</span>, <span class="number">18</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>❔ 要获取元组中某一个的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> first = (<span class="keyword">typeof</span> arr)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>❔ 要获取它的长度</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> first = (<span class="keyword">typeof</span> arr)[<span class="string">&quot;length&quot;</span>];</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  red,</span><br><span class="line">  green,</span><br><span class="line">  blue,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">red</span>); <span class="comment">// 0 ,后面的是 1、2</span></span><br></pre></td></tr></table></figure><p>给它指定值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  red = <span class="number">1</span>,</span><br><span class="line">  green,</span><br><span class="line">  blue,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>.<span class="property">red</span>); <span class="comment">// 1 ,后面的是 2、3</span></span><br></pre></td></tr></table></figure><p>普通枚举和使用<code>const</code>定义的枚举</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  red = <span class="number">1</span>,</span><br><span class="line">  green,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  red = <span class="number">1</span>,</span><br><span class="line">  green,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会被编译成一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Test</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">Test</span>) &#123;</span><br><span class="line">  <span class="title class_">Test</span>[(<span class="title class_">Test</span>[<span class="string">&quot;red&quot;</span>] = <span class="number">1</span>)] = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">  <span class="title class_">Test</span>[(<span class="title class_">Test</span>[<span class="string">&quot;green&quot;</span>] = <span class="number">2</span>)] = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">&#125;)(<span class="title class_">Test</span> || (<span class="title class_">Test</span> = &#123;&#125;));</span><br></pre></td></tr></table></figure><p>加了<code>const</code>的，会直接编译称一个常量 ??</p><blockquote><p>但是我的编译出一个空白文档。typescript 5.1.6</p></blockquote><p>👉 反向映射 通过 value 获得 key，正向反之</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span> &#123;</span><br><span class="line">  success,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">success</span>: <span class="built_in">number</span> = <span class="title class_">Types</span>.<span class="property">success</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(success); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> key = <span class="title class_">Types</span>[success]; <span class="comment">// success</span></span><br></pre></td></tr></table></figure><h2 id="never、symbol"><a href="#never、symbol" class="headerlink" title="never、symbol"></a>never、symbol</h2><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p>永远无法到达的类型 🙃</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span> &amp; <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><ul><li><code>type A</code>就是一个<code>never</code>类型</li></ul><p>如果在联合类型中使用到<code>never</code>，是会直接被忽略掉的</p><p>常用的场景：兜底逻辑，直接代码报错，找到问题所在</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="string">&quot;唱&quot;</span> | <span class="string">&quot;跳&quot;</span> | <span class="string">&quot;rap&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">kun</span>(<span class="params"><span class="attr">value</span>: A</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (value) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;唱&quot;</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;跳&quot;</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;rap&quot;</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">error</span>: <span class="built_in">never</span> = value;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值得时候，<code>value</code>会是<code>never</code>类型</li></ul><p>这样的话代码没有问题。然后以后要改的时候，突然想在<code>A</code>中再加上类型<code>&#39;篮球&#39;</code>，这样代码就会报错，因为这时候<code>default</code>就会是一个<code>string</code>篮球。<code>string</code>无法赋值给<code>never</code></p><p>这样的话防止代码多了，都不知道错误在哪</p><h3 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h3><ul><li>可避免对象中重复出现的<em>key</em></li></ul><blockquote><p>for in、Object.keys 不能读取到 symbol</p></blockquote><p>每一个都是<strong>唯一的</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a1</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a2</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a1 == a2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>😅 就是想要得到两个相等的？？？</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;xiaoman&quot;</span>) == <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;xiaoman&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li><p>使用<code>.for</code>会在全局的<em>symbol</em>中找有没有注册过这个<em>key</em></p><ul><li>有的话<strong>直接</strong>拿来用</li><li>没有的话，先创建一个</li></ul></li></ul><p><code>Object.getOwnPropertyNames</code>：获取对象中普通的属性名</p><p><code>Object.getOwnPropertySymbols</code>：获取对象中 symbol 类型的属性</p><p><code>Reflect.ownKeys</code>：上面两个都可同时获取</p><h1 id="配置、声明"><a href="#配置、声明" class="headerlink" title="配置、声明"></a>配置、声明</h1><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p><em>ts</em> 和 <em>es6</em> 中，包含顶级<code>import</code>或者<code>export</code>的文件会被当成一个模块，反之文件里面的内容被视为全局可见</p><p>这样的话，在两个不同的文件中声明相同的变量，<strong>会报错说变量已经存在</strong></p><p>📄index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>📄index2.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>要解决这个问题，可以将这个文件变成一个模块</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>除了这个方法，还可以使用 👉<strong>命名空间</strong></p><p>📄index.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>📄index2.ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">B</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的时候，和对象一样</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A.<span class="property">a</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(B.<span class="property">a</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">B</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">C</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>命名空间还可以嵌套，在里面<code>export namespace</code></li><li>最外层导出的命名空间，通过<code>import</code>来导入，<code>import &#123;xx&#125; from &#39;./index.ts&#39;</code></li><li>还可以这样导入<code>import x = B.C</code></li></ul><p>重名的命名空间会合成一个</p><h2 id="三斜线指令"><a href="#三斜线指令" class="headerlink" title="三斜线指令"></a>三斜线指令</h2><ul><li>常见的是用到引入依赖</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference path=&quot;index2.ts&quot; /&gt;</span></span><br></pre></td></tr></table></figure><p>在编译的时候开启<code>removeCommoent</code>的选项，编译后的文件就会移除掉这个引用声明的注释</p><h2 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h2><p><code>xx.d.ts</code>文件</p><p>有些库安装的时候没有声明文件，可以尝试安装一下，也有可能是真的没有声明文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev @types/xxx</span><br></pre></td></tr></table></figure><ul><li><code>@types</code>开头是一个规范来的</li></ul><p>没有的话，自己手写一下咯。要为谁写声明文件，就以这个包的名字为声明文件的名字，比如<em>express</em> 没有声明文件，那就应该是<code>express.d.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;express&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Router</span> &#123;&#125;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="title function_">use</span>(): <span class="built_in">void</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">qa</span>(<span class="params"><span class="attr">param</span>: <span class="built_in">any</span></span>);</span><br></pre></td></tr></table></figure><blockquote><p>如果文件里面没有<code>import</code>或者<code>export</code>的话，也需要指定一下<code>export&#123;&#125;</code>来使得 ts 能把当前文件识别为模块</p></blockquote><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><p><strong>在函数中使用</strong></p><p>代码逻辑一样，但想返回不同的类型。如果没有使用泛型，那只能赋值两份代码，不方便，所以要使用动态类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func1</span>(<span class="params"><span class="attr">a</span>:<span class="built_in">number</span>, <span class="attr">b</span>:<span class="built_in">number</span></span>)<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [a, b]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func1</span>(<span class="params"><span class="attr">a</span>:<span class="built_in">string</span>, <span class="attr">b</span>:<span class="built_in">string</span></span>)<span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [a, b]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用泛型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> func&lt;T&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: T): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [a, b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="title function_">func</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">func&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 🎇 完整的调用形态应</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 都行</span></span><br><span class="line"><span class="title function_">func</span>(<span class="literal">false</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><ul><li>不用完整的调用形态，因为可以类型推断</li></ul><p>在<code>type</code>中使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A&lt;T&gt; = <span class="built_in">string</span> | <span class="built_in">number</span> | T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: A&lt;<span class="built_in">boolean</span>&gt; = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>在<code>interface</code>中使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Obj</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">name</span>: T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">Obj</span>&lt;<span class="built_in">string</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用多个泛型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> func&lt;T, K&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: K): <span class="title class_">Array</span>&lt;T | K&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [a, b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">func</span>(<span class="number">1</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>泛型也可以使用默认值：函数不传值，泛型使用默认泛型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> func&lt;T = <span class="built_in">number</span>, K = <span class="built_in">string</span>&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: K): <span class="title class_">Array</span>&lt;T | K&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [a, b];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">func</span>();</span><br></pre></td></tr></table></figure><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>对接一下请求接口的数据</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = &#123;</span><br><span class="line">  get&lt;T&gt;(<span class="attr">url</span>: <span class="built_in">string</span>): <span class="title class_">Promise</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="attr">xhr</span>: <span class="title class_">XMLHttpRequest</span> = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">      xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span><br><span class="line">      xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 0~4, 4 代表 complete</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="comment">// 必须滴</span></span><br><span class="line">      xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">code</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">axios.<span class="property">get</span>&lt;<span class="title class_">Data</span>&gt;(<span class="string">&quot;./data.json&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>传入<code>Data</code>，返回<code>Promise&lt;Data&gt;</code>，这样的话有约束，而且<code>.then()</code>也有提示</li></ul><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><p>泛型有时候太过灵活</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> add&lt;T&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: T) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b; <span class="comment">// ❌ 报错，但是这确实正确的行为</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="literal">undefined</span>, <span class="literal">undefined</span>); <span class="comment">// 这两个肯定是不能相加的</span></span><br></pre></td></tr></table></figure><p>加上约束</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> add&lt;T <span class="keyword">extends</span> <span class="built_in">number</span>&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: T) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Len</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> fn&lt;T <span class="keyword">extends</span> <span class="title class_">Len</span>&gt;(<span class="attr">a</span>: T) &#123;</span><br><span class="line">  a.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&quot;111&quot;</span>); <span class="comment">// ✅</span></span><br><span class="line"><span class="title function_">fn</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// ✅</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="number">123</span>); <span class="comment">// ❌</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="literal">false</span>); <span class="comment">// ❌</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xm&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj 约束为 object 类型，key 约束为 obj 中的某一个 key 值</span></span><br><span class="line"><span class="keyword">function</span> ob&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">key</span>: K) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ob</span>(obj, <span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>keyof</code>是将对象的类型的<em>key</em> 作为一个联合类型</p><ul><li>注意不是直接作用在对象身上，因为对象是对<em>值</em> 的引用，而<code>keyof</code>的作用对象是<em>类型</em></li></ul><p>可以这样使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Key</span> = keyof <span class="keyword">typeof</span> obj;</span><br></pre></td></tr></table></figure><p>🙃<code>keyof</code>的高级用法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Data</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">gender</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要使 Data 中的每一个都变成可选，除了给每个加上 ? ，还可以这样</span></span><br><span class="line"><span class="comment">// 类似于 for(let key in obj)</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Options</span>&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt; = &#123;</span><br><span class="line">  [<span class="title class_">Key</span> <span class="keyword">in</span> keyof T]?: T[<span class="title class_">Key</span>];</span><br><span class="line">  <span class="comment">// readonly [Key in keyof T]: T[Key]</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = <span class="title class_">Options</span>&lt;<span class="title class_">Data</span>&gt;;</span><br></pre></td></tr></table></figure><p>这时候<code>type B</code>会是</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> B = &#123;</span><br><span class="line">  <span class="attr">message</span>?: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="attr">code</span>?: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="attr">name</span>?: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="attr">age</span>?: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line">  <span class="attr">gender</span>?: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其实使用<code>Partial</code>也可以得到相同的结果</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> C = <span class="title class_">Partial</span>&lt;<span class="title class_">Data</span>&gt;;</span><br></pre></td></tr></table></figure><p><code>readonly</code>的话，就使用<code>Readonly</code></p><h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><blockquote><p>需要在配置文件中打开 <code>experimentalDecorators</code>和<code>emitDecoratorMetadata</code></p></blockquote><p>装饰器有：</p><ol><li>类装饰器</li><li>属性装饰器</li><li>参数装饰器</li><li>方法装饰器</li><li>装饰器工厂</li></ol><p>类装饰器，在不破坏原有内容的情况下（或者说不知道原来有什么的情况下）增加内容</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Base</span>: <span class="title class_">ClassDecorator</span> = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">  target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">xiaoman</span> = <span class="string">&quot;小满&quot;</span>;</span><br><span class="line">  target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">fn</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是憨憨&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Base</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Http</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> http = <span class="keyword">new</span> <span class="title class_">Http</span>() <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">http.<span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><ul><li><code>target</code>是一个构造函数</li></ul><p>还有另一种写法是不用<code>@Base</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Http</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> http = <span class="keyword">new</span> <span class="title class_">Http</span>() <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line"><span class="title class_">Base</span>(<span class="title class_">Http</span>);</span><br></pre></td></tr></table></figure><p>❔❔ 如果要向<code>@Base</code>传递参数呢</p><ul><li><code>target</code>是默认存在的，好像事件监听的事件对象一样</li><li>可以使用<em>函数柯里化</em> 事先参数传递</li></ul><p>就是再套一层函数</p><ul><li>外面一层函数接收<code>@Base</code>传过来的参数</li><li>里一层函数接收默认存在的参数</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Base</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">fn</span>: <span class="title class_">ClassDecorator</span> = <span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">    target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">xiaoman</span> = <span class="string">&quot;小满&quot;</span>;</span><br><span class="line">    target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">fn</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是憨憨&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> fn;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Base</span>(<span class="string">&quot;xb&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Http</span> &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这一招叫做：装饰器工厂、函数柯里化、闭包</li></ul><p>函数装饰器</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Get</span> = (<span class="params"><span class="attr">url</span>: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">fn</span>: <span class="title class_">MethodDecorator</span> = <span class="function">(<span class="params">target, key, <span class="attr">descriptor</span>: <span class="title class_">PropertyDescriptor</span></span>) =&gt;</span> &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(url).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      descriptor.<span class="title function_">value</span>(res.<span class="property">data</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> fn;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Base</span>(<span class="string">&quot;xb&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Http</span> &#123;</span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&quot;https://xxxx.com/&quot;</span>)</span><br><span class="line">  <span class="title function_">getList</span>(<span class="params"><span class="attr">data</span>: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有三个参数，装饰器自己的</li></ul><p>啥也不用做，直接调用<code>@Get()</code>传递个地址过去就行了</p><h1 id="类型兼容"><a href="#类型兼容" class="headerlink" title="类型兼容"></a>类型兼容</h1><p>鸭子类型：两个类型有共通的地方</p><p>协变：子类型可以完全覆盖掉主类型（子类型可以多内容，但是不能少内容）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主类型</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类型</span></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: A = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xb&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: B = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xh&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;man&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 协变 （可以赋值）</span></span><br><span class="line">a = b;</span><br></pre></td></tr></table></figure><p>逆变：一般在函数上出现（和协变是反过来的），类似于<code>b = a</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fna</span> = (<span class="params"><span class="attr">params</span>: A</span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fnb</span> = (<span class="params"><span class="attr">params</span>: B</span>) =&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line">fna = fnb; <span class="comment">// ❌</span></span><br><span class="line">fnb = fna; <span class="comment">// ✅</span></span><br></pre></td></tr></table></figure><ul><li>（双向协变）配置文件开启<code>strictFunctionTypes</code>设为<code>false</code>，第一个赋值可以成立</li><li>第二个之所以成立，因为赋值完了后<code>fnb</code>就是<code>fna</code></li></ul><h1 id="utility"><a href="#utility" class="headerlink" title="utility"></a>utility</h1><p><code>Record&lt;Keys, Type&gt;</code></p><p>组建一个对象类型，这个对象类型的 key 是 传入的 <em>Keys</em> ，对象的值是传入的 <em>Type</em></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">CatInfo</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">breed</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">CatName</span> = <span class="string">&quot;miffy&quot;</span> | <span class="string">&quot;boris&quot;</span> | <span class="string">&quot;mordred&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">cats</span>: <span class="title class_">Record</span>&lt;<span class="title class_">CatName</span>, <span class="title class_">CatInfo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">miffy</span>: &#123; <span class="attr">age</span>: <span class="number">10</span>, <span class="attr">breed</span>: <span class="string">&quot;Persian&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">boris</span>: &#123; <span class="attr">age</span>: <span class="number">5</span>, <span class="attr">breed</span>: <span class="string">&quot;Maine Coon&quot;</span> &#125;,</span><br><span class="line">  <span class="attr">mordred</span>: &#123; <span class="attr">age</span>: <span class="number">16</span>, <span class="attr">breed</span>: <span class="string">&quot;British Shorthair&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cats.<span class="property">boris</span>;</span><br></pre></td></tr></table></figure><hr><p>整理来源：📄 我的笔记、📺 bilibili<code>小满zs</code></p><!--<div style="display: flex;"><span style="margin:auto; font-size: 70px; color: white; background-color: #3178c6;padding: 20px">Typescript <span style="font-size: 0.7em;color: #282c34">快速手册 2.0</span></span></div> -->]]></content>
    
    
    <summary type="html">&lt;p&gt;努力学习 🏞️🏞️&lt;/p&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://smalljerry.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ts" scheme="https://smalljerry.cn/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript快速手册</title>
    <link href="https://smalljerry.cn/2021/10/07/TypeScript%E5%BF%AB%E9%80%9F%E6%89%8B%E5%86%8C/"/>
    <id>https://smalljerry.cn/2021/10/07/TypeScript%E5%BF%AB%E9%80%9F%E6%89%8B%E5%86%8C/</id>
    <published>2021-10-07T03:07:15.000Z</published>
    <updated>2025-02-22T02:14:47.344Z</updated>
    
    <content type="html"><![CDATA[<p>一些基本使用笔记<br>一些注意点，不全</p><span id="more"></span><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li>在<em>ts</em>文件中如果没有<code>typescript</code>语法代码，是可以直接在<em>html</em>文件中引用并且运行的</li><li>ts 中使用的关键字<code>let</code>在编译成 js 的时候会变成<code>var</code></li></ol><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>如果声明变量的时候直接赋值，TS 可以自动检测变量的类型（即使不指定）</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xm = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line"><span class="comment">// 此时 xm 的类型是 string，赋予其他类型的值会报错</span></span><br><span class="line">xm = <span class="number">18</span>;  ❌</span><br></pre></td></tr></table></figure><p>可以在声明的时候使用字面量指定类型，后面就不能改了（类似于常量）</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">xm</span>: <span class="string">&#x27;xm&#x27;</span>;</span><br><span class="line">xm = <span class="string">&#x27;zs&#x27;</span>;  ❌</span><br><span class="line">xm = <span class="string">&#x27;xm&#x27;</span>;  ✔️</span><br></pre></td></tr></table></figure><p>可以使用 <code>|</code>来声明多个类型（联合类型）</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">xm</span>: <span class="string">&#x27;male&#x27;</span> | <span class="string">&#x27;female&#x27;</span></span><br><span class="line">xm = <span class="string">&#x27;male&#x27;</span></span><br><span class="line">xm = <span class="string">&#x27;female&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">zs</span>: <span class="built_in">boolean</span> | <span class="built_in">string</span></span><br><span class="line">zs = <span class="literal">true</span></span><br><span class="line">zs = <span class="string">&#x27;zs&#x27;</span></span><br></pre></td></tr></table></figure><p>在声明变量时不指定类型，则默认是<code>any</code>类型，也可以指定<code>any</code>类型，但是不好。必要时，使用<code>unknown</code>类型来代替<code>any</code>类型</p><p><code>unknown</code>在定义的时候和<code>any</code>一样，可以随便值，<strong>但是不能将自己的值直接赋给别的变量</strong>（除非对方是 any）。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">xm</span>: <span class="built_in">unknown</span>;</span><br><span class="line">xm = <span class="number">18</span>;  xm = <span class="literal">true</span>;  xm = <span class="string">&#x27;xm&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">zs</span>: <span class="built_in">string</span>;</span><br><span class="line">zs = xm;  ❌</span><br><span class="line"><span class="comment">// 对于unknown类型，要想赋值，先进行判断</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> xm === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    zs = xm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>类型断言</strong>，用来告诉解析器变量的实际类型。有两种写法：</p><ol><li>变量 as 类型</li><li>&lt;类型&gt;变量</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zs = xm <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line">zs = &lt;<span class="built_in">string</span>&gt;xm</span><br><span class="line"><span class="comment">// 如果两个变量的类型不一样，则报错</span></span><br></pre></td></tr></table></figure><ul><li>在<code>jsx</code>中只能使用<code>as</code>关键字</li></ul><p><code>never</code>类型，表示永远不会有返回值（如抛出异常）</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">err</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;错错错...&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>变量也可以是<code>never</code>，即使是<code>any</code>也不能赋值给<code>never</code></li><li>和<code>void</code>的区别是，<code>void</code>是没有返回值，不过可以做其他事情，<code>never</code>里面是无法到达的事情，如死循环</li></ul><p>在声明对象的时候可以指定里面的属性，属性后面加<code>?</code>表示当前属性可选</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">xm</span>: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>?: <span class="built_in">number</span>&#125;;</span><br><span class="line">xm = &#123;<span class="attr">name</span>: <span class="string">&#x27;xm&#x27;</span>&#125;;  ✔️</span><br></pre></td></tr></table></figure><p>也可以指定任意类型的属性</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">xm</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; [<span class="attr">prop</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;</span><br><span class="line">xm = &#123; <span class="attr">name</span>: <span class="string">&#x27;xm&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>数组类型</strong>，有两种方式：</p><ol><li>变量: 类型[]</li><li>变量: Array&lt;类型&gt;</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">array_1</span>: <span class="built_in">string</span>[]</span><br><span class="line">array = [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;xm&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">array_2</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;</span><br><span class="line">array_2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><strong>元组</strong>(tuple)，固定长度的数组：</p><ol><li>变量: [类型, 类型, 类型]</li></ol><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">array</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">boolean</span>]</span><br><span class="line">array = [<span class="string">&#x27;xm&#x27;</span>, <span class="number">18</span>, <span class="literal">true</span>]</span><br></pre></td></tr></table></figure><p><strong>枚举</strong>(enum)：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line">  <span class="title class_">Male</span> = <span class="number">0</span>,</span><br><span class="line">  <span class="title class_">Female</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">xm</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="title class_">Gender</span>: <span class="title class_">Gender</span> &#125;</span><br><span class="line">xm = &#123; <span class="attr">name</span>: <span class="string">&#x27;xm&#x27;</span>, <span class="attr">grnder</span>: <span class="title class_">Gender</span>.<span class="property">Male</span> &#125;</span><br></pre></td></tr></table></figure><p>合并</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">xm</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125; &amp; &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;</span><br><span class="line">xm = &#123; <span class="attr">name</span>: <span class="string">&#x27;xm&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br></pre></td></tr></table></figure><p>类型别名，用户可以创建自己想要的类型，然后给它取个名字便于调用</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myType = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: myType;</span><br><span class="line">age = <span class="number">1</span>;  ✔️</span><br><span class="line">age = <span class="number">6</span>;  ❌</span><br></pre></td></tr></table></figure><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>其中主要有：<em>属性</em> 和<em>方法</em></p><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><p>直接定义的属性是实例属性，需要实例化后访问。<code>static</code>为静态属性，通过类直接访问。<code>readonly</code>表示只读属性，可以单独使用，也可在<code>static</code>后面使用</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;xm&#x27;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">gender</span>: <span class="built_in">string</span> = <span class="string">&#x27;male&#x27;</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="attr">status</span>: <span class="built_in">string</span> = <span class="string">&#x27;good&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> xm = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">xm.<span class="property">name</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">age</span></span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>之所以称为构造函数，是因为实在对象创建时（实例化）调用的</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: bumber</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 其中this指向当前实例</span></span><br><span class="line">    ;(<span class="variable language_">this</span>.<span class="property">name</span> = name), (<span class="variable language_">this</span>.<span class="property">age</span> = age)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;wang~wang~~&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog_1 = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;tom&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LittleDog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Dog</span> &#123;</span><br><span class="line">  <span class="comment">// 重写</span></span><br><span class="line">  <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hahaha&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>继承会获得父类的所有属性和方法</li><li>在子类中有和父类相同名字的方法，就叫做<strong>重写</strong></li></ul><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>在继承的时候，子类想继承父类的属性，又想添加另外的属性，就得用<code>super()</code>来<strong>调用</strong>父类的构造函数，并且传入想要继承的属性</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LittleDog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Dog</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">kind</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">kind</span> = kind</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p><code>abstract</code>开头，抽象类<strong>不能</strong>用于创建对象，专门用来被继承的</p><p>抽象类中有抽象方法，抽象方法必须在抽象类中</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">hello</span>():<span class="built_in">void</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;wangwang&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;miaomiao&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fish = <span class="keyword">new</span> <span class="title class_">Animal</span>();  ❌</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>();  ✔️</span><br><span class="line">dog.<span class="title function_">hello</span>();</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口用来定义一个类的结构，规定里面要包含的内容。接口可以重复声明，不能有实际的值</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> theInter &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> theInter &#123;</span><br><span class="line">  <span class="attr">gender</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">hello</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: theInter = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;xm&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">  <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Male</span> <span class="keyword">implements</span> theInter &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">gender</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>, <span class="attr">gender</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    ;(<span class="variable language_">this</span>.<span class="property">name</span> = name), (<span class="variable language_">this</span>.<span class="property">age</span> = age)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在对象中用接口时，接口可以当成一个类型，这是<code>interface</code>关键字可以和<code>type</code>关键字互换</li></ul><h2 id="属性封装"><a href="#属性封装" class="headerlink" title="属性封装"></a>属性封装</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">_name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_age</span>: <span class="built_in">number</span> <span class="comment">// 只能在类内部访问</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">_gender</span>: <span class="built_in">string</span> <span class="comment">// 在类内部和其子类内部访问</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// getter、setter存取器</span></span><br><span class="line">  <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setName</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 TS 中，存取器有另外的写法</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">set</span> <span class="title function_">name</span>(<span class="params"><span class="attr">value</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写，在实例化之后，和调用属性时一样的写法</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xm = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;xm&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">xm.<span class="property">_name</span> <span class="comment">// 可以获得name属性，通过实例属性</span></span><br><span class="line">xm.<span class="property">name</span> <span class="comment">// 可以后的name属性，通过存取器</span></span><br><span class="line">xm.<span class="property">name</span> = <span class="string">&#x27;zs&#x27;</span> <span class="comment">// 设置属性值，通过存取器</span></span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>在声明函数或者时类的时候，如果<em>不知道用什么类型</em>，就可以使用泛型。等调用的时候再根据参数指定</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fn&lt;T&gt;(<span class="attr">a</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result_1 = <span class="title function_">fn</span>(<span class="number">10</span>) <span class="comment">// 不指定泛型，TS自动检测，此时为number</span></span><br><span class="line"><span class="keyword">let</span> result_2 = fn&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;hello&#x27;</span>) <span class="comment">// 指定类型，string</span></span><br></pre></td></tr></table></figure><p>可以有多个泛型</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> fn&lt;T, U&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: U): T &#123;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型还可以继承于接口</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Inter</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> fn&lt;T <span class="keyword">extends</span> <span class="title class_">Inter</span>&gt;(<span class="attr">a</span>: T): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a.<span class="property">length</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">name</span>: T</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myclass = <span class="keyword">new</span> <span class="title class_">MyClass</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;xm&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;一些基本使用笔记&lt;br&gt;一些注意点，不全&lt;/p&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://smalljerry.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="js" scheme="https://smalljerry.cn/tags/js/"/>
    
    <category term="ts" scheme="https://smalljerry.cn/tags/ts/"/>
    
  </entry>
  
  <entry>
    <title>前端里的各种位置</title>
    <link href="https://smalljerry.cn/2021/09/09/%E5%89%8D%E7%AB%AF%E9%87%8C%E7%9A%84%E5%90%84%E7%A7%8D%E4%BD%8D%E7%BD%AE/"/>
    <id>https://smalljerry.cn/2021/09/09/%E5%89%8D%E7%AB%AF%E9%87%8C%E7%9A%84%E5%90%84%E7%A7%8D%E4%BD%8D%E7%BD%AE/</id>
    <published>2021-09-09T12:07:40.000Z</published>
    <updated>2025-02-22T02:14:47.356Z</updated>
    
    <content type="html"><![CDATA[<p>元素所处位置，鼠标事件位置</p><span id="more"></span><h1 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h1><h2 id="基础属性"><a href="#基础属性" class="headerlink" title="基础属性"></a>基础属性</h2><p><strong>scrollTop</strong>：<code>Element.scrollTop</code> 属性可以<code>获取或设置</code>一个元素的内容垂直滚动的<strong>像素</strong>数。</p><p><strong>scrollLeft</strong>：<code>Element.scrollLeft</code> 属性可以<code>读取或设置</code>元素滚动条到元素左边的距离。</p><p><strong>offsetParent</strong>：<code>只读</code>，返回一个指向最近的包含该元素的<em>定位元素</em> 或者最近的<code>table, td, th, body</code>元素。当元素<code>display: none;</code>的时候，offsetParent 返回<code>null</code>。</p><p><strong>offsetTop</strong>：<code>只读</code>，返回当前元素相对于其<code>offsetParent</code>元素顶部内边距的距离。</p><p><strong>offsetLeft</strong>：<code>只读</code>，返回当前元素<em>左上角</em> 相对于<code>offsetParent</code>左边界的距离。</p><p><strong>offsetWidth</strong>：<code>只读</code>，返回一个元素的<em>布局宽度</em>。里面包含 border、padding、scrollbar、width。</p><p><strong>offsetHeight</strong>：<code>只读</code>，返回布局高度。里面<strong>不</strong>包含<code>::before、::after</code>等伪类元素</p><p><strong>clientWidth</strong>：<code>只读</code>，返回元素<em>内部宽度</em> ，包括 padding，不包括 border、margin 和 scrollbar。<span style="color: orange;">内联元素以及没有 CSS 样式的元素的 clientWidth 属性值为 0。</span></p><p><strong>clientHeight</strong>：<code>只读</code>，<span style="color: orange;">clientHeight 可以通过 CSS height + CSS padding - 水平滚动条高度 (如果存在)来计算</span></p><p><strong>clientLeft</strong>：<code>只读</code>，一个元素的左边框的宽度。如果元素的文本方向是从右到左，并且由于内容溢出导致左边出现了一个垂直滚动条，则该属性包括滚动条的宽度。<code>clientLeft</code> 不包括左外边距和左内边距。<code>display: inline;</code>时，这个值为 0。</p><p><strong>clientTop</strong>：<code>只读</code>，顶部边框宽度，同上。</p><p>**getBoundingClientRect()**：方法返回元素的大小及其相对于视口的位置。如果是标准盒子，元素的尺寸等于<code>width/height</code> + <code>padding</code> + <code>border-width</code>的总和。如果<code>box-sizing: border-box</code>，元素的的尺寸等于 <code>width/height</code>。</p><h2 id="Element-getBoundingClientRect"><a href="#Element-getBoundingClientRect" class="headerlink" title="Element.getBoundingClientRect()"></a>Element.getBoundingClientRect()</h2><ul><li>返回一个 <code>DOMRect</code> 对象，提供了元素的大小，及其相对于视口的位置。</li></ul><p>里面有<strong>只读</strong>属性：（以<strong>像素</strong>为单位）</p><ul><li><code>x</code>或者<code>left</code></li><li><code>y</code>或者<code>top</code></li><li><code>width</code>、<code>height</code>：包含了<code>padding</code>和<code>border-width</code>（<code>border-box</code>除外）</li><li><code>right</code>：<code>x + width</code></li><li><code>bottom</code>：<code>y + height</code></li></ul><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p><strong>clientX</strong>：是<code>只读</code>属性，事件发生时应用客户端区域（浏览器）的水平<strong>坐标</strong></p><p><strong>clientY</strong>：<code>只读</code>，垂直坐标</p><p><strong>screenX</strong>：鼠标事件的<code>只读</code>属性，鼠标在全局（屏幕）中的水平坐标（偏移量）。这里的屏幕指的是<em>整个屏幕</em>，即使浏览器窗口缩小，也还是整个屏幕。</p><p><strong>screenY</strong>：<code>只读</code>，竖直坐标。</p><p><strong>pageX</strong>：<code>只读</code>，鼠标事件返回的相对于整个文档的<em>X 坐标</em>（单位：px） 。如果有滚动条，要加上滚动条的值。</p><p><strong>pageY</strong>：<code>只读</code>，同上 pageX。</p><h2 id="ResizeObserver"><a href="#ResizeObserver" class="headerlink" title="ResizeObserver"></a>ResizeObserver</h2><ul><li>监听<strong>元素</strong>的边界尺寸变化</li></ul><p><code>ResizeObserver.observe()</code>：对指定元素仅从监听</p><p><code>ResizeObserver.disconnect(target, options)</code>：取消所有监听</p><ul><li><code>options</code>：<code>box</code>属性，指定监听的盒子类型，<code>content-box</code>（默认）或者<code>border-box</code>或者<code>device-pixel-content-box</code>（设备像素盒子）</li></ul><p><code>ResizeObserver.unobserve(target)</code>：取消指定元素的监听</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;元素所处位置，鼠标事件位置&lt;/p&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://smalljerry.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="js" scheme="https://smalljerry.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>移动web开发</title>
    <link href="https://smalljerry.cn/2021/07/21/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/"/>
    <id>https://smalljerry.cn/2021/07/21/%E7%A7%BB%E5%8A%A8web%E5%BC%80%E5%8F%91/</id>
    <published>2021-07-21T08:47:40.000Z</published>
    <updated>2025-02-22T02:14:47.356Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍移动端 web 开发所需要的基础知识</p><p>好好学习。<span id="more"></span></p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="lt-meta-gt-视口标签"><a href="#lt-meta-gt-视口标签" class="headerlink" title="&lt;meta&gt;视口标签"></a><code>&lt;meta&gt;</code>视口标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>添加视口标签之前，页面会有拖动条，这是默认的页面大小。添加视口标签之后，页面就会自动适应设备的大小，拖动条也不会出现了。</p><h2 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h2><p>单位<code>px</code>和真实的物理像素（分辨率）在移动端是有一定程度的偏差的，往往是<code>1px</code>对应多个像素点</p><p>例：需要在屏幕显示<code>50px</code>的图片，放到手机屏幕可能会被放大到<code>100px</code>，这样图片就会模糊。准备一张<code>100px</code>的图片，然后手动调节这张图片的 CSS 样式为<code>50px</code>，以此解决模糊。</p><p>不仅是二倍图，叶可能是三倍图、四倍图。</p><p>对于背景图片的设置，使用<code>background-size</code>属性，其值除了数值单位，还有<em>cover</em>和<em>contain</em>。后两者的区别是<em>cover</em>铺满整个容器，<em>contain</em>的宽或者高铺满容器后就停止缩放。</p><h2 id="开发选择"><a href="#开发选择" class="headerlink" title="开发选择"></a>开发选择</h2><ol><li>单独的移动端页面：为移动端另外写代码（推荐），通过打开网站的设备来跳转到不同的页面。</li><li>响应式页面兼容移动端：一套代码包含桌面和移动端（不太推荐），通过判断屏幕的宽度来改变样式。</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>CSS 初始化——<a href="https://github.com/necolas/normalize.css/">normalize.css</a>。<code>npm install --save normalize.css</code></li><li>可以使用<code>box-sizing</code>属性解决一些问题，省去减去<code>margin、padding</code>的麻烦</li><li>对于 Safari 中的标准，清除类似于<code>&lt;a&gt;</code>点击的高亮效果：<code>-webkit-tap-heighlight-color: transparent</code>（非标准）</li><li>对于 Safari 上按钮和输入框自定义样式添加前提：<code>-webkit-apperance: none</code>（实验中的功能）</li><li>对于 Safari 上，如<code>&lt;a&gt;</code>，按住后会弹出这个跳转的预览窗口，<code>-webkit-touch-callout: none</code>可以关闭它（非标准）(仅支持 Safari)</li></ol><p><strong>单独页面常见布局</strong>：流式布局、flex 布局、less+rem+媒体查询布局、混合布局<br><strong>响应式页面兼容</strong>：媒体查询、Bootsrap 之类的框架</p><h1 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h1><ul><li>也称<em>百分比布局</em>、<em>非固定像素布局</em></li><li>一般会使用到<code>float</code>、<code>position</code></li></ul><h2 id="基础样式"><a href="#基础样式" class="headerlink" title="基础样式"></a>基础样式</h2><p>基本宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">640px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后接下来的内容的宽度都是使用<code>%</code>作为单位。</p><p><strong>例 1</strong>，两边绿色的是固定位置固定大小的按钮，中间的是搜索框，长度可以随着屏幕尺寸的改变而改变</p><p><img src="https://z3.ax1x.com/2021/07/22/WBaSR1.png" alt="搜索框案例"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 中间的是标准流就行，会铺满。然后设置margin或者padding调节左右间隙的距离 */</span></span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注：固定定位的盒子要有个宽度才行。</li></ul><p><strong>例 2</strong>，一个导航栏里面有 10 个图标，每行 5 个。可以直接使用<code>&lt;nav&gt;</code>和<code>&lt;a&gt;</code>，<code>&lt;a&gt;</code>里面放具体内容</p><p><img src="https://z3.ax1x.com/2021/07/25/W2itdP.png" alt="例2"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h2><ul><li>以<code>background</code>的形式存在</li></ul><p>对于二倍精灵图，在图片编辑工具中将精灵图<strong>等比</strong>缩放到原来的<strong>一半</strong>，然后根据大小，测量出所需图标在整个精灵图中所处的坐标，如：<code>background: url(./img/jl.png) no-repeat 100px 0</code>，后面的就是坐标。</p><blockquote><p>在图片编辑器中缩放只是作为坐标参考，不要保存缩放后的图片。</p></blockquote><p>最后，还要使用<code>background-size</code>来在 CSS 层面缩小精灵图为原来的<strong>一半</strong></p><h1 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h1><ul><li>任何一个容器都可以使用<code>flex</code>布局</li><li>父盒子设置为<code>flex</code>的时候，<code>float、clear、vertical-align</code>失效</li></ul><p><strong>常见父项属性</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>flex-direction</td><td>设置<strong>主轴</strong>的方向</td></tr><tr><td>justify-content</td><td>设置<span style="color: orange;">主轴</span>上子元素排列方式</td></tr><tr><td>flex-wrap</td><td>设置子元素是否换行</td></tr><tr><td>align-content</td><td>设置<span style="color: orange;">侧轴</span>上子元素排列方式（多行）</td></tr><tr><td>align-items</td><td>设置侧轴上子元素排列方式（单行）</td></tr><tr><td>flex-flow</td><td>相当于同时设置了 flex-direction 和 flex-wrap</td></tr></tbody></table><ul><li>元素是跟着主轴来排列的，所以先知道是哪一条</li></ul><p><code>flex-wrap</code>，是否换行。各个子元素在主轴方向上的总长度<strong>大于</strong>父元素的长度，使用<code>wrap</code>之后会换行（并且一行或一列显示多少个，取决于子元素的长度）。如果不使用，子元素的宽度就会等比缩小，挤在一行或是一列。</p><p><code>align-item</code>，其中<code>stretch</code>值是拉伸效果，前提是子元素<strong>没有设置高度</strong></p><p><code>align-content</code>，多了<code>space-around、space-between</code>，可以设置上一行置顶，下一行在最底（前提是要有换行）。<code>align-item</code>是不行的，因为只能操作一行。</p><p><strong>常见子项属性</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>flex</td><td>子项占的份数（不仅能左右还能上下，所以比百分比好用些）</td></tr><tr><td>align-self</td><td>控制子项自己在侧轴的排列方式（某单个）</td></tr><tr><td>order</td><td>属性定义子项的排列顺序（前后排序，默认是 0，可以为负数）</td></tr></tbody></table><p><code>flex</code>的值可以为百分数。</p><h2 id="基础样式-1"><a href="#基础样式-1" class="headerlink" title="基础样式"></a>基础样式</h2><p>对于顶固的搜索框，应该是固定定位的，并且固定定位位置与父元素无关，是以屏幕为准的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">  <span class="comment">/* 固定的盒子要有宽度 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">540px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>📋 参考：黑马程序员</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单介绍移动端 web 开发所需要的基础知识&lt;/p&gt;
&lt;p&gt;好好学习。</summary>
    
    
    
    <category term="前端学习" scheme="https://smalljerry.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="移动端" scheme="https://smalljerry.cn/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>web安全</title>
    <link href="https://smalljerry.cn/2021/07/10/web%E5%AE%89%E5%85%A8/"/>
    <id>https://smalljerry.cn/2021/07/10/web%E5%AE%89%E5%85%A8/</id>
    <published>2021-07-10T08:29:33.000Z</published>
    <updated>2025-02-22T02:14:47.356Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>我的react快速手册</title>
    <link href="https://smalljerry.cn/2021/06/10/react/"/>
    <id>https://smalljerry.cn/2021/06/10/react/</id>
    <published>2021-06-10T12:11:50.000Z</published>
    <updated>2025-02-22T02:14:47.356Z</updated>
    
    <content type="html"><![CDATA[<p>🎉 希望可以记录一些笔记，保持原有久笔记的前提下动态更新，方便对比复习</p><p>👉 值得学习的 <a href="https://react.dev/learn/thinking-in-react">Thinking In React</a></p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>🙃 记录时间、版本的不同，代码风格会不同，最新的版本示例会是最上面一个然后用 <code>新---</code> 和 <code>旧---</code> 标识</p><p><code>TBR</code> 标出的，是没看明白，还需细品的 😅</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="使用-vite"><a href="#使用-vite" class="headerlink" title="使用 vite"></a>使用 vite</h3><p><a href="https://vitejs.dev/guide/">🌎 Getting Start</a></p><p>先创建 <code>vite</code> 再选择 <code>react</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br></pre></td></tr></table></figure><p>直接指定 <code>react</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest my-react-app -- --template react</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yarn</span></span><br><span class="line">yarn create vite my-react-app --template react</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pnpm</span></span><br><span class="line">pnpm create vite my-react-app --template react</span><br></pre></td></tr></table></figure><ul><li>或者是 <code>react-ts</code></li></ul><h3 id="非脚手架"><a href="#非脚手架" class="headerlink" title="非脚手架"></a>非脚手架</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react react-dom</span><br></pre></td></tr></table></figure><p>通过<code>&lt;script&gt;</code>导入，注意导入顺序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/react/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./node_modules/react-dom/umd/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*创建react元素（了解）</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">- 参数一：元素名称</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">- 参数二：元素属性，是对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">- 参数三：元素的子节点（从这个参数开始，之后添加的参数都是子节点）</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> title = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h1&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;hello react!&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/*渲染react元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    - 参数一：要渲染的元素</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    - 参数二：挂载点</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(title, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h3><p><code>React.createElement()</code>和<code>createRoot()</code>的区别</p><ul><li>前者：创建 React Element</li><li>后者：创建一个 root-level 的容器来渲染 React 程序 <code>React 18</code></li></ul><h4 id="React-18-以前"><a href="#React-18-以前" class="headerlink" title="React 18 以前"></a>React 18 以前</h4><p>下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推荐</span></span><br><span class="line">npx create-react-app myReact</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 不太推荐</span></span></span><br><span class="line">npm init react-app myReact</span><br><span class="line">yarn create react-app myReact</span><br></pre></td></tr></table></figure><p>启动（要进入项目的根目录）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><p>使用，通过 ES6 的 <code>import</code> 关键字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建react元素</span></span><br><span class="line"><span class="keyword">const</span> title = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h1&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;hello react!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(title, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="React-18-以后"><a href="#React-18-以后" class="headerlink" title="React 18 以后"></a>React 18 以后</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react react-dom</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空现有的HTML内容</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用React组件取而代之</span></span><br><span class="line"><span class="keyword">const</span> root = <span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>);</span><br></pre></td></tr></table></figure><p>或者是并不想清空当前 HTML 页面的内容，那就找一个元素当作容器来渲染当前的 React 组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My app<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This paragraph is a part of HTML.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">id</span>=<span class="string">&quot;navigation&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>This paragraph is also a part of HTML.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRoot &#125; <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">NavigationBar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> Actually implement a navigation bar</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello from React!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> domNode = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;navigation&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> root = <span class="title function_">createRoot</span>(domNode);</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">NavigationBar</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure><h2 id="React-和-JSX"><a href="#React-和-JSX" class="headerlink" title="React 和 JSX"></a>React 和 JSX</h2><p><code>jsx</code> 是 <code>JavaScript XML</code> 的简写，在 JavaScript 文件中写 HTML-like 标签</p><ul><li>因为<code>jsx</code>不是标准的<code>ECMAScript</code>语法，而是它的语法扩展，所以在普通环境是不可以使用的；要在脚手架中使用（因为脚手架中包含了<code>babel</code>，@babel/preset-react）</li></ul><blockquote><p>JSX 和 React 是两个东西，前者是语法拓展，后者是一个 JavaScript 库。React 是使用了这种语法拓展。通常是一起使用的，但也可以分开使用。<a href="https://legacy.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html#whats-a-jsx-transform">更多介绍</a></p></blockquote><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><p><strong>1. 单根节点</strong></p><blockquote><p>原因：JSX 看起来像 HTML，但是是转换成原生的 JavaScript 对象，一个方法是不可以返回两个对象的，所以才需要包裹起来</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>456<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="comment">// 或者空白的</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>456<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>这个空白的标签叫做 Fragment （片段 ？？）</li><li>完整样子：<code>&lt;Fragment&gt;&lt;/Fragment&gt;</code></li><li>向 Fragment 传 _key_，不能使用短标签 <code>&lt;&gt;&lt;/&gt;</code>，需要从 react 导入 Fragment 然后 s 使用<code>&lt;Fragment key=&#123;yourKey&#125;&gt;...&lt;/Fragment&gt;</code></li><li>不会重置<code>state</code>，在从<code>&lt;&gt;&lt;Child /&gt;&lt;/&gt;</code>到<code>[&lt;Child&gt;]</code>或反转的时候；<code>&lt;&gt;&lt;&gt;&lt;Child /&gt;&lt;/&gt;&lt;/&gt;</code>就会重置。关于重置 state，需要跳转看到<code>state</code>章节</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建react元素</span></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Hello Hi <span class="tag">&lt;<span class="name">span</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染元素</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(title, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li>class =&gt; className 、for =&gt; htmlFor，等等</li><li>如果元素没有子节点，可以转为单标签：<code>&lt;span&gt;&lt;/span&gt;</code> =&gt; <code>&lt;span /&gt;</code>，当然不转也行</li></ul><p><strong>2. 必须要关闭标签</strong></p><p>…其实一直不知道标签还可以不用关闭的 🥲</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;12</span><br><span class="line">  &lt;li&gt;34</span><br><span class="line">  &lt;li&gt;56</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;img&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>12<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>34<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>56<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3. 驼峰式属性名</strong></p><p>因为 JSX 要转换成 JavaScript 对象，所以，例如 HTML-like 中的样式类<code>class</code>改成了<code>className</code>，不然得和 JavaScript 类的关键字冲突</p><p>DOM 节点的<code>className</code>属性也是这个意思，避免与操作 DOM 的编程语言保留的<code>class</code>关键字冲突</p><blockquote><p>对于样式类，class 是属于 HTML 的，而 className 是 DOM 属性</p></blockquote><p><a href="https://react.dev/reference/react-dom/components/common">👉 这里查看所有的属性名</a></p><blockquote><p>由于历史原因<code>aria-*</code> 和 <code>data-*</code> 依然使用 <code>-</code> 而不是驼峰式。主要原因有 W3C 定的一些 HTML 规范，然后 React 也遵循这些规范以适配很多库、开发工具、不同技术等等</p></blockquote><ul><li>aria 规范: Accessible Rich Internet Applications，提供一组属性增强 web 应用程序的可访问性。</li></ul><h3 id="使用-js-表达式-JSX-的花括号"><a href="#使用-js-表达式-JSX-的花括号" class="headerlink" title="使用 js 表达式 (JSX 的花括号)"></a>使用 js 表达式 (JSX 的花括号)</h3><blockquote><p>❗ 花括号外面是不需要加 双引号或者单引号 的；花括号里面如果是字符串 <br /> return 语句中 JS 表达式要写在花括号里面</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Avatar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> avatar = <span class="string">&quot;https://i.imgur.com/7vQD0fPs.jpg&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> description = <span class="string">&quot;Gregorio Y. Zara&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">className</span>=<span class="string">&quot;avatar&quot;</span> <span class="attr">src</span>=<span class="string">&#123;avatar&#125;</span> <span class="attr">alt</span>=<span class="string">&#123;description&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Jerry&quot;</span>; <span class="comment">// 使用一个花括号，注意是一个</span></span><br><span class="line"><span class="keyword">const</span> title = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(title, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><p>在<code>&#123;&#125;</code>中可以使用任意的合法的<code>JavaScript</code>表达式，不过也有例外</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">hello</span> = (<span class="params"></span>) =&gt; <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> myDiv = <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;1 + 1&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;1 &lt; 2 ? &quot;对呀&quot; : &quot;不对&quot;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;hello()&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;div&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(title, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li>jsx 自身也是表达式，所以<code>&#123;div&#125;</code>也适用</li><li><code>&lt;p&gt;&#123; &#123;a: &quot;我是a&quot;&#125; &#125;&lt;/p&gt;</code>，这种对象是<strong>不行</strong>的，但是在<code>style</code>样式中又可以使用</li><li>在里面使用语句也是<strong>不行</strong>的：if、for 这些</li></ul><p><strong>JSX 使用两个花括号的场景</strong></p><ul><li>CSS：<code>&lt;ul style=&#123;&#123;backgroundColor: 'black', color: 'pink'&#125;&#125;&gt;</code><ul><li>css 属性名要驼峰式</li></ul></li><li>JSX 传递对象：<code>person=&#123;&#123; name: "Hedy Lamarr", inventions: 5 &#125;&#125;</code></li></ul><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Item</span>(<span class="params">&#123; name, isPacked &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;isPacked ? name + &quot;✔&quot; : name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Pane</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Item</span> <span class="attr">name</span>=<span class="string">&quot;mike&quot;</span> <span class="attr">isPacked</span>=<span class="string">&#123;false&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Item</span> <span class="attr">name</span>=<span class="string">&quot;amy&quot;</span> <span class="attr">isPacked</span>=<span class="string">&#123;true&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果不渲染东西，可以返回<code>null</code>。<strong>一般不会这样做</strong></li></ul><p>使用逻辑与简化条件判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;name&#125; &#123;isPacked &amp;&amp; &quot;✔&quot;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>React considers <code>false</code> as a “hole” in the JSX tree，像<code>undefined</code>和<code>null</code>一样不渲染东西</li><li>可用多个花括号</li></ul><blockquote><p>注意 <code>&amp;&amp;</code> 左边有数字，因为如果是 <em>0</em> 的话，会被认为是<code>false</code>；可以加个前提判断当左边大于 <em>0</em></p></blockquote><p>如果要简化返回语句，或者有个默认返回，可以使用结合使用<strong>变量和 JSX</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Item</span>(<span class="params">&#123; name, isPacked &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> content = name;</span><br><span class="line">  <span class="keyword">if</span> (isPacked) &#123;</span><br><span class="line">    <span class="comment">// 多行要使用括号</span></span><br><span class="line">    content = <span class="language-xml"><span class="tag">&lt;<span class="name">del</span>&gt;</span>&#123;name + &quot;✔&quot;&#125;<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><blockquote><p>箭头函数<code>=&gt;</code>后面隐式返回，不用加上<code>return</code>，但是只返回一行；返回多行<code>=&gt;</code>需要加上<code>&#123;&#125;</code>和<code>return</code></p></blockquote><p>如果要渲染一组数据，应该使用数组的<code>map()</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> songs = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;我很快乐&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;你很快乐&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;他很快乐&quot;</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">SongList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 决定列表结构（每一项遍历需要有一个key）</span></span><br><span class="line">  <span class="keyword">const</span> songItems = songs.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;songItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一般会用数据库中对应的 ID 作为 key</li><li>如果是本地数据，可以使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID">crypto.randomUUID()</a> 或者是包<a href="https://www.npmjs.com/package/uuid">uuid</a> 生成</li></ul><blockquote><p>不要使用<code>Math.random()</code>生成 key，key 除了标识当前 DOM，还会有缓存作用，数据不变化的不会重新渲染以使得渲染更快，如果用了随机数，所有的 DOM 都会在数据更新时重新渲染 <br /> key 在<code>props</code>是获取不到的</p></blockquote><p>想要渲染多个 DOM 节点但是又不想在外面包一个多余的节点，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> listItems = people.<span class="title function_">map</span>(<span class="function"><span class="params">person</span> =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;person.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;person.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;person.bio&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>不想，要这个外面的<code>&lt;div&gt;</code>，可用<code>&lt;Fragment&gt;</code>代替，在 DOM 中 Fragments 不会出现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记得要事先导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Fragment</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listItems = people.<span class="title function_">map</span>(<span class="function"><span class="params">person</span> =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span> <span class="attr">key</span>=<span class="string">&#123;person.id&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;person.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;person.bio&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>记得要事先导入：</p><blockquote><p>不能使用 <code>&lt;&gt;&lt;/&gt;</code>，因为它不能传递 <code>key</code></p></blockquote><h3 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a>样式处理</h3><p>行内样式：style（不推荐），使用样式时可以在<code>&#123;&#125;</code>中使用对象</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &quot;<span class="attr">red</span>&quot;, <span class="attr">backgroundColor:</span> &quot;<span class="attr">yellow</span>&quot; &#125;&#125;&gt;</span>JSX行内样式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>类名：className</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* index.css */</span></span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="string">&quot;red&quot;</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="string">&quot;yellow&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;index.css&quot;</span><span class="keyword">const</span> list = ( <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span>&gt;</span>JSX类样式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> )</span><br></pre></td></tr></table></figure><blockquote><p>小结：React 是利用 JavaScript 语言自身来编写界面，而不是像 Vue 一样通过增强 HTML 的功能。</p></blockquote><h1 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h1><ul><li>一个页面可以全部都是 React 组件。</li><li>a React component is a JavaScript function that you can sprinkle with markup</li></ul><h2 id="两种创建方式"><a href="#两种创建方式" class="headerlink" title="两种创建方式"></a>两种创建方式</h2><blockquote><p><code>React 16.8</code> 以后 推荐创建组件的方法不再是 <em>类组件</em> ，而是 <em>函数组件</em></p></blockquote><p>函数的方式和类的方式</p><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><ul><li>使用<code>function</code>关键字</li><li>函数名称<strong>大写</strong>开头</li><li>函数组件必须有返回值（返回<code>null</code>表示不渲染内容）<ul><li>返回单行可不需要括号，返回<strong>多行必须括号</strong></li></ul></li><li>不要在组件里面再定义其他组件</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个函数组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者const Hello = ()=&gt; &lt;div&gt;这是一个函数组件&lt;/div&gt;</span></span><br><span class="line"><span class="comment">// 函数名作为标签名</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Profile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i.imgur.com/MK3eW3Am.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Katherine Johnson&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>虽然里面有<em>src</em>、_alt_，但是实则为 JavaScript，这种写法叫</li><li>React 会以大小写来区分 HTML 标签和 React 组件</li></ul><h3 id="类组件"><a href="#类组件" class="headerlink" title="类组件"></a>类组件</h3><ul><li>使用<code>class</code>关键字</li><li>类名要大写开头，并且继承于<code>React.Component</code></li><li>必须有<code>render()</code>方法，并且这个方法要有返回值</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span> (</span><br><span class="line">    <span class="keyword">return</span> ( <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个类组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> )</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="组件的导入导出"><a href="#组件的导入导出" class="headerlink" title="组件的导入导出"></a>组件的导入导出</h2><ul><li>一般会将一个组件放到一个单独的 js 文件中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后缀名可省略</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NavMenu</span> <span class="keyword">from</span> <span class="string">&quot;./navMenu.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部使用的话，无需导出</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">HeaderTitle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Header</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">NavMenu</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">HeaderTitle</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Hello.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span> (</span><br><span class="line">    <span class="keyword">return</span> ( <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个独立文件组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> )</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Hello</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* index.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Hello</span> <span class="keyword">from</span> <span class="string">&quot;./Hello.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="默认与命名导出导入"><a href="#默认与命名导出导入" class="headerlink" title="默认与命名导出导入"></a>默认与命名导出导入</h3><ul><li>一个文件只能有一个默认导出</li></ul><table><thead><tr><th>语法</th><th>导出</th><th>导入</th></tr></thead><tbody><tr><td>默认</td><td><code>export default function Button() &#123;&#125;</code></td><td><code>import Button from &#39;./Button.js&#39;;</code></td></tr><tr><td>命名</td><td><code>export function Button() &#123;&#125;</code></td><td><code>import &#123; Button &#125; from &#39;./Button.js&#39;;</code></td></tr></tbody></table><ul><li>默认导出，导入的时候，导入名字随便写</li><li>命名的时候，名字需要对应</li></ul><p>虽然默认导出<code>export default () =&gt; &#123;&#125;</code>没问题，但是不推荐没有名字</p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li><code>on+事件名称=&#123;事件处理程序&#125;</code>，<code>onClick=&#123;()=&gt;&#123;&#125;&#125;</code></li><li>驼峰式命名</li></ul><blockquote><p>事件处理函数必须是<strong>传递</strong>而不是<strong>调用</strong>，就是说不用在函数后面加上括号</p></blockquote><p>给组件添加事件处理：定义一个函数，然后作为<em>props</em>传递给<code>&lt;button&gt;</code></p><ul><li>这个函数一般在当前这个组件里面</li><li>以<code>handle</code>开头：<code>onClick=&#123;handleClick&#125;</code>, <code>onMouseEnter=&#123;handleMouseEnter&#125;</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;You clicked me!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触发单击事件&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h4><ul><li>事件处理器会捕获到子组件可能会有的事件：称为冒泡或者传播；在事件发生的地方开始，然后顺着组件树往上传递。比如子组件和父组件都有点击事件。</li></ul><blockquote><p>所有事件都会冒泡，除了<code>onScroll</code>，只在使用的地方促发</p></blockquote><p>事件处理函数仅有的一个参数就是<em>事件对象</em>，一般用<code>e</code>来表示</p><ul><li><code>e.stopPropagation()</code> 阻止冒泡</li><li>父组件添加<code>onClickCapture=&#123;()=&gt;&#123; /* ... */&#125;&#125;</code> 捕获子组件事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 捕获事件</span></span><br><span class="line">&lt;div onClickCapture=&#123;<span class="function">() =&gt;</span> &#123;&#125;&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span> =&gt;</span> e.stopPropagation()&#125; /&gt;</span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span> =&gt;</span> e.stopPropagation()&#125; /&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 阻止默认事件</span></span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        去百度</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件处理函数读取-props-和作为-props-传递"><a href="#事件处理函数读取-props-和作为-props-传递" class="headerlink" title="事件处理函数读取 props 和作为 props 传递"></a>事件处理函数读取 props 和作为 props 传递</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params">&#123; onClick, children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">PlayButton</span>(<span class="params">&#123; movieName &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// 之所以在这定义事件处理函数，是因为对于&lt;Button&gt;的不同调用有不同的使用场景，所以不把处理函数放&lt;button&gt;里面</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handlePlayClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 直接使用 props</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">`Playing <span class="subst">$&#123;movieName&#125;</span>!`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 这里的onClick对应的是原生&lt;button&gt;那里的onClick，所示使用了默认名</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">onClick</span>=<span class="string">&#123;handlePlayClick&#125;</span>&gt;</span>Play &quot;&#123;movieName&#125;&quot;<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Toolbar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">PlayButton</span> <span class="attr">movieName</span>=<span class="string">&quot;Kiki&#x27;s Delivery Service&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义事件处理函数-props-名字"><a href="#自定义事件处理函数-props-名字" class="headerlink" title="自定义事件处理函数 props 名字"></a>自定义事件处理函数 props 名字</h3><ul><li>作为 props 传递时使用的名字</li><li>上面的<code>handlePlayClick</code>作为 props 传递的时候使用的是<code>onClick</code>，算是使用了默认名字</li></ul><p>一般以<code>on</code>开头，然后驼峰式命名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Button</span>(<span class="params">&#123; onSmash, children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onSmash&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onSmash</span>=<span class="string">&#123;()</span> =&gt;</span> alert(&quot;Playing!&quot;)&#125;&gt;Play Movie<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span> <span class="attr">onSmash</span>=<span class="string">&#123;()</span> =&gt;</span> alert(&quot;Uploading!&quot;)&#125;&gt;Upload Image<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于原生的 HTML 元素，要尽量使用对应功能的元素其对应的事件。比如点击事件会用到<code>&lt;button&gt;</code>而不是<code>div</code></p></blockquote><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>随着时间改变的数据叫 _state_，对于对象和数组，react 推荐它们的使用是不可变的（immutable），要想更新，就创建一个新的</p><h3 id="有状态和无状态组件"><a href="#有状态和无状态组件" class="headerlink" title="有状态和无状态组件"></a>有状态和无状态组件</h3><ul><li><del style="color: darkred">无状态组件：函数组件；有状态组件：类组件</del> <code>React 16.8</code></li><li>状态（state）负责数据</li><li><del style="color: darkred;">函数组件没状态，可以用于展示数据（静态）</del> <code>React 16.8</code></li><li>类组件有自己状态，可以用于更新界面（动态）<code>React 16.8 后不再是主推的</code></li></ul><h3 id="state-基本使用-新"><a href="#state-基本使用-新" class="headerlink" title="state 基本使用(新)"></a>state 基本使用(新)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [index, setIndex] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">setIndex</span>(index + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>useState</code> 返回两个东西通过解构获得，一个是这个值，另一个是更新这个值二点方法</li><li>名字随便起，但习惯使用 <code>名字</code> 和 <code>set名字</code></li><li>每个组件里的 state 都是独立的</li></ul><blockquote><p><code>use</code>开头的<em>Hooks</em>方法，只可在组件的<strong>top level</strong>执行，不可再条件判断、列表循环中使用</p></blockquote><h4 id="更改-对象-类型的-state"><a href="#更改-对象-类型的-state" class="headerlink" title="更改 对象 类型的 state"></a>更改 <em>对象</em> 类型的 state</h4><p>直接更新对象里的属性是不会触发页面更新的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [position, setPosition] = <span class="title function_">useState</span>(&#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ..</span></span><br><span class="line"></span><br><span class="line">position.<span class="property">x</span> = e.<span class="property">clientX</span>;</span><br><span class="line">position.<span class="property">y</span> = e.<span class="property">clientY</span>;</span><br></pre></td></tr></table></figure><p>虽然在某些情况这样做会有效，但是并不推荐。所以要使用<code>setPosition</code>传递一个新的对象过去，然后组件重新渲染</p><p>重点是使用<code>setXXX</code>这个函数，不管要更新的值以什么形式变化，比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nextPosition = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">nextPosition.<span class="property">x</span> = e.<span class="property">clientX</span>;</span><br><span class="line">nextPosition.<span class="property">y</span> = e.<span class="property">clientY</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setPosition</span>(nextPosition); <span class="comment">// 事实上和下面这个相同</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setPosition</span>(&#123; <span class="attr">x</span>: e.<span class="property">clientX</span>, <span class="attr">y</span>: e.<span class="property">clientY</span> &#125;);</span><br></pre></td></tr></table></figure><p>不过这样会有个新的问题，就是只是想要改变某一个属性的值，不想要改变其他值。</p><ul><li>如果重新将整个对象传一次，属性多了会很麻烦</li></ul><p>使用展开运算符将不需要改变的对象属性复制到新的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果只需要改变 firstName，这样太麻烦了</span></span><br><span class="line"><span class="title function_">setPerson</span>(&#123;</span><br><span class="line">  <span class="attr">firstName</span>: e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">  <span class="attr">lastName</span>: person.<span class="property">lastName</span>,</span><br><span class="line">  <span class="attr">email</span>: person.<span class="property">email</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样优化</span></span><br><span class="line"><span class="title function_">setPerson</span>(&#123;</span><br><span class="line">  ...person, <span class="comment">// 复制旧的值</span></span><br><span class="line">  <span class="attr">firstName</span>: e.<span class="property">target</span>.<span class="property">value</span>, <span class="comment">// 仅重写 firstName</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>展开运算符仅在对象的第一层起作用，如果要复制更深层的，得多次使用展开运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [person, setPerson] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Niki de Saint Phalle&quot;</span>,</span><br><span class="line">  <span class="attr">artwork</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;Blue Nana&quot;</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;Hamburg&quot;</span>,</span><br><span class="line">    <span class="attr">image</span>: <span class="string">&quot;https://i.imgur.com/Sd1AgUOm.jpg&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>只想要更新 <em>artwork</em> 的 <em>city</em></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nextArtwork = &#123; ...person.<span class="property">artwork</span>, <span class="attr">city</span>: <span class="string">&quot;New Delhi&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> nextPerson = &#123; ...person, <span class="attr">artwork</span>: nextArtwork &#125;;</span><br><span class="line"><span class="title function_">setPerson</span>(nextPerson);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者直接在里面</span></span><br><span class="line"><span class="title function_">setPerson</span>(&#123;</span><br><span class="line">  ...person, <span class="comment">// Copy other fields</span></span><br><span class="line">  <span class="attr">artwork</span>: &#123;</span><br><span class="line">    <span class="comment">// but replace the artwork</span></span><br><span class="line">    ...person.<span class="property">artwork</span>, <span class="comment">// with the same one</span></span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;New Delhi&quot;</span>, <span class="comment">// but in New Delhi!</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>❔ 其他情况：更改 <code>obj3.artwork</code>，<code>obj1</code> 和 <code>obj2.artwork</code> 也会改变，因为它们是相同的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Blue Nana&quot;</span>,</span><br><span class="line">  <span class="attr">city</span>: <span class="string">&quot;Hamburg&quot;</span>,</span><br><span class="line">  <span class="attr">image</span>: <span class="string">&quot;https://i.imgur.com/Sd1AgUOm.jpg&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Niki de Saint Phalle&quot;</span>,</span><br><span class="line">  <span class="attr">artwork</span>: obj1,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Copycat&quot;</span>,</span><br><span class="line">  <span class="attr">artwork</span>: obj1,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="更新-数组-类型的-state"><a href="#更新-数组-类型的-state" class="headerlink" title="更新 数组 类型的 state"></a>更新 <em>数组</em> 类型的 state</h4><ul><li>同样推荐不可变（immutable），所以不要使用<code>arr[0] = &quot;qaq&quot;</code>来修改其中的值</li><li>同样也不推荐使用<code>pop()</code>、<code>push()</code>等方法来改变它</li><li>推荐从旧数组的基础上创建新的数组，并且使用不会改变旧数组的数组方法，例如<code>filter()</code>、<code>map()</code></li></ul><p>React 中 state 中数组的操作方法推荐（避免使用该百年数组的，推荐使用返回新数组的）：</p><table><thead><tr><th></th><th>避免</th><th>推荐</th></tr></thead><tbody><tr><td>添加</td><td>push, unshift</td><td>concat, […arr]</td></tr><tr><td>删除</td><td>pop, shift, splice</td><td>filter, slice</td></tr><tr><td>替换</td><td>splice, arr[i]=xx</td><td>map</td></tr><tr><td>排序</td><td>reverse, sort</td><td>先复制这个数组</td></tr></tbody></table><p><strong>添加内容</strong>：和对象一样，使用扩展运算符来复制以达到改变某一个值的目的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [artists, setArtists] = <span class="title function_">useState</span>([]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">setArtists</span>(</span><br><span class="line">  <span class="comment">// Replace the state</span></span><br><span class="line">  [</span><br><span class="line">    <span class="comment">// with a new array</span></span><br><span class="line">    ...artists, <span class="comment">// that contains all the old items</span></span><br><span class="line">    &#123; <span class="attr">id</span>: nextId++, <span class="attr">name</span>: name &#125;, <span class="comment">// and one new item at the end</span></span><br><span class="line">  ]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>要改变新插入值的位置，将新插入的值这行放到扩展运算的上面就行</li></ul><p><strong>删除内容</strong>：最简单的就是过滤掉这个不需要的，或者直接创建个新数组的不包含这个要删除的内容</p><p><strong>替换内容</strong>：在原有的基础上创建一个新的数组，使用<code>map</code>，如果符合，改变这个值然后返回，不符合的返回原来的样子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [counters, setCounters] = <span class="title function_">useState</span>([xx, xxx]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nextCounters = counters.<span class="title function_">map</span>(<span class="function">(<span class="params">c, i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (i === index) &#123;</span><br><span class="line">    <span class="comment">// +1</span></span><br><span class="line">    <span class="keyword">return</span> c + <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不改变</span></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">setCounters</span>(nextCounters);</span><br></pre></td></tr></table></figure><p><strong>插入内容</strong>：确定要添加的位置，然后使用<code>slice</code>分割数组，将要添加的放到两个切片中间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [artists, setArtists] = <span class="title function_">useState</span>([xxx, xx, x]);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> insertAt = <span class="number">1</span>; <span class="comment">// 任何要插入的位置</span></span><br><span class="line"><span class="keyword">const</span> nextArtists = [</span><br><span class="line">  <span class="comment">// 插入点前:</span></span><br><span class="line">  ...artists.<span class="title function_">slice</span>(<span class="number">0</span>, insertAt),</span><br><span class="line">  <span class="comment">// 要插入的:</span></span><br><span class="line">  &#123; <span class="attr">id</span>: nextId++, <span class="attr">name</span>: name &#125;,</span><br><span class="line">  <span class="comment">// 插入点后:</span></span><br><span class="line">  ...artists.<span class="title function_">slice</span>(insertAt),</span><br><span class="line">];</span><br><span class="line"><span class="title function_">setArtists</span>(nextArtists);</span><br></pre></td></tr></table></figure><p><strong>其他操作</strong>：比如 _反转_，_排序_，js 方法会改变旧的数组，所以要先复制出一个数组然后再做出改变，如<code>nextList.sort()</code>，<code>nextList[0] = &#123;name: &quot;zs&quot;, age: 18&#125;</code></p><blockquote><p>对于数组 <em>list</em> 和 _nextList_，虽然不是相同的数组，但是<code>list[0]</code>和<code>nextList[0]</code>指向的是相同的对象，所以直接<code>nextList[0].age=19</code>这样的还是不推荐的，因为这是浅拷贝，是直接改掉了对象里面的东西</p></blockquote><p><strong>👉 更新数组里面的对象</strong></p><p>对象其实并不是再数组里面的，只是在代码这里看起来是在里面；但事实上当使用数组时（虽然已经使用拓展运算符复制出不同的数组），尝试改变其中数组内元素的值，另外的引用也会跟着改变，因为数组它内容本身还是和旧数组一样，只是在新的数组里面呆着罢了</p><p>所以改变数组里面你的对象，可以通过使用<code>map</code>找出要改变的对象，然后使用更新对象的方法更新目标对象</p><h3 id="state-基本使用"><a href="#state-基本使用" class="headerlink" title="state 基本使用"></a>state 基本使用</h3><ul><li>一个对象，是组件内部<strong>私有</strong>的数据，只能在组件内部使用</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.component</span> &#123;</span><br><span class="line">  <span class="title function_">construtor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ES6 中类的继承中要求要有的，如果有参数就得在其中传递</span></span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="comment">// 初始化state</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>计数器：&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            this.setState(&#123; count: this.state.count + 1 &#125;);</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          +1</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>❗ 注：不能直接修改 state 中的值：<code>this.state.count++</code>，这样是错的</li></ul><p>上面的语法有个简化版的，去掉了构造器和 super</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>计数器：&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="this-指向问题解决-1"><a href="#this-指向问题解决-1" class="headerlink" title="this 指向问题解决 1"></a>this 指向问题解决 1</h3><ul><li>使用箭头函数解决</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.component</span> &#123;</span><br><span class="line">  <span class="title function_">construtor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将事假处理代码抽离出来，会带来this指向问题,使用箭头函数解决</span></span><br><span class="line">  <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>计数器：&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.add()&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>❗ 注：在<code>&lt;button&gt;</code>中调用时，函数后面<strong>要</strong>加上<code>()</code></li></ul><h3 id="this-指向问题解决-2"><a href="#this-指向问题解决-2" class="headerlink" title="this 指向问题解决 2"></a>this 指向问题解决 2</h3><ul><li>利用 ES5 中的<code>bind</code>方法绑定 this</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.component</span> &#123;</span><br><span class="line">  <span class="title function_">construtor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="comment">// 将事假处理代码抽离出来，会带来this指向问题,使用bind()绑定</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">add</span> = <span class="variable language_">this</span>.<span class="property">add</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>计数器：&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>❗ 注：在<code>&lt;button&gt;</code>中调用时，这里已经不是函数调用，所以函数后面<strong>不用</strong>加上<code>()</code></li></ul><h3 id="this-指向问题解决-3"><a href="#this-指向问题解决-3" class="headerlink" title="this 指向问题解决 3"></a>this 指向问题解决 3</h3><p>基于上面的内容，只需要修改<code>add()</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>这是实验性语法，但是在<code>babel</code>中使用不必担心</li></ul><h2 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h2><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><ul><li>HTML 中的状态（数据）是元素自己控制的，但是在 React 中要在 state 中，并且只能通过 setState 来修改</li><li>解决这个冲突，React 将<code>state</code>和元素的<code>value</code>绑定在一起</li><li>受控组件，就是其值是受到 React 控制的</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 为了方便，这里使用简写形式</span></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">txt</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;gz&quot;</span>,</span><br><span class="line">    <span class="attr">isCheck</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  handleChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">txt</span>: e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  handleCity = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">city</span>: e.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  handleChecked = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">isCHecked</span>: e.<span class="property">target</span>.<span class="property">checked</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.txt&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;this.state.city&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleCity&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;gz&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">checked</span>=<span class="string">&#123;this.state.isChecked&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.handleChecked&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌝 可以对上面的代码进行优化</p><ol><li>给表单元素添加<code>name</code>属性，用来区分不同的表单元素，名称与对应的<code>state</code>相同。</li><li>根据表单元素类型获取对应的值。（value、checked）</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">txt</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;gz&quot;</span>,</span><br><span class="line">    <span class="attr">isCheck</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  handleForm = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前DOM对象</span></span><br><span class="line">    <span class="keyword">const</span> target = e.<span class="property">target</span>;</span><br><span class="line">    <span class="comment">// 根据类型获取值</span></span><br><span class="line">    <span class="keyword">const</span> value = target.<span class="property">type</span> === <span class="string">&quot;checkbox&quot;</span> ? target.<span class="property">checked</span> : target.<span class="property">value</span>;</span><br><span class="line">    <span class="comment">// 获取name</span></span><br><span class="line">    <span class="keyword">const</span> name = target.<span class="property">name</span>;</span><br><span class="line">    <span class="comment">// 如果下面的name没有[]，代表的是在state新增一个name属性；使用[]表示修改state对象中对应的值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      [name]: value,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;txt&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.txt&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.handleForm&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.city&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleForm&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;sh&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;gz&quot;</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;isChecked&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">checked</span>=<span class="string">&#123;this.state.isChecked&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.handleForm&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><blockquote><p>通过<code>ref</code>，使用原生 DOM 来获取表单元素的值</p></blockquote><ol><li>创建一个 ref 对象</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;    <span class="variable language_">super</span>()    <span class="comment">// this点后面这个名字随便取    this.txtRef = React.createRef()&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>将创建好的 ref 对象放到目标元素中</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;<span class="variable language_">this</span>.<span class="property">txtRef</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>通过 ref 获取到目标元素的值</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">txtRef</span>.<span class="property">current</span>.<span class="property">value</span>);</span><br></pre></td></tr></table></figure><blockquote><p>react 中不推荐直接操作 DOM</p></blockquote><h2 id="保持组件整洁"><a href="#保持组件整洁" class="headerlink" title="保持组件整洁"></a>保持组件整洁</h2><p><code>1：</code> 组件就像是公式，不会有意料之外的结果，比如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">double</span>(<span class="params">number</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一直传 2 它一直返回 4；传 4，就返回 8；</li></ul><p><code>2：</code> 保持为一个纯函数，只管自己的事，在调用这个组件之前，不会改变存在的变量或对象</p><p>❌ 不好的示例：每使用一次组件<code>guest</code>的值增加了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> guest = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Bad: changing a preexisting variable!</span></span><br><span class="line">  guest = guest + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Tea cup for guest #&#123;guest&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">TeaSet</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Cup</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Cup</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Cup</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>正确做法是通过<code>props将值传进去</code></li><li>或者将数据在<code>TeaSet</code>中操作</li></ul><p><code>3：</code> “副作用” 不需要保持整洁？</p><p>就是一些 事件处理器 不需要 这样，因为渲染的时候它们并没有执行，而是在等时间触发。所以在这可以改变一些用户的输入、响应等</p><p><code>TBR:</code> <a href="https://react.dev/learn/keeping-components-pure">Keeping Components Pure</a></p><h1 id="组件进阶"><a href="#组件进阶" class="headerlink" title="组件进阶"></a>组件进阶</h1><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><ul><li>接收传递给组件的数据</li><li>传递数据：给组件标签添加属性</li><li>接收数据：函数组件通过参数<code>props</code>接收数据，类组件通过<code>this.props</code>接收数据</li><li><code>props</code>只可读</li></ul><p>props 是动态的，并不是组件被创建之后就写死了的</p><ul><li>但是 props 是不可变对象</li><li>当组件要改变它的 props，首先会向父组件请求所需数据来传递不同的 props</li><li>旧的 props 被丢弃，随后被 JavaScript 引擎回收这个 props 占的内存</li></ul><blockquote><p>不要直接改变 props 的值，需要使用 <code>set state</code></p></blockquote><p><code>新---</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Profile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">person</span>=<span class="string">&#123;&#123;</span> <span class="attr">name:</span> &quot;<span class="attr">Lin</span> <span class="attr">Lanying</span>&quot;, <span class="attr">imageId:</span> &quot;<span class="attr">1bX5QH6</span>&quot; &#125;&#125; <span class="attr">size</span>=<span class="string">&#123;100&#125;</span> /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 这里的参数也可以不展开，直接用个对象，效果一样。不过可能通常不需要整个对象</span></span><br><span class="line"><span class="comment"> * 如果解构，不要忘了大括号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Avatar</span>(<span class="params">&#123; person, size &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&quot;avatar&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">src</span>=<span class="string">&#123;getImageUrl(person)&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">alt</span>=<span class="string">&#123;person.name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">width</span>=<span class="string">&#123;size&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">height</span>=<span class="string">&#123;size&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getImageUrl</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>指定默认值</strong></p><p>和 js 一样，在参数那指定就行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Avatar</span>(<span class="params">&#123; person, size = <span class="number">10</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>没传递 <em>size</em> 的时候会使用默认值，或者是传递 <code>size=&#123;undefined&#125;</code></li><li><code>size=&#123;null&#125;</code>或者<code>size=&#123;0&#125;</code>，不会使用默认值</li></ul><p><strong>更简洁的传递 props</strong></p><blockquote><p>前提是要想好使用场景？比如父组件就是需要解构，那没办法</p></blockquote><p>不简洁的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Profile</span>(<span class="params">&#123; person, size, isSepia, thickBorder &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Avatar</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">person</span>=<span class="string">&#123;person&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">size</span>=<span class="string">&#123;size&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">isSepia</span>=<span class="string">&#123;isSepia&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">thickBorder</span>=<span class="string">&#123;thickBorder&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里父组件接收到的 props 然后又原封不动再写一次传给子组件，有点麻烦</li></ul><p>可以这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Profile</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Avatar</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>旧---</code></p><p>函数组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 接收数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Hello</span> = props =&gt; &#123;</span><br><span class="line">  <span class="comment">// props是一个对象</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 1. 传递参数</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">age</span>=<span class="string">&#123;10&#125;</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><p>类组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2. 接收数据</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 如果使用构造器，super的参数必须传props（只针对构造器里面）</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 上面构造器的super传不传参数，下面的render都可以接收到props</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;tag&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1. 传递参数</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">age</span>=<span class="string">&#123;10&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">fn</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">      console.log(&quot;这是一个函数&quot;);</span></span><br><span class="line"><span class="language-xml">    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    tag=&#123;<span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">  /&gt;</span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>传递非字符串的内容要使用<code>&#123;&#125;</code>包起来</p></blockquote><h2 id="props-深入"><a href="#props-深入" class="headerlink" title="props 深入"></a>props 深入</h2><h3 id="children-属性"><a href="#children-属性" class="headerlink" title="children 属性"></a>children 属性</h3><ul><li>传递 JSX 作为子组件</li></ul><p>通过<code>props.children</code>获得</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Avatar</span> <span class="keyword">from</span> <span class="string">&quot;./Avatar.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Card</span>(<span class="params">&#123; children &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;card&quot;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Profile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Avatar</span> <span class="attr">size</span>=<span class="string">&#123;100&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>组件标签子节点<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 正常情况下，props.children 为空</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加上子节点后，props.children 为：我是子节点</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>&gt;</span>我是子节点<span class="tag">&lt;/<span class="name">App</span>&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><ul><li>子节点可以为任意的<code>jsx</code>表达式、组件、函数</li><li>如果是函数，直接使用<code>props.children()</code>，外面不用加 {}</li></ul><h3 id="props-校验"><a href="#props-校验" class="headerlink" title="props 校验"></a>props 校验</h3><ul><li>在创建组件的时候就指定<code>props</code>的类型或者格式</li></ul><p>在使用之前，先安装<code>prop-types</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install props-types</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = props.<span class="property">colors</span>;</span><br><span class="line">  <span class="keyword">const</span> list = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加校验</span></span><br><span class="line"><span class="title class_">App</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="comment">// 规定为数组类型</span></span><br><span class="line">  <span class="attr">colors</span>: <span class="title class_">PropTypes</span>.<span class="property">array</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">App</span> <span class="attr">colors</span>=<span class="string">&#123;[</span>&quot;<span class="attr">red</span>&quot;, &quot;<span class="attr">yellow</span>&quot;]&#125; /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><code>PropTypes.</code>后面的就是约束规则</li></ul><p>⚠ 约束规则：</p><ol><li>常见的约束类型：array、bool、func、number、object、string</li><li>React 元素类型：element</li><li>必填项：isRequired（在约束规则后点使用）</li><li>特定结构的对象：shape({ })</li><li>……</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加校验</span></span><br><span class="line"><span class="title class_">App</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,</span><br><span class="line">  <span class="attr">fn</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>.<span class="property">isRequired</span>,</span><br><span class="line">  <span class="attr">tag</span>: <span class="title class_">PropTypes</span>.<span class="property">element</span>,</span><br><span class="line">  <span class="attr">filter</span>: <span class="title class_">PropTypes</span>.<span class="title function_">shape</span>(&#123;</span><br><span class="line">    <span class="attr">area</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> <span class="attr">fn</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;&#125;&#125; /&gt;</span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="props-默认值"><a href="#props-默认值" class="headerlink" title="props 默认值"></a>props 默认值</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加默认值，当组件不传值的时候，会使用这个默认值</span></span><br><span class="line"><span class="title class_">App</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">pageSize</span>: <span class="number">10</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="render-props"><a href="#render-props" class="headerlink" title="render props"></a>render props</h2><ul><li>用于组件复用</li><li>复用 state 和操作 state 的方法</li></ul><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><blockquote><p>这个 render 名字是随便取的</p></blockquote><p>使用组件时拿到组件内部的 props，可以给组件提供的一个函数，然后通过函数的参数来获取。<code>&lt;Mouse render=&#123; (mouse) =&gt; &#123;&#125; &#125; /&gt;</code>，然后函数的返回值作为页面要渲染的结构。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用图片先要导入</span></span><br><span class="line"><span class="keyword">import</span> img <span class="keyword">from</span> <span class="string">&quot;./image/cat.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前组件有状态，也有修改状态的方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 鼠标移动处理程序</span></span><br><span class="line">  handleMouseMove = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">x</span>: e.<span class="property">clientX</span>,</span><br><span class="line">      <span class="attr">y</span>: e.<span class="property">clientY</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 监听鼠标移动的代码</span></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleMouseMove</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// this.props.render是在使用&lt;Mouse /&gt;的时候传递的。这个render名字是随便的，由&lt;Mouse /&gt;调用时提供</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">render</span>(<span class="variable language_">this</span>.<span class="property">state</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">reutrn</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>render props 模式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Mouse</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">render</span>=<span class="string">&#123;mouse</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            return (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                鼠标位置：&#123;mouse.x&#125; &#123;mouse.y&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            );</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">        &#123;/* 复用一个<span class="tag">&lt;<span class="name">Mouse</span> /&gt;</span> */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Mouse</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">render</span>=<span class="string">&#123;mouse</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            return (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">src</span>=<span class="string">&#123;img&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">alt</span>=<span class="string">&quot;猫&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">position:</span> &quot;<span class="attr">absolute</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">top:</span> &quot;<span class="attr">mouse.y</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">left:</span> &quot;<span class="attr">mouse.x</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              /&gt;</span></span></span><br><span class="line"><span class="language-xml">            );</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在<code>class Mouse</code>中，组件是要返回内容的，但是在复用组件的情况下，<code>class Mouse</code>并不知道要返回什么，所以在使用<code>&lt;Mouse /&gt;</code>时候提供的要渲染的内容，然后在<code>this.props.render</code>中接收</li><li>意思就是声明<code>&lt;Mouse /&gt;</code>，和使用<code>&lt;Mouse /&gt;</code></li></ul><h3 id="children-取代-render"><a href="#children-取代-render" class="headerlink" title="children 取代 render"></a>children 取代 render</h3><p>🎡 格式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 在 class Mouse中修改</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">children</span>(<span class="variable language_">this</span>.<span class="property">state</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在使用&lt;Mouse /&gt;时</span></span><br><span class="line"><span class="comment">// 同样，在使用时参数对应的是状态值，返回值对应的是要渲染的内容</span></span><br><span class="line">&lt;<span class="title class_">Mouse</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">        <span class="function"><span class="params">mouse</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ( <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>鼠标位置：&#123;mouse.x&#125; &#123;mouse.y&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/<span class="title class_">Mouse</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><p>校验</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Mouse</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">Proptypes</span>.<span class="property">func</span>.<span class="property">isRequired</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>移除<code>mousemove</code>事件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    windows.<span class="title function_">removeEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleMouseMove</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组件之间的通讯"><a href="#组件之间的通讯" class="headerlink" title="组件之间的通讯"></a>组件之间的通讯</h2><h3 id="父组件传给子组件"><a href="#父组件传给子组件" class="headerlink" title="父组件传给子组件"></a>父组件传给子组件</h3><ul><li>父组件提供要传递的<code>state</code>数据</li><li>子组件标签添加属性，值为<code>state</code>中的数据</li><li>子组件通过<code>props</code>接收父组件中传递的数据</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">lastName</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        父组件：</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&#123;this.state.lastName&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Child</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件，接收父组件传递的数据。&#123;props.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Parent</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="子组件传给父组件"><a href="#子组件传给父组件" class="headerlink" title="子组件传给父组件"></a>子组件传给父组件</h3><ul><li>父组件提供回调函数，用来接收数据（<strong>谁要接收数据，谁就提供回调函数</strong>）</li><li>将改函数作为属性的值，传递给子组件</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">parentMsg</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  getChildMsg = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;接收子组件传递过来的数据&quot;</span>, data);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">parentMsg</span>: data,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        父组件：给子组件提供了函数</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child</span> <span class="attr">getMsg</span>=<span class="string">&#123;this.getChildMsg&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.state.parentMsg&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&quot;你好&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 子组件调用父组件提供的回调函数，从而传递内容</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">getMsg</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">msg</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        子组件：<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>给父组件传递数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="兄弟组件传值"><a href="#兄弟组件传值" class="headerlink" title="兄弟组件传值"></a>兄弟组件传值</h3><ul><li>将要共享的数据提升到最近的公共度组件中</li><li>公共父组件要做的事：提供共享数据、提供操作共享数据的方法</li><li>要传值的子组件通过<code>props</code>接收数据或是接收操作数据的方法</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 提供共享状态</span></span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 提供修改状态的方法</span></span><br><span class="line">  add = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child1</span> <span class="attr">count</span>=<span class="string">&#123;this.state.count&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Child2</span> <span class="attr">add</span>=<span class="string">&#123;this.add&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Child1</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>计数器：&#123;props.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Child2</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> props.add()&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Counter</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><ol><li>使用<code>React.createContext()</code>创建<code>Provider</code>和<code>Consumer</code>两个组件</li><li>使用<code>&lt;Provider&gt;</code>将父组件包起来</li><li>设置<code>value</code>属性，表示要传递的值</li><li>使用<code>&lt;Consumer&gt;</code>组件接收数据</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Provider</span>, <span class="title class_">Consumer</span> &#125; = <span class="title class_">React</span>.<span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&quot;pink&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Node</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Node</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SubNode</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">SubNode</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">SubNode</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Child</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Consumer</span>&gt;</span>&#123;data =&gt; <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是子节点 &#123;data&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#125;<span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><p>📚 <a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">详细指导</a></p><ul><li>组件的生命周期：组件从被创建到挂载到页面中运行，再到组件不用时卸载的过程</li><li>只有类组件才有生命周期</li></ul><p><img src="https://github.com/wojtekmaj/react-lifecycle-methods-diagram/blob/master/src/static/ogimage.png?raw=true" alt="常用生命周期"></p><p>💤 不常用的生命周期：<a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">点我</a>😁</p><table><thead><tr><th>创建时</th><th>更新时</th><th>卸载时</th></tr></thead><tbody><tr><td>constructor、更新 DOM 和 refs 时、componentDidMount</td><td>constructor、更新 DOM 和 refs 时、render、componentDidUpdate</td><td>componentWillUnmount</td></tr></tbody></table><h3 id="创建时"><a href="#创建时" class="headerlink" title="创建时"></a>创建时</h3><p>🚲 执行顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(constructor) --&gt;B(render)</span><br><span class="line">B--&gt;C(componentDidMount)</span><br></pre></td></tr></table></figure><table><thead><tr><th>钩子函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>constructor</td><td>创建组件时，最先执行</td><td>1. 初始化 state、2. 为事件处理程序绑定 this</td></tr><tr><td>render</td><td>每次组件渲染都会触发</td><td>渲染界面（**不能调用<code>setState()</code>**）</td></tr><tr><td>componentDidMount</td><td>组件挂载（完成 DOM 渲染）后</td><td>1. 发送网络请求、2. DOM 操作</td></tr></tbody></table><ul><li><code>componentDidMount</code>是在<code>render()</code>、<code>constructor()</code>外面直接函数调用的，是类的一个成员</li></ul><h3 id="更新时"><a href="#更新时" class="headerlink" title="更新时"></a>更新时</h3><ul><li>导致组件更新的情况：new props、setState()、forceUpdate()</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 只要调用setState，页面就会重新渲染，就是调用render</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 强制更新</span></span><br><span class="line">        <span class="comment">// this.forceUpdate()</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;生命周期钩子函数：render&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Counter</span> <span class="attr">count</span>=<span class="string">&#123;this.state.count&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>打豆豆<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件---生命周期钩子函数：render&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>统计打豆豆的次数：&#123;this.props.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">componentDidUpdate</span>(<span class="params">prevProps</span>) &#123;</span><br><span class="line">    <span class="comment">// 比较更新前后props是否相同，进而决定要不要重新渲染内容</span></span><br><span class="line">    <span class="comment">// prevProps：上一次props</span></span><br><span class="line">    <span class="comment">// this.props：当前props</span></span><br><span class="line">    <span class="keyword">if</span> (prevProps.<span class="property">count</span> !== <span class="variable language_">this</span>.<span class="property">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="comment">// TODO</span></span><br><span class="line">        &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;componentDidUpdate&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🚙 执行顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(render) --&gt; B(componentDidUpdate)</span><br></pre></td></tr></table></figure><table><thead><tr><th>钩子函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>render</td><td>每次组件渲染都会触发</td><td>渲染界面</td></tr><tr><td>componentDidUpdate</td><td>组件更新（完成 DOM 渲染）后</td><td>1. 发送网络请求、2. DOM 操作、<strong>如果要<code>setState()</code>，必须放在一个<code>if</code>条件中</strong></td></tr></tbody></table><ul><li>如果没有在 if 里面调用，就会造成递归更新（执行太多次后停下来报错）</li></ul><h3 id="卸载时"><a href="#卸载时" class="headerlink" title="卸载时"></a>卸载时</h3><table><thead><tr><th>钩子函数</th><th>触发时机</th><th>作用</th></tr></thead><tbody><tr><td>componentWillUnmount</td><td>组件卸载（从页面消失）</td><td>执行清理工作（如：清理定时器）</td></tr></tbody></table><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> &gt; <span class="number">3</span></span><br><span class="line">        ? <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>豆豆被打GG了<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        : <span class="language-xml"><span class="tag">&lt;<span class="name">Counter</span> <span class="attr">count</span>=<span class="string">&#123;this.state.count&#125;</span> /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">   &lt;button onClick=&#123;<span class="variable language_">this</span>.<span class="property">handleClick</span>&#125;&gt;打豆豆&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .....</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;豆豆被GG，我被触发了&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h2><ul><li>也是用于组件的复用，包装组件，增强组件的功能</li><li><code>HOC,Higher-Order Component</code>，是一个函数，接收要包装的组件，返回增强后的组件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EnhancedComponent</span> = <span class="title function_">withHOC</span>(<span class="title class_">WrappedComponent</span>);</span><br></pre></td></tr></table></figure><p>高阶组件内部创建一个类组件，在这个类组件中提供复用的状态逻辑代码，通过 prop 将复用的状态传递给被包装组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.state</span>&#125; /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建高阶组件，参数要以大写字母开头，因为是要作为被渲染的组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">withMouse</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">  <span class="comment">// 2. 该组件提供复用的状态逻辑</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="comment">// 2.1 鼠标状态</span></span><br><span class="line">    state = &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 2.2 控制鼠标状态的逻辑</span></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleMouseMove</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">componentWillUnmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;mousemove&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleMouseMove</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 渲染组件并且将状态作为参数传递。同样不提供具体界面，在调用的时候提供界面</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.state</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Mouse</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 测试高阶组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Position</span> = props =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    鼠标当前位置：( x: &#123;props.x&#125;, y: &#123;props.y&#125; )</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 测试高阶组件2</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Cat</span> = props =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;src&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;cat&quot;</span> /&gt;</span></span>;</span><br><span class="line"><span class="comment">// 5. 获取增强后的组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MousePosition</span> = <span class="title function_">withMouse</span>(<span class="title class_">Position</span>);</span><br><span class="line"><span class="comment">// 获取增强后的组件2</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CatPosition</span> = <span class="title function_">withMouse</span>(<span class="title class_">Cat</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 6. 渲染增强后的高阶组件 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MousePosition</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">CatPosition</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="displayName"><a href="#displayName" class="headerlink" title="displayName"></a>displayName</h3><ul><li>在浏览器的 React 开发者工具中，复用的组件名字显示都是一样的，所以要设置<code>displayName</code>，设置不一样的名字，便于调试（React Developer Tools）</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">withMouse</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.component</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置displayName</span></span><br><span class="line">  <span class="title class_">Mouse</span>.<span class="property">displayName</span> = <span class="string">` WithMouse<span class="subst">$&#123;getDisplayName(WrappedComponent)&#125;</span> `</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Mouse</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDisplayName</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">WrappedComponent</span>.<span class="property">displayName</span> || <span class="title class_">WrappedComponent</span>.<span class="property">name</span> || <span class="string">&quot;Component&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传递-props"><a href="#传递-props" class="headerlink" title="传递 props"></a>传递 props</h3><ul><li>props 丢失</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Position</span> = props =&gt; &#123;</span><br><span class="line">  <span class="comment">// 2. props中没得到a</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(props);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      鼠标当前位置：( x: &#123;props.x&#125;, y: &#123;props.y&#125; )</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 在组件中传递参数</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MousePosition</span> <span class="attr">a</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在<code>&lt;Mosue /&gt;</code>中是可以得到 props 的，但是就没再往下传了</li></ul><p>修改，在<code>class Mouse</code>，继续传下去</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.state</span>&#125; &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="React-原理"><a href="#React-原理" class="headerlink" title="React 原理"></a>React 原理</h1><blockquote><p>组件更新机制：父组件更新，其下面的子组件都会更新，子组件的子组件也会更新</p></blockquote><h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><p><em>Hooks</em> 是仅在 React 显然的时候可用的函数，都是以<code>use</code>开头的，比如<code>useState</code></p><h2 id="setState-说明"><a href="#setState-说明" class="headerlink" title="setState 说明"></a>setState 说明</h2><p>1️⃣ <code>setState()</code>数据更新是异步的</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 2. 再更新</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>, <span class="comment">// 1+1</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 2.1 如果再次调用</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span>, <span class="comment">// 1+1</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 1. 先输出</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;count: &quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>setState()</code>是可以调用多次的，因为是异步的原因，所以后面<code>setState()</code>的执行不要依赖前面执行的结果</li><li>但是<code>render()</code>只会执行一次</li></ul><p>2️⃣ 推荐语法：<code>setState( (state, props) =&gt; &#123;&#125; )</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 同样也是异步更新的</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state, props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>, <span class="comment">// 1+1</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用两次的话，第二次调用时，state是上一个state的返回结果</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state, props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二次调用&quot;</span>, state);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>, <span class="comment">// 2+1</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;count: &quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3️⃣ <code>setState()</code>的第二个参数，是一个回调函数</p><ul><li>如果希望更新后执行什么操作，就可以使用这个回调函数</li><li>在 DOM 渲染后执行（和<code>componentDidMount</code>可以相互使用）</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(</span><br><span class="line">    <span class="function">(<span class="params">state, props</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span> &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 状态更新，并且界面重新渲染后执行</span></span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;状态更新完成！&quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>);</span><br><span class="line">    &#125; <span class="comment">// 2</span></span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;count: &quot;</span>, <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>); <span class="comment">// 1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="JSX-语法转换过程"><a href="#JSX-语法转换过程" class="headerlink" title="JSX 语法转换过程"></a>JSX 语法转换过程</h2><ul><li>JSX 仅仅是<code>createElement()</code>的语法糖（简化语法）</li><li>JSX 语法被<code>@babel/preset-react</code>插件编译为<code>createElement()</code>方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(JSX语法) --&gt; B(createElement) --&gt; C(React元素)</span><br></pre></td></tr></table></figure><ul><li>React 元素：是一个对象，用来描述希望在屏幕上看到的内容</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSX语法</span></span><br><span class="line"><span class="keyword">const</span> element = &#123;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;app&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createElement()</span></span><br><span class="line"><span class="keyword">const</span> element = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line"><span class="string">&quot;h1&quot;</span>,</span><br><span class="line">    &#123; <span class="attr">className</span>: <span class="string">&quot;app&quot;</span> &#125;,</span><br><span class="line">    <span class="string">&quot;hello&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// React元素（简化结构）</span></span><br><span class="line"><span class="keyword">const</span> element = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;h1&quot;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">className</span>: <span class="string">&quot;app&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 ES6 中，class 实现的类就是 ES5 中构造函数和原形的语法糖，可以使用<code>typeof</code>来测一下</p></blockquote><h2 id="组件性能优化"><a href="#组件性能优化" class="headerlink" title="组件性能优化"></a>组件性能优化</h2><h3 id="减轻-state"><a href="#减轻-state" class="headerlink" title="减轻 state"></a>减轻 state</h3><ul><li>state 中只存放跟组件渲染相关的数据</li><li>比如像定时器 id 这样的不用放在 state 中，直接放在 this 中（<code>this.timeId = setTimeout()</code>）</li></ul><h3 id="避免不必要的渲染"><a href="#避免不必要的渲染" class="headerlink" title="避免不必要的渲染"></a>避免不必要的渲染</h3><p>1️⃣ 父组件更新子组件也会跟着更新，有时候子组件会跟着有些不必要的更新</p><ul><li>使用钩子函数<code>shouldComponentUpdate(nextProps, nextState)</code>，通过返回值决定该组件是否重新渲染。<strong>true</strong>重新，<strong>false</strong>不重新</li><li>钩子函数触发时机：组件重新渲染前执行。<code>shouldComponentUpdate -&gt; render</code></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: state.<span class="property">count</span> + <span class="number">1</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>) &#123;</span><br><span class="line">    <span class="comment">// 返回false，阻止组件重新渲染</span></span><br><span class="line">    <span class="comment">// return false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得最新状态</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(nextState);</span><br><span class="line">    <span class="comment">// 获得当前状态</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 举个例子（假设这里的count是随机的）</span></span><br><span class="line">    <span class="keyword">if</span> (nextState.<span class="property">count</span> === <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;组件更新了&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>计数器：&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="纯组件"><a href="#纯组件" class="headerlink" title="纯组件"></a>纯组件</h3><ul><li><code>PureComponent</code>，其内部自动实现了<code>shouldComponentUpdate</code>钩子，不需要进行手动比较</li><li>组件内部通过分别对比前后两次<code>props</code>和<code>state</code>的值，来决定是否重新渲染</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改为线面的形式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.PureComponent</span> &#123;</span><br><span class="line">  <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>纯组件内部的实现方式：<code>shallow conpare</code>浅层对比。</p><p>对于值类型，直接复制，对于引用类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用类型</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">number</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> newObj = obj;</span><br><span class="line">newObj.<span class="property">number</span> = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj === obj); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>接着上面的引用类型，若果在 React 中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">state = &#123; <span class="attr">obj</span>: &#123; <span class="attr">number</span>: <span class="number">0</span> &#125; &#125;;</span><br><span class="line"><span class="comment">// 错误做法</span></span><br><span class="line">state.<span class="property">obj</span>.<span class="property">number</span> = <span class="number">2</span>;</span><br><span class="line"><span class="title function_">setState</span>(&#123; <span class="attr">obj</span>: state.<span class="property">obj</span> &#125;);</span><br><span class="line"><span class="comment">// PureComponent内部比较：罪行的state.obj===上次的state.onj，返回true，不重新渲染</span></span><br></pre></td></tr></table></figure><ul><li>❗ 所以：<code>state</code>或<code>props</code>中属性的值为引用类型时，应该<strong>创建新的数据，不要直接修改原数据</strong></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确做法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新对象</span></span><br><span class="line"><span class="keyword">const</span> newObj = &#123; ...<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">obj</span>, <span class="attr">number</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">3</span>) &#125;;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">obj</span>: newObj &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是数组，不使用push，unshift这种在原始数组上操作的方式</span></span><br><span class="line"><span class="comment">// 使用concat、slice这种</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">  <span class="attr">list</span>: [...<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span>, &#123; 新数据 &#125;],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="虚拟-DOM-和-Diff-算法"><a href="#虚拟-DOM-和-Diff-算法" class="headerlink" title="虚拟 DOM 和 Diff 算法"></a>虚拟 DOM 和 Diff 算法</h2><ul><li>只要<code>state</code>变化就重新渲染视图，有时候会浪费性能。解决这个问题，用到虚拟 DOM 和 Diff 算法</li><li>虚拟 DOM 本质上就是一个 JavaScript 对象，用来描述希望看到的内容。（实际上就是 jsx 对象）</li></ul><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><ol><li>初次渲染时，React 会根据初始 State。创建一个虚拟 DOM 对象（树）</li><li>根据虚拟 DOM 生成真正的 DOM 然后渲染到页面中</li><li>当数据变化后（setState()），重新根据新的数据，创建新的虚拟 DOM 对象</li><li>使用<code>diff</code>算法，找到与上一个虚拟 DOM 对比，然后渲染需要更新的内容</li><li>然后 React 只更新（patch）变化的内容，渲染到页面中</li></ol><p>render 方法的调用并不意味着浏览器中的重新更新，仅仅说明要进行 diff</p><blockquote><p>虚拟 DOM 不是真正的 DOM，只要可以运行 JavaScript 的地方就可以使用，这就使得 React 可以脱离浏览器而存在，可以在 Android 和 IOS 中使用</p></blockquote><h1 id="Hooks-1"><a href="#Hooks-1" class="headerlink" title="Hooks"></a>Hooks</h1><h2 id="Context-Hooks"><a href="#Context-Hooks" class="headerlink" title="Context Hooks"></a>Context Hooks</h2><ul><li>远距离传输数据，不局限于父子组件，不使用 props</li></ul><h2 id="Ref-Hooks"><a href="#Ref-Hooks" class="headerlink" title="Ref Hooks"></a>Ref Hooks</h2><ul><li>保存一些在渲染中不会用到的数据，比如 DOM 节点和计时器的 ID</li><li>更新 ref 不会重新渲染组件</li><li>一般会用到非 React 体系中</li></ul><h2 id="Effect-Hooks"><a href="#Effect-Hooks" class="headerlink" title="Effect Hooks"></a>Effect Hooks</h2><ul><li>让组件连接到外部系统，并与之同步</li></ul><h1 id="路由基础"><a href="#路由基础" class="headerlink" title="路由基础"></a>路由基础</h1><p>SPA：单页应用程序，就是只有一个 HTML 页面的应用程序。用户体验好，对服务器压力小。<br>路由：就是组件和 URL 的对应关系，让用户到一个视图到另外的视图中。</p><h2 id="基本使用-3"><a href="#基本使用-3" class="headerlink" title="基本使用"></a>基本使用</h2><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install react-router-dom</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure><p>导入三个核心组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span> <span class="keyword">as</span> <span class="title class_">Router</span>, <span class="title class_">Route</span>, <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br></pre></td></tr></table></figure><ul><li>除了<code>BrowserRouter</code>外还有<code>HashRouter</code>，替换掉就行，不过推荐使用前者（使用的是 HTML5 的<code>history API</code>）</li></ul><p>使用<code>&lt;Router&gt;</code>组件包裹整个应用，然后使用<code>&lt;Link to=&quot;/xxx&quot;&gt;</code>指定路由入口，使用<code>Route</code>组件指定路由出口</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">First</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是First<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是路由<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/first&quot;</span>&gt;</span>页面一<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/first&quot;</span> <span class="attr">component</span>=<span class="string">&#123;First&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;Link&gt;</code>最终编译成<code>&lt;a&gt;</code>，to 被编译成 href；可以通过<code>location.pathname</code>得到 to</li><li><code>&lt;Route&gt;</code>的位置在哪，就在哪个位置渲染</li></ul><h2 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h2><ul><li>就是通过 JavaScript 代码来实现页面跳转</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Login</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  handleLogin = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">    <span class="comment">// push 跳转到某个页面</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">history</span>.<span class="title function_">push</span>(<span class="string">&quot;/home&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleLogin&#125;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = props =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleBack</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 返回上一个页面</span></span><br><span class="line">    props.<span class="property">history</span>.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是后台首页<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleLogin&#125;</span>&gt;</span>返回登录页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>编程式导航<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>去登录页面<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Login&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/home&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>默认路由</strong>：进入页面时就会匹配的路由，使用<code>/</code>，后面不加内容</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> path=<span class="string">&quot;/&quot;</span>, component=&#123;<span class="title class_">Home</span>&#125;&gt;&lt;/<span class="title class_">Route</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><h3 id="模糊匹配模式"><a href="#模糊匹配模式" class="headerlink" title="模糊匹配模式"></a>模糊匹配模式</h3><ul><li>默认情况下 React 使用模糊匹配模式</li><li>模糊匹配规则：只要 pathname 以<code>/</code>开头就会匹配成功</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>默认路由<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Home&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span> <span class="attr">component</span>=<span class="string">&#123;Login&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Route</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>不管<code>&lt;Link&gt;</code>中的 to 里面的内容是什么（to=”/a”，to=”/abc”），<code>&lt;Route path=&quot;/&quot;&gt;</code>都会被匹配到</li><li>同样，<code>to=&quot;/login/a/b&quot;</code>也能匹配到<code>path=&quot;/first&quot;</code></li></ul><h3 id="精确模式"><a href="#精确模式" class="headerlink" title="精确模式"></a>精确模式</h3><ul><li>给<code>&lt;Route&gt;</code>添加<code>exact</code>属性</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Route</span> exact path=<span class="string">&quot;/login&quot;</span> component=&#123;<span class="title class_">Login</span>&#125;&gt;&lt;/<span class="title class_">Route</span>&gt;</span><br></pre></td></tr></table></figure><p>推荐使用精确模式</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="一些网站"><a href="#一些网站" class="headerlink" title="一些网站"></a>一些网站</h2><p><strong>组件</strong></p><p><a href="https://chakra-ui.com/docs/components/tabs/props">chakra UI</a></p><p><a href="https://mui.com/core/">Material UI</a></p><h2 id="一些库"><a href="#一些库" class="headerlink" title="一些库"></a>一些库</h2><p><a href="https://github.com/immerjs/use-immer"><code>immer</code></a>：修改<em>state</em>的好帮手，比如对于嵌套好深的对象</p><h2 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h2><ol><li>一般情况下，错误都可以在页面报错信息中找到</li></ol><!--<h1 style="font-size: 50px;"><span style="color: lightblue;">React</span> 快速手册 </h1>--><!--<h1>🌏🚀🚀🚀🚀🌕</h1>-->]]></content>
    
    
    <summary type="html">&lt;p&gt;🎉 希望可以记录一些笔记，保持原有久笔记的前提下动态更新，方便对比复习&lt;/p&gt;
&lt;p&gt;👉 值得学习的 &lt;a href=&quot;https://react.dev/learn/thinking-in-react&quot;&gt;Thinking In React&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://smalljerry.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="js" scheme="https://smalljerry.cn/tags/js/"/>
    
    <category term="react" scheme="https://smalljerry.cn/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>异步JavaScript</title>
    <link href="https://smalljerry.cn/2021/05/17/%E5%BC%82%E6%AD%A5JavaScript/"/>
    <id>https://smalljerry.cn/2021/05/17/%E5%BC%82%E6%AD%A5JavaScript/</id>
    <published>2021-05-17T08:19:36.000Z</published>
    <updated>2025-02-22T02:14:47.356Z</updated>
    
    <content type="html"><![CDATA[<p>🌎 参考：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous">MDN-异步 JavaScript</a>，《深入理解 ES6》- NICHOLAS C.ZAKAS，黑马程序员，王磊同学<span id="more"></span></p><h1 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h1><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>按顺序<strong>等待执行</strong>，代码传入调用栈，执行完毕后再从调用栈中移除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;global begin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar task&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo task&quot;</span>);</span><br><span class="line">  <span class="title function_">bar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;global end&quot;</span>);</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">global begin</span><br><span class="line">foo task</span><br><span class="line">bar task</span><br><span class="line">global end</span><br></pre></td></tr></table></figure><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>📖 JavaScript 引擎是基于单线程事件循环的概念构建的，在同一时间只允许一个代码块在运行。如果一个函数依赖于另一个函数的结果，它只能等待那个函数结束才能继续执行，这样就容易造成代码阻塞。异步就是用于解决这些问题。</p><blockquote><p>当前任务为异步的话，不会等待当前任务执行结束，而是立即执行下一个任务</p></blockquote><p>在 JavaScript 中实现异步的方法有许多种：<code>setTimeout()</code>和<code>setInterval()</code>、事件模型、回调函数、Promise、Fetch、async/await、axios</p><h2 id="setTimeout-作为例子"><a href="#setTimeout-作为例子" class="headerlink" title="setTimeout 作为例子"></a>setTimeout 作为例子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;global begin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">timer1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer1 invoke&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1800</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">timer2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;timer2 invoke&quot;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inner invoke&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;global end&quot;</span>);</span><br></pre></td></tr></table></figure><p>分为四个部分：调用栈，任务队列，事件循环，api 环境（浏览器、nodejs）</p><ol><li>同步代码放进<code>调用栈</code></li><li>遇到计时器，将计时器放进<code>api环境</code>，计时器开始计时（异步操作，不影响第<code>3</code>的进行）</li><li>遇到同步代码，继续放进<code>调用栈</code></li><li>计时器时间到，将计时器（计时器中的回调函数）放进<code>任务队列</code></li><li><code>事件循环</code>检查<code>调用栈</code>是否为空，不为空则继续执行<code>调用栈</code>中的代码</li><li><code>调用栈</code>为空，<code>事件循环</code>检查<code>任务队列</code>是否为空，不为空则将<code>任务队列</code>中的代码放进<code>调用栈</code></li></ol><blockquote><p>JavaScript 是单线程，但是运行它的环境并不是单线程。具体要看运行环境提供的 API 到底是同步还是异步</p></blockquote><h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><blockquote><p>被作为实参传入另一函数，并在该外部函数内被调用，用以来完成某些任务的函数，称为回调函数。</p></blockquote><p>提一下<strong>事件模型</strong>（onclick、onmouseover 等等），其实和回调函数是类似的，比如按钮点击，代码都是在按钮点击的时候执行。不同的是回调函数中被执行的函数不是一赋值的形式传递（=），而是作为参数传入。</p><p>回调函数在<code>Node.js</code>中广泛应用，所以下面的例子中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">readFile</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="function">(<span class="params">err, contents</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(contents);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi!&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>readFile()</code>会开始执行，读取参数 1 中指定的文件，读取结束后执行参数 2(回调函数)，但是读取文件可以说是一个阻塞的过程，所以浏览器是先输出**Hi!**，然后当<code>readFile()</code>执行结束的时候，会在任务队列末尾添加一个新任务，用于处理回调函数里面的内容。</p><p>回调函数是一个很好的异步操作，回调函数嵌套多的时候，就会造成<em>回调地狱</em>。如果想实现复杂的功能，这样的代码很难理解其意思。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">readFile</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="function">(<span class="params">err, contents</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">writeFile</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="function">(<span class="params">err, contents</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">otherFunc1</span>(<span class="function">(<span class="params">err, contents</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">otherFunc2</span>(<span class="function">(<span class="params">err, contents</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// .....</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><ul><li>CommonJS 率先提出，ES6 标准化</li></ul><p>更多：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">全局对象–Promise</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Promises">异步 JavaScript</a></p><p>promise 承诺在未来的某一时间会返回执行的内容，但是不确定在什么时候，不论执行的结果是对的还是错的都会有返回。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>使用 Promise()构造函数创建自己的 promise，这个构造函数接收一个参数，这个参数是一个<em>执行器函数</em>，这个执行器函数有两个参数，这两个参数是两个函数，这两个函数分别是：处理成功执行的 resolve()、处理失败执行的 reject()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;世界！&quot;</span>);</span><br><span class="line">  <span class="comment">// 或者失败</span></span><br><span class="line">  <span class="comment">// reject(&#x27;失败！&#x27;)</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;，&quot;</span>);</span><br></pre></td></tr></table></figure><p>上面代码依次输出<code>你好，世界！</code>；</p><ul><li>首先因为<em>Promise 的执行器</em>中的代码会<strong>立刻执行</strong>，然后再执行其他的代码</li><li>调用<code>resolve()</code>后触发一个<strong>异步操作</strong>，传入<code>then</code>和<code>catch()</code>的函数会被添加到任务队列中并<em>异步执行</em></li><li>虽然上面的<code>then()</code>在<code>console.log(&#39;，&#39;)</code>之前，但是与执行器不同的是并没有立即执行，这是因为完成处理程序和拒绝处理程序总是在执行器完成后被添加到<em>任务队列的末尾</em>。</li></ul><p>promise 中可以使用 promise 的 <em>原形</em> 和 _静态方法_。👉 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">更多</a></p><p><code>promise.prototype.then()</code>：处理成功执行</p><p><code>promise.prototype.catch()</code>：处理失败执行</p><p><code>promise.prototype.finally()</code>：不管是成功还是失败都执行</p><p>promise.then()，接收两个参数（可选），这两个参数是处理函数，参数 1 是成功执行的处理函数，参数 2 是失败的处理函数，所以<code>then(null, func) 和 catch()</code>的作用是一样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// value是上面成功执行时resolve()传过来的参数</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 成功！</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="literal">null</span>, <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 失败！</span></span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 失败</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;finish.&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Promise 对象的<code>then()</code>方法返回一个新的 Promise 实例，所以可以链式调用</li><li>后面的<code>then()</code>就是为上一个<code>then()</code>的返回的 Promise 添加处理函数</li><li>前面的<code>then()</code>返回的值会作为后面<code>then()</code>的参数<ul><li>如果这个值是一个 Promise 实例，那么后面的<code>then()</code>会等待这个 Promise 实例执行完毕</li></ul></li></ul><p>▶️ 使用第二个参数作为<code>catch()</code>而不是使用链式<code>catch()</code>，区别是第二个参数只捕获当前的错误，而不是整条链的。有利有弊：</p><ul><li>优点：可以在链中的任何位置处理错误，或者说并且容易找出错误发生的位置</li><li>缺点：如果在链中的多个位置都需要处理错误，就需要多次调用<code>catch()</code>，这样就会造成代码冗余</li></ul><p>除了使用链条最后的<code>catch()</code>捕获整条链的错误，还可以使用<code>unhandledrejection</code>事件捕获整条链的错误</p><p><strong>web</strong>环境中（全小写命名）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;unhandledrejection&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">reason</span>); <span class="comment">// 失败原因，一般是一个错误对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">promise</span>); <span class="comment">// 失败的 Promise 实例</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>node</strong>环境中（驼峰式命名）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">process.<span class="title function_">on</span>(<span class="string">&quot;unhandledRejection&quot;</span>, <span class="function">(<span class="params">reason, promise</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(reason); <span class="comment">// 失败原因，一般是一个错误对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(promise); <span class="comment">// 失败的 Promise 实例</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>加载图片</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadImage</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    image.<span class="property">src</span> = url;</span><br><span class="line">    image.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(image);</span><br><span class="line">    &#125;;</span><br><span class="line">    image.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&quot;加载图片出错！&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">loadImage</span>(<span class="string">&quot;coffee.jpg&quot;</span>).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(result);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p><code>Promise.resolve()</code>：返回一个<strong>通过</strong>的 promise</p><p>😅 如果里面传入了一个对象，里面又刚好有<code>then()</code>方法，那么这个对象就会被当作一个 promise 实例，然后返回这个对象（thenable）</p><ul><li>Promise 为普及的时候，其他库可能会有自己的 promise 实现，这些实现可能不会遵循 Promise/A+ 规范，但是会有<code>then()</code>方法，这样就可以使用<code>Promise.resolve()</code>将其转换为 Promise 实例</li></ul><p><code>Promise.reject()</code>：返回一个<strong>拒绝</strong>的 promise</p><p>🎇 以下静态方法参数接收一个 <em>数组</em> 作为参数，数组里面的是 promise 实例（<code>Array&lt;Promise&gt;</code>）</p><ul><li>返回值是一个 promise 实例</li></ul><p><code>Promise.all()</code>：只要有一个<strong>拒绝</strong>，就是拒绝。</p><p><code>Promise.race()</code>：只要有一个<strong>通过</strong>，就是通过</p><p><code>Promise.allSettled()</code>：不管是<strong>拒绝</strong>还是<strong>通过</strong>，都会执行</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>ajax 请求超时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="title function_">ajax</span>(<span class="string">&quot;api/xxx&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> timeout = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;请求超时&quot;</span>)), <span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([request, timeout])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>node.js 中的读取文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readFile</span>(<span class="params">filename</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(filename, &#123; <span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span> &#125;, <span class="function">(<span class="params">err, contents</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">resolve</span>(contents);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise = <span class="title function_">readFile</span>(<span class="string">&quot;example.txt&quot;</span>);</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">contents</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(contents);</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">promise.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">contents</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(contents);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title function_">readFile</span>(<span class="string">&quot;happy.txt&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title function_">readFile</span>(<span class="string">&quot;happyok.txt&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title function_">readFile</span>(<span class="string">&quot;happyno.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3]).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 由于p1执行较快，Promise的then()将获得结果&#x27;P1&#x27;。p2,p3仍在继续执行，但执行结果将被丢弃。</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h1><blockquote><p>对比生成器，<code>*</code>去掉，换成<code>async</code>，<code>yield</code>换成<code>await</code>，不需要执行器函数，返回的是一个 promise 实例</p></blockquote><blockquote><p><code>async</code>和<code>await</code>关键字让我们可以用一种更简洁的方式写出基于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise"><code>Promise</code></a>的异步行为，而无需刻意地链式调用<code>promise</code>。</p></blockquote><h2 id="async"><a href="#async" class="headerlink" title="async"></a>async</h2><p>使用 <code>async</code> 关键字，把它放在函数声明之前，使其成为 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">async function</a></p><ul><li>async 函数是使用<code>async</code>关键字声明的函数，其中允许使用<code>await</code>关键字。</li></ul><p>将 <code>async</code> 关键字加到函数申明中，可以告诉它们返回的是 promise，而不是直接返回值。</p><h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><ul><li>原生 Promise，等待</li><li>thenable 对象，构造成新的 Promise</li><li>不是 thenable 对象，包装成 <code>Promise.resolve()</code></li></ul><p><del>await 只在异步函数里面才起作用</del>。它可以放在任何异步的，基于 promise 的函数之前。</p><blockquote><p><code>nodejs 14.8.0</code> es 模块支持顶级<code>await</code>; 浏览器环境，也是在模块顶级可用</p></blockquote><p>它会暂停代码在该行上，直到 promise 完成，然后返回结果值。在暂停的同时，其他正在等待执行的代码就有机会执行了。(这样的异步代码看起来像同步代码)</p><h2 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h2><p>将上面的 promise 改为 async 模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">load</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">  image.<span class="property">src</span> = url;</span><br><span class="line">  <span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">append</span>(<span class="params">image</span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(image);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadImage</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> image = <span class="keyword">await</span> <span class="title function_">load</span>(url);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">append</span>(image);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">loadImage</span>(<span class="string">&quot;coffee.jpg&quot;</span>);</span><br></pre></td></tr></table></figure><p>结合 axios 使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.  async 基础用法</span></span><br><span class="line"><span class="comment">// 1.1 async作为一个关键字放到函数前面</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 1.2 await关键字只能在使用async定义的函数中使用      await后面可以直接跟一个 Promise实例对象</span></span><br><span class="line">  <span class="keyword">var</span> ret = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;nihao&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// console.log(ret.data)</span></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1.3 任何一个async函数都会隐式返回一个promise   我们可以使用then 进行链式编程</span></span><br><span class="line"><span class="title function_">queryData</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.  async    函数处理多个异步函数</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&quot;http://localhost:3000&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 2.1  添加await之后 当前的await 返回结果之后才会执行后面的代码</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> info = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;async1&quot;</span>);</span><br><span class="line">  <span class="comment">//2.2  让异步代码看起来、表现起来更像同步代码</span></span><br><span class="line">  <span class="keyword">var</span> ret = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;async2?info=&quot;</span> + info.<span class="property">data</span>);</span><br><span class="line">  <span class="keyword">return</span> ret.<span class="property">data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">queryData</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h1><p>宏任务，重新回到任务队列的末尾，等待下一次事件循环；而微任务，会在当前任务执行结束后立即执行。</p><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>知识点：<code>yeild</code>关键字，<code>generator.next()</code>，<code>gernerator.throw()</code>，<code>generator.return()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初次调用，里面内容尚未执行</span></span><br><span class="line"><span class="keyword">const</span> generator = <span class="title function_">foo</span>();</span><br><span class="line"><span class="comment">// 只有调用next()才会执行</span></span><br><span class="line">generator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><p>在里面添加<code>yield</code>关键字，可以让函数暂停执行，然后返回一个值</p><ul><li>这个值是一个对象，包含两个属性：<code>value</code>和<code>done</code>，<code>value</code>是<code>yield</code>后面的值，<code>done</code>是一个布尔值，表示是否执行完毕。</li><li>和<code>return</code>不同，<code>yield</code>不会立即结束函数的执行，而是返回一个值，然后暂停执行，等到下一次调用<code>next()</code>的时候，再继续执行。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generator = <span class="title function_">foo</span>();</span><br><span class="line">generator.<span class="title function_">next</span>(); <span class="comment">// start</span></span><br><span class="line">generator.<span class="title function_">next</span>(); <span class="comment">// end</span></span><br></pre></td></tr></table></figure><p>如果调用<code>next()</code>的时候传入了参数，那么这个参数会作为上一次<code>yield</code>的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> val = <span class="keyword">yield</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(val);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generator = <span class="title function_">foo</span>();</span><br><span class="line">generator.<span class="title function_">next</span>(); <span class="comment">// start</span></span><br><span class="line">generator.<span class="title function_">next</span>(<span class="string">&quot;world&quot;</span>); <span class="comment">// world end</span></span><br></pre></td></tr></table></figure><p>如果调用<code>gernerator.throw()</code>，会抛出一个错误，这个错误在<em>生成器函数</em>内部抛出，可使用<code>try...catch</code>捕获</p><h2 id="管理异步"><a href="#管理异步" class="headerlink" title="管理异步"></a>管理异步</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> users = <span class="keyword">yield</span> <span class="title function_">ajax</span>(<span class="string">&quot;api/users.json&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(users);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> posts = <span class="keyword">yield</span> <span class="title function_">ajax</span>(<span class="string">&quot;api/posts.json&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(posts);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generator = <span class="title function_">main</span>();</span><br><span class="line"><span class="keyword">const</span> result1 = generator.<span class="title function_">next</span>();</span><br><span class="line">result1.<span class="property">value</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result2 = generator.<span class="title function_">next</span>(data);</span><br><span class="line">  <span class="keyword">if</span> (result2.<span class="property">done</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  result2.<span class="property">value</span>.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    generator.<span class="title function_">next</span>(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>改为递归的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">yield</span> <span class="title function_">ajax</span>(<span class="string">&quot;api/users.json&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(users);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> posts = <span class="keyword">yield</span> <span class="title function_">ajax</span>(<span class="string">&quot;api/posts.json&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(posts);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleResult</span>(<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">done</span>) <span class="keyword">return</span>;</span><br><span class="line">  result.<span class="property">value</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">handleResult</span>(generator.<span class="title function_">next</span>(data));</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 抛出异常，在生成器函数main()中使用try...catch捕获</span></span><br><span class="line">      generator.<span class="keyword">throw</span>(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generator = <span class="title function_">main</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">handleResult</span>(generator.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure><p>封装成执行器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">generator</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> iterator = <span class="title function_">generator</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleResult</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">done</span>) <span class="keyword">return</span>;</span><br><span class="line">    result.<span class="property">value</span></span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">handleResult</span>(iterator.<span class="title function_">next</span>(data));</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        iterator.<span class="keyword">throw</span>(err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleResult</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">run</span>(main);</span><br></pre></td></tr></table></figure><p>有一个专门的库可以实现这个功能：<a href="https://github.com/tj/co" target="_blank">co</a></p><p>不过后来出现了<code>async</code>和<code>await</code>，所以这个库用得就少了。</p><!-- <span style="font-size: 70px; color: black; background-color: yellow;padding: 20px">异步JavaScript</span> --><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;🌎 参考：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous&quot;&gt;MDN-异步 JavaScript&lt;/a&gt;，《深入理解 ES6》- NICHOLAS C.ZAKAS，黑马程序员，王磊同学</summary>
    
    
    
    <category term="前端学习" scheme="https://smalljerry.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="js" scheme="https://smalljerry.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>网络请求</title>
    <link href="https://smalljerry.cn/2021/05/08/ajax%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://smalljerry.cn/2021/05/08/ajax%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2021-05-08T09:01:24.000Z</published>
    <updated>2025-02-22T02:14:47.345Z</updated>
    
    <content type="html"><![CDATA[<p>🌎 列举 JavaScript 中网络请求的方式</p><p>📦 ajax, jqeury.ajax, fetch, axios, got</p><span id="more"></span><h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><blockquote><p>环境: 浏览器</p></blockquote><p>全称：异步 JavaScript 和 XML（Asynchronous JavaScript and XML）</p><ul><li>不是一种技术，而是一种将现有技术结合起来的使用方法。🌎 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX">mdn ajax 文档</a></li><li>虽然其中 X 代表 <em>XML_，但是 _JSON</em> 是首选类型</li></ul><p>使用 AJAX 发送的请求和传统的表单 (<code>&lt;form&gt;</code>标签) 的请求方式不一样，所以如果使用按钮，其属性类型不用设置为<code>submit</code>，<code>name</code>属性也不用写出来</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建ajax对象</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 2. 请求的方式和请求地址。第三个参数 boolean 指定是否为异步</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;http:localhost/test&quot;</span>);</span><br><span class="line"><span class="comment">// 3. 发送请求。参数可传递任何想传到服务器的内容</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line"><span class="comment">// 4. 获取服务器端响应的内容</span></span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上面第 4 点中，也可以使用<code>xhr.onreadystatechange</code>事件，不同的是使用这个方法需要对响应状态进行判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">onreadystatechange</span>() = <span class="keyword">function</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个方法兼容低版本 IE 浏览器，<code>xhr.onload</code>不兼容低版本 IE 浏览器</li><li>这个方法会被调用多次，<code>xhr.onload</code>只调用一次</li><li>这个方法需要对响应状态码判断，<code>xhr.onload</code>不用</li></ul><blockquote><p>在上面中得到的响应数据是<code>String</code>类型，要将其转换可以使用<code>JSON.parse(xhr.responseText)</code></p></blockquote><h2 id="请求参数的传递"><a href="#请求参数的传递" class="headerlink" title="请求参数的传递"></a>请求参数的传递</h2><p>例如有这样的一个页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> /&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 配置请求参数</span></span><br><span class="line"><span class="keyword">let</span> userName = username.<span class="property">value</span>;</span><br><span class="line"><span class="keyword">let</span> userAge = age.<span class="property">value</span>;</span><br><span class="line"><span class="keyword">let</span> params = <span class="string">&quot;username=&quot;</span> + userName + <span class="string">&quot;&amp;age=&quot;</span> + userAge;</span><br><span class="line"><span class="comment">// 参数在请求的url中</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;http:localhost/get?&quot;</span> + params);</span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>请求地址与参数之间使用 <code>?</code> 隔开，参数与参数之间使用 <code>&amp;</code> 隔开</li></ul><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> userName = username.<span class="property">value</span>;</span><br><span class="line"><span class="keyword">let</span> userAge = age.<span class="property">value</span>;</span><br><span class="line"><span class="keyword">let</span> params = <span class="string">&quot;username=&quot;</span> + userName + <span class="string">&quot;&amp;age=&quot;</span> + userAge;</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;http:localhost/post&quot;</span>);</span><br><span class="line"><span class="comment">// post请求需要设置请求参数的类型</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line"><span class="comment">// 发送请求时需要传递参数</span></span><br><span class="line">xhr.<span class="title function_">send</span>(params);</span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>求参数的类型有：</p><ul><li><code>application/x-www-form-urlencoded</code>的形式：name=zs&amp;age=20</li><li><code>application/json</code>的形式：{ name: ‘zs’, age: 20 }</li></ul><p>在请求头中指定 <em>Content-Type</em> 属性的值是 <em>application/json</em> 的时候就是告诉服务器当前请求的格式是 json</p><p>在上面的代码中，是用 <em>json</em> 格式发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"><span class="comment">// 然后需要将json对象转换成json字符串</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;zs&quot;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;));</span><br></pre></td></tr></table></figure><p>如果使用的是 Node.js，就在入口文件中配置，来决定请求的参数类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>());</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br></pre></td></tr></table></figure><blockquote><p>传统的表单提交和 GET 请求都<strong>不支持</strong>提交 json 类型的数据</p></blockquote><h2 id="响应状态"><a href="#响应状态" class="headerlink" title="响应状态"></a>响应状态</h2><h3 id="ajax-状态码"><a href="#ajax-状态码" class="headerlink" title="ajax 状态码"></a>ajax 状态码</h3><p>在创建 ajax 对象、配置、发送请求、接收服务端返回的内容的过程中，会返回一个数值，这就是 ajax 状态码，使用<code>xhr.readyState</code>获得。</p><ul><li>0：请求没有初始化</li><li>1：服务连接已经建立，但还没调用 send()</li><li>2：已经加载完成</li><li>3：正在处理请求（这时候有一部分的响应数据是可以使用的了）</li><li>4：响应完成</li></ul><p>数值可通过<code>XMLHttpRequest.名称获得</code>：有<code>DONE</code>,<code>OPENED</code>,<code>HEADERS_RECEIVED</code>,<code>LOADING</code>,<code>DONE</code></p><h3 id="http-状态码"><a href="#http-状态码" class="headerlink" title="http 状态码"></a>http 状态码</h3><ol><li>网络正常，服务器接收请求之后返回的数据不是预期的内容，可以使用<code>xhr.status</code>获取服务器返回的 http 状态码来判断（_服务器状态码和 ajax 状态码不一样_）</li><li>网络正常，服务端返回了 <em>404</em> 状态码，可能是请求的地址有错</li><li>网络正常，服务器返回了 <em>505</em> 状态码，服务器出了问题</li><li>网络断了，使用 <code>xhr.onerror()</code>来处理错误</li></ol><blockquote><p>区分 ajax 状态码和 http 状态码</p><ul><li><p>ajax 状态码：表示 ajax 的请求过程状态，是 ajax 对象返回的</p></li><li><p>http 状态码：表示请求的结果，是服务器返回的</p></li></ul></blockquote><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="低版本-IE-浏览器缓存"><a href="#低版本-IE-浏览器缓存" class="headerlink" title="低版本 IE 浏览器缓存"></a>低版本 IE 浏览器缓存</h4><p>在低版本的 IE 浏览器中，请求的内容只基于第一次请求，即是请求的文件里面的内容发生了变化，客户端依然使用旧的数据。</p><p>解决方法，使得每次请求的参数不一样（但是不能和现有的参数相同）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;http://test.com?page=&quot;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br></pre></td></tr></table></figure><h4 id="ajax-异步"><a href="#ajax-异步" class="headerlink" title="ajax 异步"></a>ajax 异步</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>先输出 1，再输出 2</li></ul><h1 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax"></a>jQuery.ajax</h1><p>使用大致分为两种：</p><ul><li>浏览器环境<code>&lt;script&gt;</code>标签引入，引入从官网下载的<a href="https://jquery.com/download/">jqeury</a>，或者通过 CDN</li><li>node 环境 npm 包</li></ul><p><strong>浏览器环境</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-3.7.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>BTN<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&quot;#btn&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>: <span class="string">&quot;xxx&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">succuess</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">error</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>node 环境使用</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery --save</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ajax &#125; = <span class="built_in">require</span>(<span class="string">&quot;jqeury&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h1><blockquote><p>环境: 浏览器，nodejs v17.5.0, v16.15.0 开始支持 fetch</p></blockquote><p>和 <em>jquery.ajax()</em> 不同有：</p><ul><li>返回的<code>Promise</code>不会因为 HTTP 错误状态而被拒绝（404、500），正常 resolve，只不过 <em>ok</em> 状态设置成了 _false_。网络故障或者情趣阻止时才会 reject</li><li>默认不发送跨源 cookie</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://example.com/movies.json&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure><ul><li>通过<code>response.ok</code>来判断请求是否成功（值是 boolean 类型）。<code>true</code>的时候，状态码范围是 <code>200-299</code></li><li><code>response.status</code>，状态码，默认值是 <code>200</code></li><li><code>response.statusText</code>：默认值是 <code>&quot;&quot;</code>。<ul><li>OK -&gt; 200</li><li>Continue -&gt; 100</li><li>Not Found -&gt; 404</li></ul></li></ul><p>第二个参数设置配置对象(init 对象)，常用的有</p><ul><li>method：请求方法</li><li>mode：no-cors, *cors, same-origin</li><li>headers: { “Content-Type”: “application/json” },</li><li>body: JSON.stringify(data)</li></ul><p>请求体可以配合 <code>FormData</code>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line"><span class="keyword">const</span> fileField = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input[type=&quot;file&quot;]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;abc123&quot;</span>);</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&quot;avatar&quot;</span>, fileField.<span class="property">files</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://example.com/profile/avatar&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;PUT&quot;</span>,</span><br><span class="line">  <span class="attr">body</span>: formData,</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Success:&quot;</span>, result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="自定义请求对象"><a href="#自定义请求对象" class="headerlink" title="自定义请求对象"></a>自定义请求对象</h2><p>通过<code>new Request</code>创建一个请求对象（和<code>fetch</code>接收的参数相同）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myHeaders = <span class="keyword">new</span> <span class="title class_">Headers</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myRequest = <span class="keyword">new</span> <span class="title class_">Request</span>(<span class="string">&quot;flowers.jpg&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="attr">headers</span>: myHeaders,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;cors&quot;</span>,</span><br><span class="line">  <span class="attr">cache</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(myRequest)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">blob</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">myBlob</span>) =&gt;</span> &#123;</span><br><span class="line">    myImage.<span class="property">src</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(myBlob);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>或许在要复用某些代码的时候，这会很好用</p><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><blockquote><p>环境: 浏览器，nodejs</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>CDN:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><p>普通请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// get请求（默认方式）</span></span><br><span class="line"><span class="title function_">axios</span>(<span class="string">&quot;/user/12345&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// post请求</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;/user/12345&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&quot;Fred&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&quot;Flintstone&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>请求 stream 类型数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 node.js 用GET请求获取远程图片</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;http://bit.ly/2mTM3nY&quot;</span>,</span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&quot;stream&quot;</span>,</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">  response.<span class="property">data</span>.<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">&quot;ada_lovelace.jpg&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a>响应结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  <span class="attr">statusText</span>: <span class="string">&#x27;OK&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 是服务器响应头</span></span><br><span class="line">  <span class="comment">// 所有的 header 名称都是小写，而且可以使用方括号语法访问</span></span><br><span class="line">  <span class="comment">// 例如: `response.headers[&#x27;content-type&#x27;]`</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `config` 是 `axios` 请求的配置信息</span></span><br><span class="line">  <span class="attr">config</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `request` 是生成此响应的请求</span></span><br><span class="line">  <span class="comment">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span></span><br><span class="line">  <span class="comment">// 在浏览器中则是 XMLHttpRequest 实例</span></span><br><span class="line">  <span class="attr">request</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="got"><a href="#got" class="headerlink" title="got"></a>got</h1><blockquote><p>环境: nodejs</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install got</span><br></pre></td></tr></table></figure><p>参考网站：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">MDN</a></p><!-- <br/><br/><br/><div style="text-align: center"><span style="font-size: 80px">发送<span style="color: red;">HTTP</span>请求</span><br /><span style="font-size: 50px">💻🔁🌏</span></div><br/><br/><br/><br/> -->]]></content>
    
    
    <summary type="html">&lt;p&gt;🌎 列举 JavaScript 中网络请求的方式&lt;/p&gt;
&lt;p&gt;📦 ajax, jqeury.ajax, fetch, axios, got&lt;/p&gt;</summary>
    
    
    
    <category term="前端学习" scheme="https://smalljerry.cn/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="js" scheme="https://smalljerry.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>git基础使用流程</title>
    <link href="https://smalljerry.cn/2021/04/21/git%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B/"/>
    <id>https://smalljerry.cn/2021/04/21/git%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B/</id>
    <published>2021-04-21T11:44:42.000Z</published>
    <updated>2025-02-22T02:14:47.356Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录<span style="color: orange;">git</span>和<span style="color: purple;">github</span>的使用</p><p>操作系统：Windows</p><span id="more"></span><h1 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>👉 <a href="https://git-scm.com/downloads">Git下载地址</a></p><p>下载后安装的时候一直点下一步就行</p><p>安装成功后可以得到3个东西：git bash、git cmd、git gui。</p><p><img src="https://z3.ax1x.com/2021/04/21/cqkbFA.png" alt="git install successfully"></p><p>git bash 和 git cmd 在基本上是没什么区别的，深入的现在先不管。git gui 就是图形界面，一般情况下命令行模式就行了。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置提交人的名字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 你的名字</span><br></pre></td></tr></table></figure><p>配置提交人的邮箱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email 你的邮箱</span><br></pre></td></tr></table></figure><p>查看现有的配置信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><p>如果要重新配置这些信息，重写就行。也可以使用配置文件配置，在<em>当前用户目录下的 <code>.gitconfig</code></em> 文件中。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>介绍本地git仓库的基本使用和远程仓库github的基本使用</p><h2 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h2><p>在命令行中操作，git bash、git cmd、cmd、powershell 随便哪个都行</p><h3 id="基本工作流程"><a href="#基本工作流程" class="headerlink" title="基本工作流程"></a>基本工作流程</h3><ol><li><code>git init</code>：初始化 git 仓库</li><li><code>git status</code>：查看文件状态（被git管理的文件和没被git管理的文件）</li><li><code>git add 文件</code>：将文件交给git管理（一般直接<code>git add .</code>，把整个目录管理）</li><li><code>git commit -m &quot;要写的备注信息&quot;</code>：向仓库提交内容，<code>-m</code>是messages的缩写</li><li><code>git log</code>：查看提交记录</li></ol><p>图片过程</p><p><img src="https://z3.ax1x.com/2021/04/21/cqZOAg.png" alt="初始化git仓库"></p><p><img src="https://z3.ax1x.com/2021/04/21/cqepj0.png" alt="查看当前状态，红色代表还未被管理的文件"></p><p><img src="https://z3.ax1x.com/2021/04/21/cqenjx.png" alt="将文件交给git管理，然后查看状态，绿色就ok了"></p><p><img src="https://z3.ax1x.com/2021/04/21/cqeQHO.png" alt="将内容提交到本地仓库"></p><p><img src="https://z3.ax1x.com/2021/04/21/cqeBVS.png" alt="再次使用 git status 查看情况，已经空了"></p><p><img src="https://z3.ax1x.com/2021/04/21/cqe5aF.png" alt="查看提交记录"></p><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><p>使用 <code>git commit</code> 提交的时候除了提交到本地仓库，还会存在<em>暂存区</em> 中。</p><p>用暂存区的文件覆盖本地工作目录下的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 文件</span><br></pre></td></tr></table></figure><p>将文件从暂存区中删除（不会删除工作目录中的文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached 文件</span><br></pre></td></tr></table></figure><p>将仓库中指定的记录恢复出来（这个ID可以使用<code>git log</code>查看）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rest --hard commitID</span><br></pre></td></tr></table></figure><blockquote><p><strong>使用情况：</strong></p><p>有 <strong>A → B → C → D</strong> 四个记录，当前工作目录出现了问题，想回到 <strong>B</strong>，在回到 <strong>B</strong> 的时候，工作目录改变，<strong>C</strong>、<strong>D</strong> 记录也会被删除</p></blockquote><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>意思就是可以在一个新的分支上开发新的功能，另外分支做其他事情</p><p>👉 <strong>比如</strong>：</p><p>主分支（master）：第一次提交时自动创建的，一般情况下不会在主分支上直接进行开发</p><p>开发分支：从主分支中分出，用于开发，在开发完成之后再并入主分支</p><p>功能分支：基于开发分支中分出，如开发一个独立功能，功能开发完之后再并入开发分支，然后删掉这个功能分支以保持这个分支的干净</p><p>bug分支等等实现其他功能的分支</p><ol><li><p><code>git branch</code>：查看分支（在分支名称前面有<code>*</code>，代表当前选中的分支）</p><p><img src="https://z3.ax1x.com/2021/04/21/cqJpvD.png" alt="分支"></p></li><li><p><code>git branch 分支名</code>：创建分区。在哪个分支中操作，就是基于哪个分支创建。</p><p><img src="https://z3.ax1x.com/2021/04/21/cqJJP0.png" alt="创建分支"></p></li><li><p><code>git checkout 分支名</code>：切换分支</p><p><img src="https://z3.ax1x.com/2021/04/21/cqJwqJ.png" alt="切换分支"></p></li><li><p><code>git merge 来源分支</code>：合并分区。如：将开发分支合并到主分支，<span style="color: red;">要先将当前分支切换到主分支</span>，因为被合并的是开发分支</p><p><img src="https://z3.ax1x.com/2021/04/21/cqJfqH.png" alt="合并分支"></p></li><li><p><code>git branch -d 分支名称</code>：删除分支。分支没有被合并之前是不会被删除的，如果想强制删除，将<code>-d</code>改为<code>-D</code>。在当前分支删除当前分支也是不行的</p><p><img src="https://z3.ax1x.com/2021/04/21/cqYom4.png" alt="删除分支"></p></li></ol><h3 id="暂时保存修改"><a href="#暂时保存修改" class="headerlink" title="暂时保存修改"></a>暂时保存修改</h3><p>出现情况：当前工作还没完成，临时有其他工作要做，但是又还不想使用<code>git commit</code>提交，分支在没<code>commit</code>之前是不可切换的。可以使用临时保存（分支临时切换）</p><ol><li><code>git stash</code>：存储临时改动</li><li><code>git stash pop</code>：恢复改动</li></ol><blockquote><p>这两个命令是独立于分支的，在其他分支上执行也会产生结果，所以要注意当前分支。</p></blockquote><h2 id="github使用"><a href="#github使用" class="headerlink" title="github使用"></a>github使用</h2><h3 id="多人工作的流程"><a href="#多人工作的流程" class="headerlink" title="多人工作的流程"></a>多人工作的流程</h3><ol><li>小明在本地创建仓库，然后<code>push</code>到远程仓库</li><li>小李等其他人，将远程的代码<code>clone</code>下来（这些人不需要创建本地仓库）</li><li>小李等人完成工作后，将代码<code>push</code>上远程仓库</li><li>小明将远程代码<code>pull</code>回来，就得到来小李等人合作写好的代码</li></ol><h3 id="首次连接github"><a href="#首次连接github" class="headerlink" title="首次连接github"></a>首次连接github</h3><p>👉<a href="https://github.com/">github官网</a></p><p>登录之后，点击右上角的➕，点<code>new repository</code>新建一个仓库</p><p>填上仓库的名字，点击公开（public）或者不公开（private）都行，其他的选项可以先不要管。点击绿色按钮（create repository）即可创建</p><p><img src="https://z3.ax1x.com/2021/04/21/cqtHKS.png" alt="创建新仓库"></p><p>进入里面后有教你操作的提示，分为三部分。这里已经有了本地仓库，所以按照第二种操作就行</p><p><img src="https://z3.ax1x.com/2021/04/21/cqNYGt.png" alt="连接远程仓库"></p><p>复制仓库的 HTTPS 或者 SSH 链接 (这里以上面的链接为例)，<strong>在刚才操作git的目录中</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/dsjerry/testGitHub.git</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -M main</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><ul><li> <code>origin</code>：用于代替这一长串https或ssh的别名</li><li> <code>-M</code>：修改分支的名字。（git自动生成的是master分支，不过传到github的时候，github推荐的是将master改为main）因此不是必须的。</li><li> <strong>第一次</strong>要这么长，以后直接 <strong><code>git push</code></strong> 就行。</li></ul><p>以上操作就可以实现连接远程的仓库，连接的操作已经完成了</p><blockquote><p>其实第一条命令可以说是复合命令，下面分解具体步骤，当然现实中就随便怎么选都行，如果你不想了解，直接跳过就行</p></blockquote><p>回到开始的话</p><p>首先</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push https://github.com/dsjerry/testGitHub.git master</span><br></pre></td></tr></table></figure><p>后来因为这串HTTPS或者SSH是在太长，所以要给这串东西取个别名（<strong>origin</strong>就是别名）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/dsjerry/testGitHub.git</span><br></pre></td></tr></table></figure><p>以后使用一下命令就行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><blockquote><p>第一次提交要填密码，以后就不用了。密码在这里看得到：控制面板 → 凭据管理器 → Windows凭据</p></blockquote><p>使用<code>-u</code>记住仓库地址、别名和分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>以后直接使用<code>git push</code>就行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p>这就是分解的步骤。</p><h3 id="克隆-推送-拉取"><a href="#克隆-推送-拉取" class="headerlink" title="克隆 推送 拉取"></a>克隆 推送 拉取</h3><h4 id="克隆-clone"><a href="#克隆-clone" class="headerlink" title="克隆(clone)"></a>克隆(clone)</h4><p>克隆（clone）到本地（小李克隆小明的，别名也会一起克隆）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/dsjerry/testGitHub.git</span><br></pre></td></tr></table></figure><h4 id="推送-push"><a href="#推送-push" class="headerlink" title="推送(push)"></a>推送(push)</h4><p>小李将本地代码推送（push）到小明的远程仓库。在推送前，小李等人是没有权限推送到小明的仓库的。需要小明邀请小李。</p><p>打开当前github仓库页面，找到<strong>settings</strong>，选中<strong>Manage access</strong>，点击<strong>Invite a collaborator</strong>然后把小李的github账号添加上去就行</p><p><img src="https://z3.ax1x.com/2021/04/21/cqwgk4.png" alt="仓库授权"></p><p>小李在接收到邀请邮件后，同意邀请就行了。</p><p><img src="https://z3.ax1x.com/2021/04/21/cqwqtH.png" alt="同意邀请"></p><h4 id="拉取-pull"><a href="#拉取-pull" class="headerlink" title="拉取(pull)"></a>拉取(pull)</h4><p>经过一轮开发后，小明就可以把大家的成果拉去到自己本地啦</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull https://github.com/dsjerry/testGitHub.git master</span><br></pre></td></tr></table></figure><ul><li>拉取属于<em>读</em> 操作，不需要密码验证</li></ul><h4 id="可能的冲突"><a href="#可能的冲突" class="headerlink" title="可能的冲突"></a>可能的冲突</h4><p>两个人修改同一个文件时可能会遇到冲突，小明发了新的版本，小李的旧版本推不上。</p><p>小李可以先把小明的新版 <code>pull</code> 下来，然后在终端中会有 <code>&lt;&lt;&lt;......&gt;&gt;&gt;</code>这样出现，指出了冲突的地方，然后以 <code>=====</code>将不同的冲突分隔开</p><h3 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h3><p>即使不是本地成员，也可以像仓库提交代码，前提是这些代码要经过审核才能并入主要代码。</p><p><strong>操作方法</strong></p><p>访问别人的仓库，然后点击<strong>Fork</strong>，相当于复制别人的；然后<code>clone</code>到本地修改，修改完成后<code>push</code>上去</p><p><img src="https://z3.ax1x.com/2021/04/22/cqriND.png" alt="Fork"></p><p>对于仓库的管理人员，要接受外来的推送，在仓库页面中点<strong>Pull request</strong> → <strong>New pull request</strong> → <strong>Create pull request</strong></p><p><img src="https://z3.ax1x.com/2021/04/22/cqrtuq.png" alt="推送请求"></p><p>随后，点击<strong>commits</strong>，会看到修改的内容，点<strong>file changed</strong>可以查看到文件的改变。仓库的管理人员点击<strong>comfirm merge</strong>就可以接受合并。</p><h3 id="SSH免登陆"><a href="#SSH免登陆" class="headerlink" title="SSH免登陆"></a>SSH免登陆</h3><p>通过本机的私钥和服务器端的公钥进行连接认证，认证通过之后就行</p><p><strong>生成私钥</strong></p><p>输入命令，然后一直回车。生成的文件会在系统目录下的用户目录下的 <strong>.ssh</strong> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><ul><li>id_rsa：私钥，存在本地的</li><li>id_rsa.pub：公钥，放在github上的</li></ul><p>设置公钥，在github页面，点击自己的<strong>头像</strong>，点 <strong>settings</strong> → <strong>SSH and GPG keys</strong>，选中 <strong>New SSH key</strong>添加自己的公钥</p><p>以后再使用 <code>git push</code>的时候，使用 SSH 链接的时候就可以不用输入密码</p><h3 id="git文件忽略"><a href="#git文件忽略" class="headerlink" title="git文件忽略"></a>git文件忽略</h3><p>有些文件是不需要推送到远程仓库的，比如通过<strong>NPM</strong>下载的包，只要保存<strong>package.json</strong>文件就行</p><p>在项目的根目录新建文件 <code>.gitignore</code>，不想要传什么内容，直接卸载这个文件里面（一项占一行），如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node_modules</span><br><span class="line">image</span><br><span class="line">test.html</span><br></pre></td></tr></table></figure><!-- <span style="color: #f44d27; font-size: 150px">git</span>      <span style="font-size: 50px">和  </span><span style="color: #5f2781; font-size: 150px">github</span>--><p>​    <!-- <span style="font-size: 50px">基本使用</span>--></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单记录&lt;span style=&quot;color: orange;&quot;&gt;git&lt;/span&gt;和&lt;span style=&quot;color: purple;&quot;&gt;github&lt;/span&gt;的使用&lt;/p&gt;
&lt;p&gt;操作系统：Windows&lt;/p&gt;</summary>
    
    
    
    <category term="部署运维" scheme="https://smalljerry.cn/categories/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="git" scheme="https://smalljerry.cn/tags/git/"/>
    
    <category term="github" scheme="https://smalljerry.cn/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB基本使用</title>
    <link href="https://smalljerry.cn/2021/04/16/MongoDB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://smalljerry.cn/2021/04/16/MongoDB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2021-04-16T07:13:44.000Z</published>
    <updated>2025-02-22T02:14:47.324Z</updated>
    
    <content type="html"><![CDATA[<p>简单记录<span style="color: purple;">命令行</span>、<span style="color: green">Node.js</span>操作<span style="color: lightgreen">MongoDB</span></p><p>使用版本 ：社区版<code>4.2.6</code></p><span id="more"></span><p>MongoDB属于非关系型数据库，数据的存储类似于 <em>JSON对象</em></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    name<span class="punctuation">:</span> &#x27;lisi&#x27;<span class="punctuation">,</span></span><br><span class="line">    age<span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    hobbies<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;吃饭&#x27;<span class="punctuation">,</span> &#x27;睡觉&#x27;<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h2><p>👉 <a href="https://www.mongodb.com/try/download/community">MongoDB下载地址</a></p><p>下载的是msi版本，点击安装，选择<strong>custom</strong>自定义安装</p><p><img src="https://z3.ax1x.com/2021/04/16/cfSZOe.png" alt="自定义安装"></p><p>下一步、下一步，在 <em>Install MongoDB Compass</em> 处取消打钩，先不安装这个</p><p><img src="https://z3.ax1x.com/2021/04/16/cfSrlT.png" alt="取消打钩"></p><p>MongoDB Compass 是 MongoDB 的一款图形化管理工具，除此外还有别的工具。这里不下载是因为下载很慢，可能会导致 MongoDB 安装不成功；可以自己在浏览器下载，这样快很多。</p><p>👉 <a href="https://www.mongodb.com/try/download/compass">MongoDB Compass下载地址</a></p><h2 id="mongoose安装"><a href="#mongoose安装" class="headerlink" title="mongoose安装"></a>mongoose安装</h2><p><span style="color: green">Node.js</span>操作MongoDB，需要下载插件 <em>mongoose</em></p><p>下载：**<code>npm install mongoose</code>**</p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><h2 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h2><p><strong>命令行启动</strong></p><p>首先进入MongoDB目录里的 <em>bin</em> 目录，执行命令，并且选择要执行的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath 盘符:\目录\</span><br></pre></td></tr></table></figure><p><strong>连接</strong></p><p>在 <em>bin</em> 目录下执行命令即可启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo.exe</span><br></pre></td></tr></table></figure><p><strong>启动、关闭服务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start MongoDB</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop MongoDB</span><br></pre></td></tr></table></figure><p><strong>移除服务</strong></p><p>在MongoDB目录下的 bin 里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod.exe --remove</span><br></pre></td></tr></table></figure><p><strong>任务管理启动</strong></p><p>对于 <em>Windows</em>，打开任务管理，点击 <em>服务</em>，<em>打开服务</em>，在服务窗口就可以找到MongoDB并且启动</p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>直接在系统变量的<code>path</code>中加上一条MongoDB目录的 bin 目录即可。</p><p><img src="https://z3.ax1x.com/2021/04/16/chKMmd.png" alt="环境变量"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>分为命令行、可视化工具、Node.js</p><h2 id="图形界面使用"><a href="#图形界面使用" class="headerlink" title="图形界面使用"></a>图形界面使用</h2><p><img src="https://z3.ax1x.com/2021/04/16/chndgg.png" alt="图形界面连接"></p><p>这串东西在命令行运行 <code>mongo</code> 的时候会出现。</p><h2 id="命令行使用"><a href="#命令行使用" class="headerlink" title="命令行使用"></a>命令行使用</h2><p>在命令行直接使用就可连上，用户名和密码是可选的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><p>如果想用用户名密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://admin:123456@localhost/</span><br></pre></td></tr></table></figure><p>如果还想指定数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://admin:123456@localhost/test</span><br></pre></td></tr></table></figure><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><strong>使用</strong>数据库，如果不存在就创建这个数据库 (刚创建的数据库是看不见的，要插入内容才能看见)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名</span><br></pre></td></tr></table></figure><p>查看当前数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db</span><br></pre></td></tr></table></figure><p>查看所有数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure><p><strong>删除</strong>数据库，使用 <code>use</code> 选中要删除的数据库，然后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><p><strong>导入数据库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoimport -d 数据库名称 -c 集合名称 --file 要导入的数据文件</span><br></pre></td></tr></table></figure><ul><li>先要将其添加到环境变量</li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p><strong>创建集合</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(name, options)</span><br></pre></td></tr></table></figure><p>options选项，当使用时，以对象的形式使用</p><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>布尔值</td><td>当为 true 的时候，指创建固定大小的集合，必须指定 size 的值，超过时会覆盖最早的值</td></tr><tr><td>sise</td><td>数值</td><td>指定集合的最大值</td></tr><tr><td>max</td><td>数值</td><td>指定集合中文档的最大数量</td></tr></tbody></table><p><strong>删除集合</strong></p><p>在要删除集合所处的数据库中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.drop()</span><br></pre></td></tr></table></figure><h3 id="文档-增删改查"><a href="#文档-增删改查" class="headerlink" title="文档 - 增删改查"></a>文档 - 增删改查</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名字.insert(document)</span><br></pre></td></tr></table></figure><ul><li>如果插入的数据主键已经存在，报错</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名字.save(document)</span><br></pre></td></tr></table></figure><ul><li>如果主键存在，则更新数据；如果不存在则插入数据（逐渐不使用这个方法）</li></ul><p>插入一条</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.document.insertOne(</span><br><span class="line">&lt;document&gt;,</span><br><span class="line">&#123;</span><br><span class="line">writeConcern: &lt;document&gt;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>插入多条</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.document.insertMany(</span><br><span class="line">[ &lt;document 1&gt;, &lt;document 2&gt; ],</span><br><span class="line">&#123;</span><br><span class="line">writeConcern: &lt;document&gt;,</span><br><span class="line">ordered: &lt;boolean&gt;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>以上用到的参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>document</td><td>要插入的文档</td></tr><tr><td>writeConcern</td><td>写入策略，默认1，要求确认写操作，不要就0</td></tr><tr><td>ordered</td><td>指定是否顺序写入，默认true</td></tr></tbody></table><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.collection.remove(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     justOne: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>query</td><td>可选，删除的条件</td></tr><tr><td>justOne</td><td>如果为 1 或 true，只删除一条，如果不设置，删除匹配的</td></tr><tr><td>writeConcern</td><td>抛出异常的级别</td></tr></tbody></table><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update(</span><br><span class="line">&lt;query&gt;,</span><br><span class="line">&lt;update&gt;,</span><br><span class="line">&#123;</span><br><span class="line">upsert: &lt;boolean&gt;,</span><br><span class="line">multi:&lt;boolean&gt;,</span><br><span class="line">writeConcern: &lt;document&gt;</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>query</td><td>更新的查询条件</td></tr><tr><td>update</td><td>要更新的对象，类似于sql中的 set xxx</td></tr><tr><td>upsert</td><td>可选，如果不存在update的记录，是否插入objNew，默认是false，不插入。</td></tr><tr><td>multi</td><td>可选，只更新找到的第一条数据。默认 false</td></tr><tr><td>writeConcern</td><td>可选，抛出异常的级别</td></tr></tbody></table><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(query, projection)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>query</td><td>查询条件</td></tr><tr><td>projection</td><td>指定要返回的文本的键，如果返回所有，不用写这个参数</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.find().pretty()</span><br></pre></td></tr></table></figure><ul><li>格式化输出的内容</li></ul><p>👉 <strong><a href="https://www.runoob.com/mongodb/mongodb-operators.html" style="color: green;">去菜鸟教程看深入内容</a></strong></p><h2 id="Node-js-操作"><a href="#Node-js-操作" class="headerlink" title="Node.js 操作"></a>Node.js 操作</h2><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mongoose</span><br><span class="line">  .connect(&#x27;mongodb://localhost/mongotest&#x27;, &#123; useNewUrlParser: true &#125;)</span><br><span class="line">  .then(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;连接成功&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch((err) =&gt; &#123;</span><br><span class="line">    console.log(&#x27;连接失败&#x27;, err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ul><li>如果指定的数据库不存在，则会自动创建数据库（创建了不插入数据，在列表中是找不到的）</li><li><code>&#123; useNewUrlParser: true &#125;</code>：新版的MongoDB会有这样的提示，不用特别去记，如果不加上系统会有提示的</li></ul><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p><strong>创建集合</strong>（数据表）：分为两步</p><ol><li>设置集合的规则</li><li>创建集合</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设定集合规则</span></span><br><span class="line"><span class="keyword">const</span> courseSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">author</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">isPublished</span>: <span class="title class_">Boolean</span>,</span><br><span class="line">    <span class="attr">tags</span>: [<span class="title class_">String</span>]</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 创建集合并应用规则</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Course</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Course&#x27;</span>, courseSchema);</span><br></pre></td></tr></table></figure><ul><li><code>model</code>：里面的集合名称首字母要大写，生成的名称会是小写，然后是复数形式，如上的<em>courses</em>，这个方法返回一个<strong>构造函数</strong>，用于操作数据</li></ul><p><strong>创建文档</strong>（每一条数据）：分为两步</p><ol><li>创建集合实例</li><li>调用实例对象下的save方法将数据保存到数据库中</li></ol><p>创建的时候会自动为每一条数据生成一个id，<code>_id</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> course = <span class="keyword">new</span> <span class="title class_">Course</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;node.js&#x27;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&#x27;河马程序员&#x27;</span>,</span><br><span class="line">  <span class="attr">isPublised</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="string">&#x27;20&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">course.<span class="title function_">save</span>()</span><br></pre></td></tr></table></figure><p>还有一种方法，使用 <code>create()</code> 方法，这不用调用 save()</p><ul><li>也分为两种形式，回调形式和Promise形式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Course</span>.<span class="title function_">create</span>(</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;JavaScript&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;河马有用&#x27;</span>, <span class="attr">isPublised</span>: <span class="literal">false</span>, <span class="attr">price</span>: <span class="number">44</span> &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Promise形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Course</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Python额&#x27;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&#x27;黑兔程序员&#x27;</span>,</span><br><span class="line">  <span class="attr">isPublised</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">49</span>,</span><br><span class="line">  <span class="attr">tag</span>: [<span class="string">&#x27;程序员&#x27;</span>, <span class="string">&#x27;python&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err))</span><br></pre></td></tr></table></figure><h4 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h4><p>基础查询</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Course</span>.<span class="title function_">find</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line"><span class="comment">// 加入筛选条件，是一个对象;返回值是一个数组</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">find</span>(&#123; <span class="attr">author</span>: <span class="string">&#x27;白马程序员&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;find返回数组&#x27;</span>, result)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 只返回一条,默认返回第一条</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">findOne</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;findOne只返回一条&#x27;</span>, result))</span><br></pre></td></tr></table></figure><p>范围查询</p><ul><li>$gt：大于， $lt：小于</li><li>$in：包含</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Course</span>.<span class="title function_">find</span>(&#123; <span class="attr">price</span>: &#123; <span class="attr">$gt</span>: <span class="number">20</span>, <span class="attr">$lt</span>: <span class="number">30</span> &#125; &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;范围查询&#x27;</span>, result)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Course</span>.<span class="title function_">find</span>(&#123; <span class="attr">tag</span>: &#123; <span class="attr">$in</span>: [<span class="string">&#x27;js&#x27;</span>] &#125; &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;包含&#x27;</span>, result)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>字段查询</p><ul><li>字段：选择要查询输出的字段，在find()后面链式调用select(),多个字段用空格隔开</li><li>不想查询谁，在前面加上 “-”，如：-id</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Course</span>.<span class="title function_">find</span>()</span><br><span class="line">  .<span class="title function_">select</span>(<span class="string">&#x27;name author -id&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;字段查询&#x27;</span>, result))</span><br></pre></td></tr></table></figure><p>排序</p><ul><li>在find()后面链式调用sort()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Course</span>.<span class="title function_">find</span>()</span><br><span class="line">  .<span class="title function_">sort</span>(<span class="string">&#x27;price&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;排序&#x27;</span>, result))</span><br></pre></td></tr></table></figure><p>跳过、限制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Course</span>.<span class="title function_">find</span>()</span><br><span class="line">  .<span class="title function_">skip</span>(<span class="number">2</span>)</span><br><span class="line">  .<span class="title function_">limit</span>(<span class="number">3</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br></pre></td></tr></table></figure><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><p>删除一条</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Course</span>.<span class="title function_">findOneAndDelete</span>(&#123; <span class="attr">_id</span>: <span class="string">&#x27;606c49904798cf25005e0cd6&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span></span><br><span class="line">  <span class="comment">// 返回的就是删除的那条，如果匹配了多条，会删除第一条</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>删除多条</p><ul><li>！！如果传了空对象{}，会删除所有。返回值是一个对象，OK和n，ok为1代表成功，n代表删除的条目</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Course</span>.<span class="title function_">deleteMany</span>(&#123;&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br></pre></td></tr></table></figure><h4 id="更新-1"><a href="#更新-1" class="headerlink" title="更新"></a>更新</h4><p>更新一条</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Course</span>.<span class="title function_">updateOne</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Python额&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;Python学习&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>更新多条</p><ul><li>如果传递一个空对象，即是更新所有</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Course</span>.<span class="title function_">updateOne</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Python额&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;Python学习&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="mongoose验证"><a href="#mongoose验证" class="headerlink" title="mongoose验证"></a>mongoose验证</h3><p>在创建验证规则的时候，可以设置当前字段的验证规则，验证失败就输入插入失败</p><ul><li>require: true 必传字段。如下，如果title没传就会报错</li><li>require: [true, ‘请传入标题’]，也可以是一个数组</li><li>minlength类型对于字符串，min类型对于数值</li></ul><p>这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> postSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">minlength</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">maxlength</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">trim</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>或者这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> postSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: [<span class="literal">true</span>, <span class="string">&#x27;请传入文章标题&#x27;</span>],</span><br><span class="line">    <span class="attr">minlength</span>: [<span class="number">2</span>, <span class="string">&#x27;标题最小不能小于2位&#x27;</span>],</span><br><span class="line">    <span class="attr">maxlength</span>: [<span class="number">5</span>, <span class="string">&#x27;标题最小不能小于5位&#x27;</span>],</span><br><span class="line">    <span class="attr">trim</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">min</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">max</span>: <span class="number">60</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">publishDate</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Date</span>,</span><br><span class="line">    <span class="comment">// default的可以不传</span></span><br><span class="line">    <span class="attr">default</span>: <span class="title class_">Date</span>.<span class="property">now</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">category</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="comment">// enum指定要传的值，不是指定的值不能传</span></span><br><span class="line">    <span class="attr">enum</span>: [<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;js&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义验证</span></span><br><span class="line">  <span class="attr">author</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">validate</span>: &#123;</span><br><span class="line">      <span class="attr">validator</span>: <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 返回布尔值，val是要验证的值</span></span><br><span class="line">        <span class="keyword">return</span> val &amp;&amp; val.<span class="property">length</span> &gt; <span class="number">4</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 自定义消息</span></span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;传入的值不符合验证规则&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Post</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Post&#x27;</span>, postSchema)</span><br><span class="line"><span class="title class_">Post</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;开心&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">  <span class="attr">category</span>: <span class="string">&#x27;html&#x27;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&#x27;asd&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error))</span><br></pre></td></tr></table></figure><h3 id="集合关联"><a href="#集合关联" class="headerlink" title="集合关联"></a>集合关联</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户规则</span></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 书本规则</span></span><br><span class="line"><span class="keyword">const</span> bookSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">author</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: mongoose.<span class="property">Schema</span>.<span class="property">Types</span>.<span class="property">ObjectId</span>,</span><br><span class="line">    <span class="attr">ref</span>: <span class="string">&#x27;User&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 用户集合</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;User&#x27;</span>, userSchema)</span><br><span class="line"><span class="comment">// 书本集合</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Book</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Book&#x27;</span>, bookSchema)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建用户</span></span><br><span class="line"><span class="title class_">User</span>.<span class="title function_">create</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;铜锣湾扎fit人&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line"><span class="comment">// 创建书本</span></span><br><span class="line"><span class="title class_">Book</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;如何做洪兴大佬&#x27;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&#x27;606daa780bd6c1573c703c48&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这条查出的是书本信息，但是作者是当前作者的id</span></span><br><span class="line"><span class="comment">// Book.find().then()</span></span><br><span class="line"><span class="title class_">Book</span>.<span class="title function_">find</span>()</span><br><span class="line">  .<span class="title function_">populate</span>(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br></pre></td></tr></table></figure><p>可能增补、修改……</p><!-- <span style="color: green; font-size: 100px; text-shadow: 2px 2px 1px gold ">mongoDB</span> --><!-- <b style="color: gold; font-size: 30px">  📄&nbsp;基本使用</b>     <span style="color: orange; font-size: 25px">AND</span>     <span style="color: green; font-size: 45px;text-shadow: 2px 2px 1px lightgreen">Node.js</span> -->]]></content>
    
    
    <summary type="html">&lt;p&gt;简单记录&lt;span style=&quot;color: purple;&quot;&gt;命令行&lt;/span&gt;、&lt;span style=&quot;color: green&quot;&gt;Node.js&lt;/span&gt;操作&lt;span style=&quot;color: lightgreen&quot;&gt;MongoDB&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;使用版本 ：社区版&lt;code&gt;4.2.6&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="后端学习" scheme="https://smalljerry.cn/categories/%E5%90%8E%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="数据库" scheme="https://smalljerry.cn/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
